import { Router } from '@angular/router';
import { Injectable, Inject } from '@angular/core';
import { DTGAuthService } from '../ditagis-auth.service';
import { DTGAUTH_CONFIG } from '../dtg-auth.config';
import * as i0 from "@angular/core";
import * as i1 from "../ditagis-auth.service";
import * as i2 from "@angular/router";
import * as i3 from "../dtg-auth.config";
export class DTGSimpleGuard {
    constructor(authService, router, config) {
        this.authService = authService;
        this.router = router;
        this.config = config;
    }
    canActivate(route, state) {
        const isAuthenticate = this.authService.isAuthenticate();
        if (isAuthenticate) {
            // logged in so return true
            if (this.config.guard && this.config.guard.simple) {
                if (this.config.guard.simple.canActive) {
                    this.config.guard.simple.canActive(route, state);
                }
            }
            return true;
        }
        // not logged in so redirect to login page with the return url
        if (this.config.guard && this.config.guard.simple) {
            if (this.config.guard.simple.canNotActive) {
                this.config.guard.simple.canNotActive(route, state);
                return false;
            }
        }
        this.router.navigateByUrl(this.config.guard &&
            this.config.guard.simple && this.config.guard.simple.defaultNavigateUrl ?
            this.config.guard.simple.defaultNavigateUrl :
            '/auth', { queryParams: { returnUrl: state.url } });
        return false;
    }
}
DTGSimpleGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function DTGSimpleGuard_Factory() { return new DTGSimpleGuard(i0.ɵɵinject(i1.DTGAuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.DTGAUTH_CONFIG)); }, token: DTGSimpleGuard, providedIn: "root" });
DTGSimpleGuard.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
DTGSimpleGuard.ctorParameters = () => [
    { type: DTGAuthService },
    { type: Router },
    { type: undefined, decorators: [{ type: Inject, args: [DTGAUTH_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLmd1YXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZHRnLWF1dGgvc3JjL2xpYi9ndWFyZHMvc2ltcGxlLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBNEQsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxjQUFjLEVBQXdCLE1BQU0sb0JBQW9CLENBQUM7Ozs7O0FBRzFFLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLFlBQ1UsV0FBMkIsRUFDM0IsTUFBYyxFQUNVLE1BQTRCO1FBRnBELGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQUMzQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ1UsV0FBTSxHQUFOLE1BQU0sQ0FBc0I7SUFHOUQsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUE2QixFQUFFLEtBQTBCO1FBQ25FLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDekQsSUFBSSxjQUFjLEVBQUU7WUFDbEIsMkJBQTJCO1lBQzNCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUNqRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7b0JBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUNsRDthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELDhEQUE4RDtRQUM5RCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNqRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7Z0JBQ3pDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUNwRCxPQUFPLEtBQUssQ0FBQzthQUNkO1NBQ0Y7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3pFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQzdDLE9BQU8sRUFDUCxFQUFFLFdBQVcsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7OztZQXBDRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7WUFIekIsY0FBYztZQUY0QyxNQUFNOzRDQVVwRSxNQUFNLFNBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbkFjdGl2YXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXJTdGF0ZVNuYXBzaG90LCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRFRHQXV0aFNlcnZpY2UgfSBmcm9tICcuLi9kaXRhZ2lzLWF1dGguc2VydmljZSc7XHJcbmltcG9ydCB7IERUR0FVVEhfQ09ORklHLCBEVEdBdXRoTW9kdWxlT3B0aW9ucyB9IGZyb20gJy4uL2R0Zy1hdXRoLmNvbmZpZyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgRFRHU2ltcGxlR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGF1dGhTZXJ2aWNlOiBEVEdBdXRoU2VydmljZSxcclxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgICBASW5qZWN0KERUR0FVVEhfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogRFRHQXV0aE1vZHVsZU9wdGlvbnNcclxuICApIHtcclxuXHJcbiAgfVxyXG5cclxuICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpIHtcclxuICAgIGNvbnN0IGlzQXV0aGVudGljYXRlID0gdGhpcy5hdXRoU2VydmljZS5pc0F1dGhlbnRpY2F0ZSgpO1xyXG4gICAgaWYgKGlzQXV0aGVudGljYXRlKSB7XHJcbiAgICAgIC8vIGxvZ2dlZCBpbiBzbyByZXR1cm4gdHJ1ZVxyXG4gICAgICBpZiAodGhpcy5jb25maWcuZ3VhcmQgJiYgdGhpcy5jb25maWcuZ3VhcmQuc2ltcGxlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmd1YXJkLnNpbXBsZS5jYW5BY3RpdmUpIHtcclxuICAgICAgICAgIHRoaXMuY29uZmlnLmd1YXJkLnNpbXBsZS5jYW5BY3RpdmUocm91dGUsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbm90IGxvZ2dlZCBpbiBzbyByZWRpcmVjdCB0byBsb2dpbiBwYWdlIHdpdGggdGhlIHJldHVybiB1cmxcclxuICAgIGlmICh0aGlzLmNvbmZpZy5ndWFyZCAmJiB0aGlzLmNvbmZpZy5ndWFyZC5zaW1wbGUpIHtcclxuICAgICAgaWYgKHRoaXMuY29uZmlnLmd1YXJkLnNpbXBsZS5jYW5Ob3RBY3RpdmUpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZy5ndWFyZC5zaW1wbGUuY2FuTm90QWN0aXZlKHJvdXRlLCBzdGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKFxyXG4gICAgICB0aGlzLmNvbmZpZy5ndWFyZCAmJlxyXG4gICAgICAgIHRoaXMuY29uZmlnLmd1YXJkLnNpbXBsZSAmJiB0aGlzLmNvbmZpZy5ndWFyZC5zaW1wbGUuZGVmYXVsdE5hdmlnYXRlVXJsID9cclxuICAgICAgICB0aGlzLmNvbmZpZy5ndWFyZC5zaW1wbGUuZGVmYXVsdE5hdmlnYXRlVXJsIDpcclxuICAgICAgICAnL2F1dGgnXHJcbiAgICAgICwgeyBxdWVyeVBhcmFtczogeyByZXR1cm5Vcmw6IHN0YXRlLnVybCB9IH0pO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufVxyXG4iXX0=