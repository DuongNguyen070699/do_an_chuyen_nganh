import { __awaiter } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DTGAUTH_CONFIG } from './dtg-auth.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./dtg-auth.config";
const TOKEN = 'token';
const USER = 'user';
export class DTGAuthService {
    constructor(http, config) {
        this.http = http;
        this.config = config;
    }
    authenticate(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, password, appId } = params;
            const url = this.config.loginUrl || this.config.apiUrl + '/auth/login';
            const result = yield this.http.post(url, {
                username, password,
                appId
            }).toPromise();
            if (result) {
                localStorage.setItem(TOKEN, result.accessToken);
                localStorage.setItem(USER, JSON.stringify(result));
            }
            return result;
        });
    }
    isAuthenticate() {
        return Boolean(this.getToken());
    }
    getToken() {
        return localStorage.getItem(TOKEN);
    }
    getInfo() {
        const user = localStorage.getItem(USER);
        if (user) {
            return JSON.parse(user);
        }
        return null;
    }
    deAuthenticate() {
        localStorage.removeItem(TOKEN);
        localStorage.removeItem(USER);
    }
    isAccess(params) {
        const { appId } = params;
        const url = this.config.isAccessUrl ||
            `${this.config.apiUrl}/auth/isaccess/${appId}`;
        return this.http.get(url, {
            headers: {
                Authorization: 'Bearer ' + this.getToken()
            }
        });
    }
    getAppInfo(params) {
        // Get a token from api server using the fetch api
        const { appId, isGuest } = params;
        let url = this.config.appInfoUrl || `${this.config.apiUrl}/auth/appinfo/${appId}`;
        let headers = new HttpHeaders();
        if (!isGuest && this.isAuthenticate()) {
            headers = headers.append('Authorization', 'Bearer ' + this.getToken());
        }
        else {
            url = url + '/anonymous';
        }
        return this.http.get(url, {
            headers
        });
    }
}
DTGAuthService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DTGAuthService_Factory() { return new DTGAuthService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DTGAUTH_CONFIG)); }, token: DTGAuthService, providedIn: "root" });
DTGAuthService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
DTGAuthService.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: [DTGAUTH_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGl0YWdpcy1hdXRoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9kdGctYXV0aC9zcmMvbGliL2RpdGFnaXMtYXV0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRS9ELE9BQU8sRUFBRSxjQUFjLEVBQXdCLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFJekUsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBQ3RCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQztBQUdwQixNQUFNLE9BQU8sY0FBYztJQUN2QixZQUNZLElBQWdCLEVBQ1EsTUFBNEI7UUFEcEQsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNRLFdBQU0sR0FBTixNQUFNLENBQXNCO0lBR2hFLENBQUM7SUFFSyxZQUFZLENBQUMsTUFHbEI7O1lBQ0csTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxDQUFDO1lBQzdDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQztZQUN2RSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFnQixHQUFHLEVBQUU7Z0JBQ3BELFFBQVEsRUFBRSxRQUFRO2dCQUNsQixLQUFLO2FBQ1IsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2YsSUFBSSxNQUFNLEVBQUU7Z0JBQ1IsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNoRCxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDdEQ7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDO0tBQUE7SUFFRCxjQUFjO1FBQ1YsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELE9BQU87UUFDSCxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksSUFBSSxFQUFFO1lBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELGNBQWM7UUFDVixZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFFBQVEsQ0FBQyxNQUVSO1FBQ0csTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUN6QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7WUFDL0IsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEtBQUssRUFBRSxDQUFDO1FBQ25ELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVUsR0FBRyxFQUFFO1lBQy9CLE9BQU8sRUFBRTtnQkFDTCxhQUFhLEVBQUUsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUU7YUFDN0M7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsVUFBVSxDQUFDLE1BR1Y7UUFDRyxrREFBa0Q7UUFDbEQsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDbEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEtBQUssRUFBRSxDQUFDO1FBQ2xGLElBQUksT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUU7WUFDbkMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUUxRTthQUFNO1lBQ0gsR0FBRyxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUM7U0FDNUI7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFvQixHQUFHLEVBQUU7WUFDekMsT0FBTztTQUNWLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7WUE3RUosVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O1lBVHpCLFVBQVU7NENBYVYsTUFBTSxTQUFDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgUmVzcG9uc2VMb2dpbiB9IGZyb20gJy4vaW50ZXJmYWNlcy9hdXRoLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEVEdBVVRIX0NPTkZJRywgRFRHQXV0aE1vZHVsZU9wdGlvbnMgfSBmcm9tICcuL2R0Zy1hdXRoLmNvbmZpZyc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbkVudGl0eSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmNvbnN0IFRPS0VOID0gJ3Rva2VuJztcbmNvbnN0IFVTRVIgPSAndXNlcic7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRFRHQXV0aFNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgICAgIEBJbmplY3QoRFRHQVVUSF9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBEVEdBdXRoTW9kdWxlT3B0aW9uc1xuICAgICkge1xuXG4gICAgfVxuXG4gICAgYXN5bmMgYXV0aGVudGljYXRlKHBhcmFtczoge1xuICAgICAgICB1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nLFxuICAgICAgICBhcHBJZD86IHN0cmluZ1xuICAgIH0pIHtcbiAgICAgICAgY29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQsIGFwcElkIH0gPSBwYXJhbXM7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuY29uZmlnLmxvZ2luVXJsIHx8IHRoaXMuY29uZmlnLmFwaVVybCArICcvYXV0aC9sb2dpbic7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuaHR0cC5wb3N0PFJlc3BvbnNlTG9naW4+KHVybCwge1xuICAgICAgICAgICAgdXNlcm5hbWUsIHBhc3N3b3JkLFxuICAgICAgICAgICAgYXBwSWRcbiAgICAgICAgfSkudG9Qcm9taXNlKCk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFRPS0VOLCByZXN1bHQuYWNjZXNzVG9rZW4pO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oVVNFUiwgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBpc0F1dGhlbnRpY2F0ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5nZXRUb2tlbigpKTtcbiAgICB9XG5cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFRPS0VOKTtcbiAgICB9XG5cbiAgICBnZXRJbmZvKCkge1xuICAgICAgICBjb25zdCB1c2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oVVNFUik7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh1c2VyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBkZUF1dGhlbnRpY2F0ZSgpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oVE9LRU4pO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShVU0VSKTtcbiAgICB9XG5cbiAgICBpc0FjY2VzcyhwYXJhbXM6IHtcbiAgICAgICAgYXBwSWQ6IHN0cmluZ1xuICAgIH0pIHtcbiAgICAgICAgY29uc3QgeyBhcHBJZCB9ID0gcGFyYW1zO1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmNvbmZpZy5pc0FjY2Vzc1VybCB8fFxuICAgICAgICAgICAgYCR7dGhpcy5jb25maWcuYXBpVXJsfS9hdXRoL2lzYWNjZXNzLyR7YXBwSWR9YDtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Ym9vbGVhbj4odXJsLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogJ0JlYXJlciAnICsgdGhpcy5nZXRUb2tlbigpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEFwcEluZm8ocGFyYW1zOiB7XG4gICAgICAgIGFwcElkOiBzdHJpbmcsXG4gICAgICAgIGlzR3Vlc3Q/OiBib29sZWFuXG4gICAgfSk6IE9ic2VydmFibGU8QXBwbGljYXRpb25FbnRpdHk+IHtcbiAgICAgICAgLy8gR2V0IGEgdG9rZW4gZnJvbSBhcGkgc2VydmVyIHVzaW5nIHRoZSBmZXRjaCBhcGlcbiAgICAgICAgY29uc3QgeyBhcHBJZCwgaXNHdWVzdCB9ID0gcGFyYW1zO1xuICAgICAgICBsZXQgdXJsID0gdGhpcy5jb25maWcuYXBwSW5mb1VybCB8fCBgJHt0aGlzLmNvbmZpZy5hcGlVcmx9L2F1dGgvYXBwaW5mby8ke2FwcElkfWA7XG4gICAgICAgIGxldCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgICAgIGlmICghaXNHdWVzdCAmJiB0aGlzLmlzQXV0aGVudGljYXRlKCkpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLmFwcGVuZCgnQXV0aG9yaXphdGlvbicsICdCZWFyZXIgJyArIHRoaXMuZ2V0VG9rZW4oKSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybCA9IHVybCArICcvYW5vbnltb3VzJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxBcHBsaWNhdGlvbkVudGl0eT4odXJsLCB7XG4gICAgICAgICAgICBoZWFkZXJzXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==