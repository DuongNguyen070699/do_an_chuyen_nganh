import { Injectable, Inject } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { DTGAuthService } from '../ditagis-auth.service';
import { DTGAUTH_CONFIG } from '../../public-api';
import * as i0 from "@angular/core";
import * as i1 from "../ditagis-auth.service";
import * as i2 from "../dtg-auth.config";
export class ErrorInterceptor {
    constructor(authService, config) {
        this.authService = authService;
        this.config = config;
    }
    intercept(request, next) {
        return next.handle(request).pipe(catchError(err => {
            const url = this.config && this.config.loginUrl || 'login';
            if (request.url.search(url) === -1) {
                if (err.status === 401) {
                    // auto logout if 401 response returned from api
                    this.authService.deAuthenticate();
                    location.reload(true);
                }
            }
            const error = err.error.message || err.statusText || 'Có lỗi xảy ra';
            return throwError(error);
        }));
    }
}
ErrorInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorInterceptor_Factory() { return new ErrorInterceptor(i0.ɵɵinject(i1.DTGAuthService), i0.ɵɵinject(i2.DTGAUTH_CONFIG)); }, token: ErrorInterceptor, providedIn: "root" });
ErrorInterceptor.decorators = [
    { type: Injectable, args: [{ providedIn: 'root', deps: [DTGAuthService] },] }
];
ErrorInterceptor.ctorParameters = () => [
    { type: DTGAuthService },
    { type: undefined, decorators: [{ type: Inject, args: [DTGAUTH_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kdGctYXV0aC9zcmMvbGliL2ludGVyY2VwdG9ycy9lcnJvci5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQWMsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBd0IsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUd4RSxNQUFNLE9BQU8sZ0JBQWdCO0lBQ3pCLFlBQ1ksV0FBMkIsRUFDSCxNQUE0QjtRQURwRCxnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFDSCxXQUFNLEdBQU4sTUFBTSxDQUFzQjtJQUM1RCxDQUFDO0lBRUwsU0FBUyxDQUFDLE9BQXlCLEVBQUUsSUFBaUI7UUFDbEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDOUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUM7WUFDM0QsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDaEMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtvQkFDcEIsZ0RBQWdEO29CQUNoRCxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNsQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUN6QjthQUNKO1lBQ0QsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLFVBQVUsSUFBSSxlQUFlLENBQUM7WUFDckUsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7Ozs7WUFwQkosVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRTs7O1lBSGpELGNBQWM7NENBT2QsTUFBTSxTQUFDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdCwgSHR0cEhhbmRsZXIsIEh0dHBFdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBEVEdBdXRoU2VydmljZSB9IGZyb20gJy4uL2RpdGFnaXMtYXV0aC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRFRHQVVUSF9DT05GSUcsIERUR0F1dGhNb2R1bGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vcHVibGljLWFwaSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JywgZGVwczogW0RUR0F1dGhTZXJ2aWNlXSB9KVxyXG5leHBvcnQgY2xhc3MgRXJyb3JJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGF1dGhTZXJ2aWNlOiBEVEdBdXRoU2VydmljZSxcclxuICAgICAgICBASW5qZWN0KERUR0FVVEhfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogRFRHQXV0aE1vZHVsZU9wdGlvbnNcclxuICAgICkgeyB9XHJcblxyXG4gICAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG4gICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KS5waXBlKGNhdGNoRXJyb3IoZXJyID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdXJsID0gdGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcubG9naW5VcmwgfHwgJ2xvZ2luJztcclxuICAgICAgICAgICAgaWYgKHJlcXVlc3QudXJsLnNlYXJjaCh1cmwpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVyci5zdGF0dXMgPT09IDQwMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF1dG8gbG9nb3V0IGlmIDQwMSByZXNwb25zZSByZXR1cm5lZCBmcm9tIGFwaVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aFNlcnZpY2UuZGVBdXRoZW50aWNhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIuc3RhdHVzVGV4dCB8fCAnQ8OzIGzhu5dpIHjhuqN5IHJhJztcclxuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG4iXX0=