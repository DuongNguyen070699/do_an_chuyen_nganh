import { Injectable, Inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { DTGAUTH_CONFIG } from '../dtg-auth.config';
import { DTGAuthService } from '../ditagis-auth.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../ditagis-auth.service";
import * as i3 from "../dtg-auth.config";
export class DTGLayerInfoService {
    constructor(http, authService, config) {
        this.http = http;
        this.authService = authService;
        this.config = config;
    }
    get() {
        const url = this.config.layerInfoUrl ||
            `${this.config.apiUrl}/auth/layerinfos`;
        return this.http.get(url, {
            headers: {
                Authorization: 'Bearer ' + this.authService.getToken()
            }
        });
    }
    getGuest() {
        const url = this.config.layerInfoUrl ||
            `${this.config.apiUrl}/auth/layerinfos/anonymous`;
        return this.http.get(url);
    }
}
DTGLayerInfoService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DTGLayerInfoService_Factory() { return new DTGLayerInfoService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DTGAuthService), i0.ɵɵinject(i3.DTGAUTH_CONFIG)); }, token: DTGLayerInfoService, providedIn: "root" });
DTGLayerInfoService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
DTGLayerInfoService.ctorParameters = () => [
    { type: HttpClient },
    { type: DTGAuthService },
    { type: undefined, decorators: [{ type: Inject, args: [DTGAUTH_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHRnLWxheWVyaW5mby5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZHRnLWF1dGgvc3JjL2xpYi9zZXJ2aWNlcy9kdGctbGF5ZXJpbmZvLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQXdCLE1BQU0sb0JBQW9CLENBQUM7QUFHMUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7OztBQUd6RCxNQUFNLE9BQU8sbUJBQW1CO0lBQzlCLFlBQ1UsSUFBZ0IsRUFDaEIsV0FBMkIsRUFDSCxNQUE0QjtRQUZwRCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQUNILFdBQU0sR0FBTixNQUFNLENBQXNCO0lBQzFELENBQUM7SUFFTCxHQUFHO1FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZO1lBQ2xDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWMsR0FBRyxFQUFFO1lBQ3JDLE9BQU8sRUFBRTtnQkFDUCxhQUFhLEVBQUUsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO2FBQ3ZEO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVE7UUFDTixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVk7WUFDbEMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLENBQUM7UUFDcEQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBZ0IsR0FBRyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7OztZQXRCRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7WUFOekIsVUFBVTtZQUlWLGNBQWM7NENBT2xCLE1BQU0sU0FBQyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IERUR0FVVEhfQ09ORklHLCBEVEdBdXRoTW9kdWxlT3B0aW9ucyB9IGZyb20gJy4uL2R0Zy1hdXRoLmNvbmZpZyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTGF5ZXJFbnRpdHksIExheWVySW5mbyB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBEVEdBdXRoU2VydmljZSB9IGZyb20gJy4uL2RpdGFnaXMtYXV0aC5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBEVEdMYXllckluZm9TZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgIHByaXZhdGUgYXV0aFNlcnZpY2U6IERUR0F1dGhTZXJ2aWNlLFxyXG4gICAgQEluamVjdChEVEdBVVRIX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IERUR0F1dGhNb2R1bGVPcHRpb25zXHJcbiAgKSB7IH1cclxuXHJcbiAgZ2V0KCk6IE9ic2VydmFibGU8TGF5ZXJJbmZvW10+IHtcclxuICAgIGNvbnN0IHVybCA9IHRoaXMuY29uZmlnLmxheWVySW5mb1VybCB8fFxyXG4gICAgICBgJHt0aGlzLmNvbmZpZy5hcGlVcmx9L2F1dGgvbGF5ZXJpbmZvc2A7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxMYXllckluZm9bXT4odXJsLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBBdXRob3JpemF0aW9uOiAnQmVhcmVyICcgKyB0aGlzLmF1dGhTZXJ2aWNlLmdldFRva2VuKClcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRHdWVzdCgpOiBPYnNlcnZhYmxlPExheWVyRW50aXR5W10+IHtcclxuICAgIGNvbnN0IHVybCA9IHRoaXMuY29uZmlnLmxheWVySW5mb1VybCB8fFxyXG4gICAgICBgJHt0aGlzLmNvbmZpZy5hcGlVcmx9L2F1dGgvbGF5ZXJpbmZvcy9hbm9ueW1vdXNgO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8TGF5ZXJFbnRpdHlbXT4odXJsKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==