import { Injectable, Inject } from '@angular/core';
import { DTGAUTH_CONFIG } from '../dtg-auth.config';
import { HttpClient } from '@angular/common/http';
import { DTGAuthService } from '../ditagis-auth.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../ditagis-auth.service";
import * as i3 from "../dtg-auth.config";
export class DTGLogService {
    constructor(http, authService, config) {
        this.http = http;
        this.authService = authService;
        this.config = config;
    }
    create(entity) {
        const url = this.config.logUrl || `${this.config.apiUrl}/sys/logger`;
        return this.http.post(url, JSON.stringify(entity), {
            headers: {
                'Content-Type': 'application/json',
                Authorization: 'Bearer ' + this.authService.getToken()
            }
        });
    }
}
DTGLogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DTGLogService_Factory() { return new DTGLogService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DTGAuthService), i0.ɵɵinject(i3.DTGAUTH_CONFIG)); }, token: DTGLogService, providedIn: "root" });
DTGLogService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
DTGLogService.ctorParameters = () => [
    { type: HttpClient },
    { type: DTGAuthService },
    { type: undefined, decorators: [{ type: Inject, args: [DTGAUTH_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHRnLWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZHRnLWF1dGgvc3JjL2xpYi9zZXJ2aWNlcy9kdGctbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBd0IsTUFBTSxvQkFBb0IsQ0FBQztBQUUxRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7OztBQUd6RCxNQUFNLE9BQU8sYUFBYTtJQUN4QixZQUNVLElBQWdCLEVBQ2hCLFdBQTJCLEVBQ0gsTUFBNEI7UUFGcEQsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFDSCxXQUFNLEdBQU4sTUFBTSxDQUFzQjtJQUc5RCxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQWlCO1FBQ3RCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsQ0FBQztRQUNyRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFZLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzVELE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsa0JBQWtCO2dCQUNsQyxhQUFhLEVBQUUsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO2FBQ3ZEO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7OztZQWxCRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7WUFIekIsVUFBVTtZQUNWLGNBQWM7NENBT2xCLE1BQU0sU0FBQyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERUR0FVVEhfQ09ORklHLCBEVEdBdXRoTW9kdWxlT3B0aW9ucyB9IGZyb20gJy4uL2R0Zy1hdXRoLmNvbmZpZyc7XHJcbmltcG9ydCB7IExvZ0VudGl0eSB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBEVEdBdXRoU2VydmljZSB9IGZyb20gJy4uL2RpdGFnaXMtYXV0aC5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBEVEdMb2dTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgIHByaXZhdGUgYXV0aFNlcnZpY2U6IERUR0F1dGhTZXJ2aWNlLFxyXG4gICAgQEluamVjdChEVEdBVVRIX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IERUR0F1dGhNb2R1bGVPcHRpb25zXHJcbiAgKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgY3JlYXRlKGVudGl0eTogTG9nRW50aXR5KSB7XHJcbiAgICBjb25zdCB1cmwgPSB0aGlzLmNvbmZpZy5sb2dVcmwgfHwgYCR7dGhpcy5jb25maWcuYXBpVXJsfS9zeXMvbG9nZ2VyYDtcclxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxMb2dFbnRpdHk+KHVybCwgSlNPTi5zdHJpbmdpZnkoZW50aXR5KSwge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICBBdXRob3JpemF0aW9uOiAnQmVhcmVyICcgKyB0aGlzLmF1dGhTZXJ2aWNlLmdldFRva2VuKClcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==