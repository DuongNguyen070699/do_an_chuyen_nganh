{"version":3,"file":"ditagis-auth.js","sources":["../../../projects/dtg-auth/src/lib/dtg-auth.config.ts","../../../projects/dtg-auth/src/lib/ditagis-auth.service.ts","../../../projects/dtg-auth/src/lib/services/dtg-log.service.ts","../../../projects/dtg-auth/src/lib/services/dtg-layerinfo.service.ts","../../../projects/dtg-auth/src/lib/guards/simple.guard.ts","../../../projects/dtg-auth/src/lib/dtg-auth.module.ts","../../../projects/dtg-auth/src/lib/interfaces/application.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/auth.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/layer.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/log.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/user.interface.ts","../../../projects/dtg-auth/src/lib/interceptors/error.interceptor.ts","../../../projects/dtg-auth/src/lib/interceptors/jwt.interceptor.ts","../../../projects/dtg-auth/src/public-api.ts","../../../projects/dtg-auth/src/ditagis-auth.ts"],"names":[],"mappings":";;;;;;;;;;MAmBa,cAAc,GAAG,IAAI,cAAc,CAAuB,sBAAsB;AAC7F;ACbA,MAAM,KAAK,GAAG,OAAO,CAAC;AACtB,MAAM,IAAI,GAAG,MAAM,CAAC;AACpB,MAEa,cAAc;AAC3B,IAAI,YACY,IAAgB,EACQ,MAA4B;AACjE,QAFa,SAAI,GAAJ,IAAI,CAAY;AAAC,QACO,WAAM,GAAN,MAAM,CAAsB;AACpE,KAEK;AACL,IACU,YAAY,CAAC,MAGlB;AACL;AACQ,YADA,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;AACrD,YAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC;AAC/E,YAAQ,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAgB,GAAG,EAAE;AAChE,gBAAY,QAAQ,EAAE,QAAQ;AAC9B,gBAAY,KAAK;AACjB,aAAS,CAAC,CAAC,SAAS,EAAE,CAAC;AACvB,YAAQ,IAAI,MAAM,EAAE;AACpB,gBAAY,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;AAC5D,gBAAY,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;AAC/D,aAAS;AACT,YAAQ,OAAO,MAAM,CAAC;AACtB,SAAK;AAEJ,KAFI;AACL,IACI,cAAc;AAAK,QACf,OAAO,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AACxC,KAAK;AACL,IACI,QAAQ;AACZ,QAAQ,OAAO,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3C,KAAK;AACL,IACI,OAAO;AACX,QAAQ,MAAM,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAChD,QAAQ,IAAI,IAAI,EAAE;AAClB,YAAY,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACpC,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IACI,cAAc;AAClB,QAAQ,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACvC,QAAQ,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACtC,KAAK;AACL,IACI,QAAQ,CAAC,MAER;AACL,QAAQ,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;AACjC,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW;AAC3C,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,kBAAkB,KAAK,EAAE,CAAC;AAC3D,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,GAAG,EAAE;AAC3C,YAAY,OAAO,EAAE;AACrB,gBAAgB,aAAa,EAAE,SAAS,GAAG,IAAI,CAAC,QAAQ,EAAE;AAC1D,aAAa;AACb,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IACI,UAAU,CAAC,MAGV;AAAI;AACmB,QACpB,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;AAC1C,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,iBAAiB,KAAK,EAAE,CAAC;AAC1F,QAAQ,IAAI,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;AACxC,QAAQ,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,EAAE,EAAE;AAC/C,YAAY,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AACnF,SACS;AAAC,aAAK;AACf,YAAY,GAAG,GAAG,GAAG,GAAG,YAAY,CAAC;AACrC,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAoB,GAAG,EAAE;AACrD,YAAY,OAAO;AACnB,SAAS,CAAC,CAAC;AACX,KAAK;AACL;oKAAC;AACD,oNA9EK;AAAC;EADL,UAAU,SAAC,EAAE,vBAEE,YAXP,UAAU;OASK,EAAE,MAAM,EAAE,jBATX,4CAad,MAAM,SAAC,cAAc;AAAQ;;;;;;;kCAAE;AAAC;AAAC,MCP7B,aAAa;AAC1B,IAAE,YACU,IAAgB,EAChB,WAA2B,EACH,MAA4B;AAC7D,QAHS,SAAI,GAAJ,IAAI,CAAY;AAAC,QACjB,gBAAW,GAAX,WAAW,CAAgB;AAAC,QACJ,WAAM,GAAN,MAAM,CAAsB;AAChE,KAEG;AACH,IACE,MAAM,CAAC,MAAiB;AAC1B,QAAI,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,aAAa,CAAC;AACzE,QAAI,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAY,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;AAClE,YAAM,OAAO,EAAE;AACf,gBAAQ,cAAc,EAAE,kBAAkB;AAC1C,gBAAQ,aAAa,EAAE,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;AAC9D,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG;AACH;kMAAC;AACD,0OAnBK;AAAC;EADL,UAAU,SAAC,EAAE,vBAGb,YANQ,UAAU;OAGK,EAAE,MAAM,EAAE,jBAHX,YACd,cAAc;AAAI,4CAOtB,MAAM,SAAC,cAAc;AAAQ;;;;;;;kCAAE;AAAC;AAAC,MCHzB,mBAAmB;AAChC,IAAE,YACU,IAAgB,EAChB,WAA2B,EACH,MAA4B;AAC7D,QAHS,SAAI,GAAJ,IAAI,CAAY;AAAC,QACjB,gBAAW,GAAX,WAAW,CAAgB;AAAC,QACJ,WAAM,GAAN,MAAM,CAAsB;AAChE,KAAO;AACP,IACE,GAAG;AAAK,QACN,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY;AACxC,YAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,kBAAkB,CAAC;AAC9C,QAAI,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAc,GAAG,EAAE;AAC3C,YAAM,OAAO,EAAE;AACf,gBAAQ,aAAa,EAAE,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;AAC9D,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,QAAQ;AAAK,QACX,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY;AACxC,YAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,4BAA4B,CAAC;AACxD,QAAI,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAgB,GAAG,CAAC,CAAC;AAC7C,KAAG;AACH;oNACA;AAAC,kQAvBI;AAAC;EADL,UAAU,SAAC,EAAE,vBAGb,YATQ,UAAU;OAMK,EAAE,MAAM,EAAE,jBANX,YAId,cAAc;AAAI,4CAOtB,MAAM,SAAC,cAAc;AAAQ;;;;;;;kCAAE;AAAC;AAAC,MCNzB,cAAc;AAAG,IAC5B,YACU,WAA2B,EAC3B,MAAc,EACU,MAA4B;AAC7D,QAHS,gBAAW,GAAX,WAAW,CAAgB;AAAC,QAC5B,WAAM,GAAN,MAAM,CAAQ;AAAC,QACS,WAAM,GAAN,MAAM,CAAsB;AAChE,KAEG;AACH,IACE,WAAW,CAAC,KAA6B,EAAE,KAA0B;AACvE,QAAI,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;AAC7D,QAAI,IAAI,cAAc,EAAE;AACxB;AACM,YAAA,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;AACzD,gBAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE;AAChD,oBAAU,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAC3D,iBAAS;AACT,aAAO;AACP,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL;AAEG,QAAC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;AACvD,YAAM,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,EAAE;AACjD,gBAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAC5D,gBAAQ,OAAO,KAAK,CAAC;AACrB,aAAO;AACP,SAAK;AACL,QAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CACvB,IAAI,CAAC,MAAM,CAAC,KAAK;AACvB,YAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,kBAAkB;AAC/E,YAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,kBAAkB;AACnD,YAAQ,OAAO,EACP,EAAE,WAAW,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACnD,QAAI,OAAO,KAAK,CAAC;AACjB,KAAG;AACH;iMAAC;AACD,0OArCK;AAAC;EADL,UAAU,SAAC,EAAE,vBACgC,YAJrC,cAAc;GAGC,EAAE,MAAM,EAAE,bAHP,YAFwC,MAAM;AAAI,4CAUxE,MAAM,SAAC,cAAc;AAAQ;;;;;;;kCAAE;AAAC;AAAC,MCIzB,iBAAiB;AAC9B,IAAE,OAAO,OAAO,CAAC,OAA6B;AAAI,QAC9C,OAAO;AACX,YAAM,QAAQ,EAAE,iBAAiB;AACjC,YAAM,SAAS,EAAE;AACjB,gBAAQ,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,OAAO,EAAE;AACtD,gBAAQ,cAAc,EAAE,aAAa,EAAE,mBAAmB,EAAE,cAAc;AAC1E,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AACH;6CAhBC,QAAQ,SAAC;CACR,YAAY,EAAE,EAAE,kBAChB,OAAO,EAAE,sBACP,gBAAgB,kBACjB,cACF;;;;;;;;;;;;0BACI;AAAC;AAAC,ICKK;AAAZ,WAAY,0BAA0B;AACrC,IAAG,2CAAa,CAAA;AAAC,IAAC,uCAAS,CAAA;AAAC,IAAC,0CAAY,CAAA;AAC1C,CAAC,EAFW,0BAA0B,KAA1B,0BAA0B;AAChC;AAAC,MCpBM,aAAa;AAC1B;AAAE;AAAC,IC+BS;AAAZ,WAAY,cAAc;AACzB,IAAG,gDAA8B,CAAA;AAAC,IAC/B,4DAA0C,CAAA;AAAC,IAC3C,kDAAgC,CAAA;AAAC,IACjC,gDAA8B,CAAA;AAAC,IAC/B,4CAA0B,CAAA;AAAC,IAC3B,4CAA0B,CAAA;AAAC,IAC3B,0CAAwB,CAAA;AAAC,IACzB,oDAAkC,CAAA;AACtC,CAAC,EATW,cAAc,KAAd,cAAc;AACpB;AAAC,ICdK;AAAZ,WAAY,oBAAoB;AAC/B,IAAG,yCAAiB,CAAA;AAAC,IAClB,uCAAe,CAAA;AAAC,IAChB,yCAAiB,CAAA;AAAC,IAClB,yCAAiB,CAAA;AAAC,IAClB,yCAAiB,CAAA;AACrB,CAAC,EANW,oBAAoB,KAApB,oBAAoB;AAC1B;AAAC,ICDK;AAAZ,WAAY,cAAc;AACzB,IAAG,+BAAa,CAAA;AAAC,IACd,mCAAiB,CAAA;AAAC,IAClB,qCAAmB,CAAA;AAAC,IACpB,qCAAmB,CAAA;AACvB,CAAC,EALW,cAAc,KAAd,cAAc,QAKzB;AACD,IAYY;AAAZ,WAAY,cAAc;AACzB,IAAG,+BAAa,CAAA;AAAC,IAAC,+BAAa,CAAA;AAAC,IAAC,+BAAa,CAAA;AAC/C,CAAC,EAFW,cAAc,KAAd,cAAc;AACpB;AAAC,MC9BM,gBAAgB;AAAG,IAC5B,YACY,WAA2B,EACH,MAA4B;AACjE,QAFa,gBAAW,GAAX,WAAW,CAAgB;AAAC,QACJ,WAAM,GAAN,MAAM,CAAsB;AACpE,KAAS;AACT,IACI,SAAS,CAAC,OAAyB,EAAE,IAAiB;AAAI,QACtD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG;AACvD,YAAY,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,OAAO,CAAC;AACvE,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAChD,gBAAgB,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;AACxC;AACA,oBAAoB,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;AACtD,oBAAoB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC1C,iBAAiB;AACjB,aAAa;AACb,YAAY,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,IAAI,GAAG,CAAC,UAAU,IAAI,eAAe,CAAC;AACjF,YAAY,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;AACrC,SAAS,CAAC,CAAC,CAAC;AACZ,KAAK;AACL;uKAAC;AACD,gOArBK;AAAC;EADL,UAAU,SAAC,EAAE,vBACkC,YAJvC,cAAc;GAGC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,cAAc,CAAC,EAAE,rCAH/B,4CAOlB,MAAM,SAAC,cAAc;AAAQ;;;;;;;kCAAE;AAAC;AAAC,MCL7B,cAAc;AAAG,IAC1B,YAAoB,WAA2B;AAAI,QAA/B,gBAAW,GAAX,WAAW,CAAgB;AAAC,KAAI;AACxD,IACI,SAAS,CAAC,OAAyB,EAAE,IAAiB;AAAI;AAC1B,QAC5B,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;AACjE,QAAQ,IAAI,cAAc,EAAE;AAC5B,YAAY,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AACtD,YAAY,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;AACpC,gBAAgB,UAAU,EAAE;AAC5B,oBAAoB,aAAa,EAAE,UAAU,KAAK,EAAE;AACpD,iBAAiB;AACjB,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QACQ,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACpC,KAAK;AACL;gIAAC;AACD,8LAlBK;AAAC;EADL,UAAU,SAAC,EAAE,vBACgC,YAHrC,cAAc;AAAG;CAEF,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,cAAc,CAAC,EAAE;;;wEAF9B;AAAC;ACH7B;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AAI4J","sourcesContent":["import { InjectionToken } from '@angular/core';\r\nexport interface DTGAuthModuleOptions {\r\n  apiUrl: string;\r\n  loginUrl?: string;\r\n  logUrl?: string;\r\n  layerInfoUrl?: string;\r\n  isAccessUrl?: string;\r\n  appInfoUrl?: string;\r\n  guard?: {\r\n    simple?: {\r\n      canActive?: (route, state) => void,\r\n      canNotActive?: (route, state) => void,\r\n      /**\r\n       * Url mặc định khi canActive = false\r\n       */\r\n      defaultNavigateUrl?: string;\r\n    }\r\n  };\r\n}\r\nexport const DTGAUTH_CONFIG = new InjectionToken<DTGAuthModuleOptions>('DTGAuthModuleOptions');\r\n\r\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ResponseLogin } from './interfaces/auth.interface';\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from './dtg-auth.config';\nimport { ApplicationEntity } from './interfaces';\nimport { Observable } from 'rxjs';\n\nconst TOKEN = 'token';\nconst USER = 'user';\n\n@Injectable({ providedIn: 'root' })\nexport class DTGAuthService {\n    constructor(\n        private http: HttpClient,\n        @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\n    ) {\n\n    }\n\n    async authenticate(params: {\n        username: string, password: string,\n        appId?: string\n    }) {\n        const { username, password, appId } = params;\n        const url = this.config.loginUrl || this.config.apiUrl + '/auth/login';\n        const result = await this.http.post<ResponseLogin>(url, {\n            username, password,\n            appId\n        }).toPromise();\n        if (result) {\n            localStorage.setItem(TOKEN, result.accessToken);\n            localStorage.setItem(USER, JSON.stringify(result));\n        }\n        return result;\n    }\n\n    isAuthenticate(): boolean {\n        return Boolean(this.getToken());\n    }\n\n    getToken() {\n        return localStorage.getItem(TOKEN);\n    }\n\n    getInfo() {\n        const user = localStorage.getItem(USER);\n        if (user) {\n            return JSON.parse(user);\n        }\n        return null;\n    }\n\n    deAuthenticate() {\n        localStorage.removeItem(TOKEN);\n        localStorage.removeItem(USER);\n    }\n\n    isAccess(params: {\n        appId: string\n    }) {\n        const { appId } = params;\n        const url = this.config.isAccessUrl ||\n            `${this.config.apiUrl}/auth/isaccess/${appId}`;\n        return this.http.get<boolean>(url, {\n            headers: {\n                Authorization: 'Bearer ' + this.getToken()\n            }\n        });\n    }\n\n    getAppInfo(params: {\n        appId: string,\n        isGuest?: boolean\n    }): Observable<ApplicationEntity> {\n        // Get a token from api server using the fetch api\n        const { appId, isGuest } = params;\n        let url = this.config.appInfoUrl || `${this.config.apiUrl}/auth/appinfo/${appId}`;\n        let headers = new HttpHeaders();\n        if (!isGuest && this.isAuthenticate()) {\n            headers = headers.append('Authorization', 'Bearer ' + this.getToken());\n\n        } else {\n            url = url + '/anonymous';\n        }\n        return this.http.get<ApplicationEntity>(url, {\n            headers\n        });\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../dtg-auth.config';\r\nimport { LogEntity } from '../interfaces';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DTGLogService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: DTGAuthService,\r\n    @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n  ) {\r\n\r\n  }\r\n\r\n  create(entity: LogEntity) {\r\n    const url = this.config.logUrl || `${this.config.apiUrl}/sys/logger`;\r\n    return this.http.post<LogEntity>(url, JSON.stringify(entity), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer ' + this.authService.getToken()\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../dtg-auth.config';\r\nimport { Observable } from 'rxjs';\r\nimport { LayerEntity, LayerInfo } from '../interfaces';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DTGLayerInfoService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: DTGAuthService,\r\n    @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n  ) { }\r\n\r\n  get(): Observable<LayerInfo[]> {\r\n    const url = this.config.layerInfoUrl ||\r\n      `${this.config.apiUrl}/auth/layerinfos`;\r\n    return this.http.get<LayerInfo[]>(url, {\r\n      headers: {\r\n        Authorization: 'Bearer ' + this.authService.getToken()\r\n      }\r\n    });\r\n  }\r\n\r\n  getGuest(): Observable<LayerEntity[]> {\r\n    const url = this.config.layerInfoUrl ||\r\n      `${this.config.apiUrl}/auth/layerinfos/anonymous`;\r\n    return this.http.get<LayerEntity[]>(url);\r\n  }\r\n\r\n}\r\n","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../dtg-auth.config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DTGSimpleGuard implements CanActivate {\r\n  constructor(\r\n    private authService: DTGAuthService,\r\n    private router: Router,\r\n    @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n  ) {\r\n\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const isAuthenticate = this.authService.isAuthenticate();\r\n    if (isAuthenticate) {\r\n      // logged in so return true\r\n      if (this.config.guard && this.config.guard.simple) {\r\n        if (this.config.guard.simple.canActive) {\r\n          this.config.guard.simple.canActive(route, state);\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    // not logged in so redirect to login page with the return url\r\n    if (this.config.guard && this.config.guard.simple) {\r\n      if (this.config.guard.simple.canNotActive) {\r\n        this.config.guard.simple.canNotActive(route, state);\r\n        return false;\r\n      }\r\n    }\r\n    this.router.navigateByUrl(\r\n      this.config.guard &&\r\n        this.config.guard.simple && this.config.guard.simple.defaultNavigateUrl ?\r\n        this.config.guard.simple.defaultNavigateUrl :\r\n        '/auth'\r\n      , { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DTGAuthModuleOptions, DTGAUTH_CONFIG } from './dtg-auth.config';\nimport { DTGAuthService } from './ditagis-auth.service';\nimport { DTGLogService } from './services/dtg-log.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DTGLayerInfoService } from './services/dtg-layerinfo.service';\nimport { DTGSimpleGuard } from './guards/simple.guard';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    HttpClientModule\n  ]\n})\nexport class DitagisAuthModule {\n  static forRoot(options: DTGAuthModuleOptions): ModuleWithProviders<DitagisAuthModule> {\n    return {\n      ngModule: DitagisAuthModule,\n      providers: [\n        { provide: DTGAUTH_CONFIG, useValue: options },\n        DTGAuthService, DTGLogService, DTGLayerInfoService, DTGSimpleGuard\n      ]\n    };\n  }\n}\n","export interface ApplicationEntity {\r\n    applicationId?: string;\r\n    applicationName?: string;\r\n    isEnabled?: boolean;\r\n    applicationGroupId?: string;\r\n    applicationGroup?: ApplicationGroupEntity;\r\n    environmentId?: ApplicationEnvironmentEnum;\r\n    config?: any;\r\n}\r\n\r\nexport interface ApplicationGroupEntity {\r\n    applicationGroupId?: string;\r\n    applicationGroupName?: string;\r\n     parentId?: string;\r\n    parent?: ApplicationGroupEntity;\r\n    childs?: ApplicationGroupEntity[];\r\n    applications?: ApplicationEntity[];\r\n}\r\n\r\nexport enum ApplicationEnvironmentEnum {\r\n    Desktop = 'D', Web = 'W', Mobile = 'M'\r\n}\r\n","export class ResponseLogin {\r\n  accessToken: string;\r\n}\r\n","export interface LayerEntity {\r\n    layerId?: string;\r\n    layerName?: string;\r\n    datasetId?: string;\r\n    dataset?: DatasetEntity;\r\n    url?: string;\r\n}\r\n\r\nexport interface LayerInfo extends LayerEntity {\r\n    isView: boolean;\r\n    isCreate: boolean;\r\n    isDelete: boolean;\r\n    isUpdate: boolean;\r\n    definition?: string;\r\n}\r\n\r\nexport interface DatasetEntity {\r\n    datasetId?: string;\r\n    datasetName?: string;\r\n    layers?: LayerEntity[];\r\n}\r\nexport interface ColumnEntity {\r\n    name?: string;\r\n    alias?: string;\r\n    type?: ColumnTypeEnum;\r\n    isNullable?: boolean;\r\n    domainId?: string;\r\n    domain?: CodedDomainEntity;\r\n    layerId?: string;\r\n    layer?: LayerEntity;\r\n}\r\n\r\nexport enum ColumnTypeEnum {\r\n    string = 'esriFieldTypeString',\r\n    smallInteger = 'esriFieldTypeSmallInteger',\r\n    integer = 'esriFieldTypeInteger',\r\n    double = 'esriFieldTypeDouble',\r\n    long = 'esriFieldTypeLong',\r\n    date = 'esriFieldTypeDate',\r\n    oid = 'esriFieldTypeOID',\r\n    geometry = 'esriFieldTypeGeometry',\r\n}\r\n\r\nexport interface CodedDomainEntity {\r\n    id?: string;\r\n    name?: string;\r\n    type?: 'esriFieldTypeInteger' | 'esriFieldTypeSmallInteger' | 'esriFieldTypeString';\r\n    codedValues?: CodedValueEntity[];\r\n}\r\n\r\nexport interface CodedValueEntity {\r\n    id?: string;\r\n    code?: string;\r\n    name?: string;\r\n    domain?: CodedDomainEntity;\r\n}\r\n","import { UserEntity } from './user.interface';\r\nimport { ApplicationEntity } from './application.interface';\r\nimport { LayerEntity } from './layer.interface';\r\n\r\nexport interface LogEntity {\r\n    id?: string;\r\n    userId?: string;\r\n    user?: UserEntity;\r\n    createDate?: Date;\r\n    applicationId?: string;\r\n    application?: ApplicationEntity;\r\n    actionTypeId?: LoggerActionTypeEnum;\r\n    description?: string;\r\n    note?: string;\r\n    tableName?: string;\r\n    table?: LayerEntity;\r\n    objectId?: number;\r\n}\r\n\r\nexport enum LoggerActionTypeEnum {\r\n    INSERT = 'INSERT',\r\n    LOGIN = 'LOGIN',\r\n    LOGOUT = 'LOGOUT',\r\n    REMOVE = 'REMOVE',\r\n    UPDATE = 'UPDATE'\r\n}\r\n","import { ApplicationEntity } from './application.interface';\r\nimport { LayerEntity } from './layer.interface';\r\n\r\nexport interface UserEntity {\r\n    userId?: string;\r\n    username?: string;\r\n    password?: string;\r\n    statusId?: UserStatusEnum;\r\n    displayName?: string;\r\n    status?: UserStatusEntity;\r\n    role?: RoleEntity;\r\n    roleId?: string;\r\n}\r\n\r\nexport interface UserStatusEntity {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport enum UserStatusEnum {\r\n    Open = 'OPEN',\r\n    Locked = 'LOCKED',\r\n    Request = 'REQUEST',\r\n    Expired = 'EXPIRED'\r\n}\r\n\r\nexport interface RoleEntity {\r\n    roleId?: string;\r\n    roleName?: string;\r\n    roleParentId?: string;\r\n    roleParent?: RoleEntity;\r\n    users?: UserEntity[];\r\n    status?: RoleStatusEnum;\r\n    applications?: ApplicationEntity[];\r\n    layers?: RoleLayerEntity[];\r\n}\r\n\r\nexport enum RoleStatusEnum {\r\n    Open = 'OPEN', Lock = 'LOCK', Hide = 'HIDE'\r\n}\r\n\r\nexport interface RoleLayerEntity {\r\n    id?: string;\r\n    roleId?: string;\r\n    layerId?: string;\r\n    layer?: LayerEntity;\r\n    role?: LayerEntity;\r\n    isView?: boolean;\r\n    isCreate?: boolean;\r\n    isEdit?: boolean;\r\n    isDelete?: boolean;\r\n    definition?: string;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../../public-api';\r\n\r\n@Injectable({ providedIn: 'root', deps: [DTGAuthService] })\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        private authService: DTGAuthService,\r\n        @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n    ) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            const url = this.config && this.config.loginUrl || 'login';\r\n            if (request.url.search(url) === -1) {\r\n                if (err.status === 401) {\r\n                    // auto logout if 401 response returned from api\r\n                    this.authService.deAuthenticate();\r\n                    location.reload(true);\r\n                }\r\n            }\r\n            const error = err.error.message || err.statusText || 'Có lỗi xảy ra';\r\n            return throwError(error);\r\n        }));\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\n\r\n@Injectable({ providedIn: 'root', deps: [DTGAuthService] })\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    constructor(private authService: DTGAuthService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // add authorization header with jwt token if available\r\n        const isAuthenticate = this.authService.isAuthenticate();\r\n        if (isAuthenticate) {\r\n            const token = this.authService.getToken();\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(request);\r\n    }\r\n}\r\n","/*\r\n * Public API Surface of ditagis-auth\r\n */\r\n\r\nexport * from './lib/dtg-auth.module';\r\nexport * from './lib/ditagis-auth.service';\r\nexport * from './lib/interfaces';\r\nexport * from './lib/services';\r\nexport * from './lib/interceptors';\r\nexport * from './lib/dtg-auth.config';\r\nexport * from './lib/guards';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DTGSimpleGuard as ɵc} from './lib/guards/simple.guard';\nexport {DTGLayerInfoService as ɵb} from './lib/services/dtg-layerinfo.service';\nexport {DTGLogService as ɵa} from './lib/services/dtg-log.service';"]}