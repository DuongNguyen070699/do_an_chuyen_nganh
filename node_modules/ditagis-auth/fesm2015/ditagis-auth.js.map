{"version":3,"file":"ditagis-auth.js","sources":["../../../projects/dtg-auth/src/lib/dtg-auth.config.ts","../../../projects/dtg-auth/src/lib/ditagis-auth.service.ts","../../../projects/dtg-auth/src/lib/services/dtg-log.service.ts","../../../projects/dtg-auth/src/lib/services/dtg-layerinfo.service.ts","../../../projects/dtg-auth/src/lib/guards/simple.guard.ts","../../../projects/dtg-auth/src/lib/dtg-auth.module.ts","../../../projects/dtg-auth/src/lib/interfaces/application.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/auth.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/layer.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/log.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/user.interface.ts","../../../projects/dtg-auth/src/lib/interceptors/error.interceptor.ts","../../../projects/dtg-auth/src/lib/interceptors/jwt.interceptor.ts","../../../projects/dtg-auth/src/public-api.ts","../../../projects/dtg-auth/src/ditagis-auth.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\nexport interface DTGAuthModuleOptions {\r\n  apiUrl: string;\r\n  loginUrl?: string;\r\n  logUrl?: string;\r\n  layerInfoUrl?: string;\r\n  isAccessUrl?: string;\r\n  appInfoUrl?: string;\r\n  guard?: {\r\n    simple?: {\r\n      canActive?: (route, state) => void,\r\n      canNotActive?: (route, state) => void,\r\n      /**\r\n       * Url mặc định khi canActive = false\r\n       */\r\n      defaultNavigateUrl?: string;\r\n    }\r\n  };\r\n}\r\nexport const DTGAUTH_CONFIG = new InjectionToken<DTGAuthModuleOptions>('DTGAuthModuleOptions');\r\n\r\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ResponseLogin } from './interfaces/auth.interface';\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from './dtg-auth.config';\nimport { ApplicationEntity } from './interfaces';\nimport { Observable } from 'rxjs';\n\nconst TOKEN = 'token';\nconst USER = 'user';\n\n@Injectable({ providedIn: 'root' })\nexport class DTGAuthService {\n    constructor(\n        private http: HttpClient,\n        @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\n    ) {\n\n    }\n\n    async authenticate(params: {\n        username: string, password: string,\n        appId?: string\n    }) {\n        const { username, password, appId } = params;\n        const url = this.config.loginUrl || this.config.apiUrl + '/auth/login';\n        const result = await this.http.post<ResponseLogin>(url, {\n            username, password,\n            appId\n        }).toPromise();\n        if (result) {\n            localStorage.setItem(TOKEN, result.accessToken);\n            localStorage.setItem(USER, JSON.stringify(result));\n        }\n        return result;\n    }\n\n    isAuthenticate(): boolean {\n        return Boolean(this.getToken());\n    }\n\n    getToken() {\n        return localStorage.getItem(TOKEN);\n    }\n\n    getInfo() {\n        const user = localStorage.getItem(USER);\n        if (user) {\n            return JSON.parse(user);\n        }\n        return null;\n    }\n\n    deAuthenticate() {\n        localStorage.removeItem(TOKEN);\n        localStorage.removeItem(USER);\n    }\n\n    isAccess(params: {\n        appId: string\n    }) {\n        const { appId } = params;\n        const url = this.config.isAccessUrl ||\n            `${this.config.apiUrl}/auth/isaccess/${appId}`;\n        return this.http.get<boolean>(url, {\n            headers: {\n                Authorization: 'Bearer ' + this.getToken()\n            }\n        });\n    }\n\n    getAppInfo(params: {\n        appId: string,\n        isGuest?: boolean\n    }): Observable<ApplicationEntity> {\n        // Get a token from api server using the fetch api\n        const { appId, isGuest } = params;\n        let url = this.config.appInfoUrl || `${this.config.apiUrl}/auth/appinfo/${appId}`;\n        let headers = new HttpHeaders();\n        if (!isGuest && this.isAuthenticate()) {\n            headers = headers.append('Authorization', 'Bearer ' + this.getToken());\n\n        } else {\n            url = url + '/anonymous';\n        }\n        return this.http.get<ApplicationEntity>(url, {\n            headers\n        });\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../dtg-auth.config';\r\nimport { LogEntity } from '../interfaces';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DTGLogService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: DTGAuthService,\r\n    @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n  ) {\r\n\r\n  }\r\n\r\n  create(entity: LogEntity) {\r\n    const url = this.config.logUrl || `${this.config.apiUrl}/sys/logger`;\r\n    return this.http.post<LogEntity>(url, JSON.stringify(entity), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer ' + this.authService.getToken()\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../dtg-auth.config';\r\nimport { Observable } from 'rxjs';\r\nimport { LayerEntity, LayerInfo } from '../interfaces';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DTGLayerInfoService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: DTGAuthService,\r\n    @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n  ) { }\r\n\r\n  get(): Observable<LayerInfo[]> {\r\n    const url = this.config.layerInfoUrl ||\r\n      `${this.config.apiUrl}/auth/layerinfos`;\r\n    return this.http.get<LayerInfo[]>(url, {\r\n      headers: {\r\n        Authorization: 'Bearer ' + this.authService.getToken()\r\n      }\r\n    });\r\n  }\r\n\r\n  getGuest(): Observable<LayerEntity[]> {\r\n    const url = this.config.layerInfoUrl ||\r\n      `${this.config.apiUrl}/auth/layerinfos/anonymous`;\r\n    return this.http.get<LayerEntity[]>(url);\r\n  }\r\n\r\n}\r\n","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../dtg-auth.config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DTGSimpleGuard implements CanActivate {\r\n  constructor(\r\n    private authService: DTGAuthService,\r\n    private router: Router,\r\n    @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n  ) {\r\n\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const isAuthenticate = this.authService.isAuthenticate();\r\n    if (isAuthenticate) {\r\n      // logged in so return true\r\n      if (this.config.guard && this.config.guard.simple) {\r\n        if (this.config.guard.simple.canActive) {\r\n          this.config.guard.simple.canActive(route, state);\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    // not logged in so redirect to login page with the return url\r\n    if (this.config.guard && this.config.guard.simple) {\r\n      if (this.config.guard.simple.canNotActive) {\r\n        this.config.guard.simple.canNotActive(route, state);\r\n        return false;\r\n      }\r\n    }\r\n    this.router.navigateByUrl(\r\n      this.config.guard &&\r\n        this.config.guard.simple && this.config.guard.simple.defaultNavigateUrl ?\r\n        this.config.guard.simple.defaultNavigateUrl :\r\n        '/auth'\r\n      , { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DTGAuthModuleOptions, DTGAUTH_CONFIG } from './dtg-auth.config';\nimport { DTGAuthService } from './ditagis-auth.service';\nimport { DTGLogService } from './services/dtg-log.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DTGLayerInfoService } from './services/dtg-layerinfo.service';\nimport { DTGSimpleGuard } from './guards/simple.guard';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    HttpClientModule\n  ]\n})\nexport class DitagisAuthModule {\n  static forRoot(options: DTGAuthModuleOptions): ModuleWithProviders<DitagisAuthModule> {\n    return {\n      ngModule: DitagisAuthModule,\n      providers: [\n        { provide: DTGAUTH_CONFIG, useValue: options },\n        DTGAuthService, DTGLogService, DTGLayerInfoService, DTGSimpleGuard\n      ]\n    };\n  }\n}\n","export interface ApplicationEntity {\r\n    applicationId?: string;\r\n    applicationName?: string;\r\n    isEnabled?: boolean;\r\n    applicationGroupId?: string;\r\n    applicationGroup?: ApplicationGroupEntity;\r\n    environmentId?: ApplicationEnvironmentEnum;\r\n    config?: any;\r\n}\r\n\r\nexport interface ApplicationGroupEntity {\r\n    applicationGroupId?: string;\r\n    applicationGroupName?: string;\r\n     parentId?: string;\r\n    parent?: ApplicationGroupEntity;\r\n    childs?: ApplicationGroupEntity[];\r\n    applications?: ApplicationEntity[];\r\n}\r\n\r\nexport enum ApplicationEnvironmentEnum {\r\n    Desktop = 'D', Web = 'W', Mobile = 'M'\r\n}\r\n","export class ResponseLogin {\r\n  accessToken: string;\r\n}\r\n","export interface LayerEntity {\r\n    layerId?: string;\r\n    layerName?: string;\r\n    datasetId?: string;\r\n    dataset?: DatasetEntity;\r\n    url?: string;\r\n}\r\n\r\nexport interface LayerInfo extends LayerEntity {\r\n    isView: boolean;\r\n    isCreate: boolean;\r\n    isDelete: boolean;\r\n    isUpdate: boolean;\r\n    definition?: string;\r\n}\r\n\r\nexport interface DatasetEntity {\r\n    datasetId?: string;\r\n    datasetName?: string;\r\n    layers?: LayerEntity[];\r\n}\r\nexport interface ColumnEntity {\r\n    name?: string;\r\n    alias?: string;\r\n    type?: ColumnTypeEnum;\r\n    isNullable?: boolean;\r\n    domainId?: string;\r\n    domain?: CodedDomainEntity;\r\n    layerId?: string;\r\n    layer?: LayerEntity;\r\n}\r\n\r\nexport enum ColumnTypeEnum {\r\n    string = 'esriFieldTypeString',\r\n    smallInteger = 'esriFieldTypeSmallInteger',\r\n    integer = 'esriFieldTypeInteger',\r\n    double = 'esriFieldTypeDouble',\r\n    long = 'esriFieldTypeLong',\r\n    date = 'esriFieldTypeDate',\r\n    oid = 'esriFieldTypeOID',\r\n    geometry = 'esriFieldTypeGeometry',\r\n}\r\n\r\nexport interface CodedDomainEntity {\r\n    id?: string;\r\n    name?: string;\r\n    type?: 'esriFieldTypeInteger' | 'esriFieldTypeSmallInteger' | 'esriFieldTypeString';\r\n    codedValues?: CodedValueEntity[];\r\n}\r\n\r\nexport interface CodedValueEntity {\r\n    id?: string;\r\n    code?: string;\r\n    name?: string;\r\n    domain?: CodedDomainEntity;\r\n}\r\n","import { UserEntity } from './user.interface';\r\nimport { ApplicationEntity } from './application.interface';\r\nimport { LayerEntity } from './layer.interface';\r\n\r\nexport interface LogEntity {\r\n    id?: string;\r\n    userId?: string;\r\n    user?: UserEntity;\r\n    createDate?: Date;\r\n    applicationId?: string;\r\n    application?: ApplicationEntity;\r\n    actionTypeId?: LoggerActionTypeEnum;\r\n    description?: string;\r\n    note?: string;\r\n    tableName?: string;\r\n    table?: LayerEntity;\r\n    objectId?: number;\r\n}\r\n\r\nexport enum LoggerActionTypeEnum {\r\n    INSERT = 'INSERT',\r\n    LOGIN = 'LOGIN',\r\n    LOGOUT = 'LOGOUT',\r\n    REMOVE = 'REMOVE',\r\n    UPDATE = 'UPDATE'\r\n}\r\n","import { ApplicationEntity } from './application.interface';\r\nimport { LayerEntity } from './layer.interface';\r\n\r\nexport interface UserEntity {\r\n    userId?: string;\r\n    username?: string;\r\n    password?: string;\r\n    statusId?: UserStatusEnum;\r\n    displayName?: string;\r\n    status?: UserStatusEntity;\r\n    role?: RoleEntity;\r\n    roleId?: string;\r\n}\r\n\r\nexport interface UserStatusEntity {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport enum UserStatusEnum {\r\n    Open = 'OPEN',\r\n    Locked = 'LOCKED',\r\n    Request = 'REQUEST',\r\n    Expired = 'EXPIRED'\r\n}\r\n\r\nexport interface RoleEntity {\r\n    roleId?: string;\r\n    roleName?: string;\r\n    roleParentId?: string;\r\n    roleParent?: RoleEntity;\r\n    users?: UserEntity[];\r\n    status?: RoleStatusEnum;\r\n    applications?: ApplicationEntity[];\r\n    layers?: RoleLayerEntity[];\r\n}\r\n\r\nexport enum RoleStatusEnum {\r\n    Open = 'OPEN', Lock = 'LOCK', Hide = 'HIDE'\r\n}\r\n\r\nexport interface RoleLayerEntity {\r\n    id?: string;\r\n    roleId?: string;\r\n    layerId?: string;\r\n    layer?: LayerEntity;\r\n    role?: LayerEntity;\r\n    isView?: boolean;\r\n    isCreate?: boolean;\r\n    isEdit?: boolean;\r\n    isDelete?: boolean;\r\n    definition?: string;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../../public-api';\r\n\r\n@Injectable({ providedIn: 'root', deps: [DTGAuthService] })\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        private authService: DTGAuthService,\r\n        @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n    ) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            const url = this.config && this.config.loginUrl || 'login';\r\n            if (request.url.search(url) === -1) {\r\n                if (err.status === 401) {\r\n                    // auto logout if 401 response returned from api\r\n                    this.authService.deAuthenticate();\r\n                    location.reload(true);\r\n                }\r\n            }\r\n            const error = err.error.message || err.statusText || 'Có lỗi xảy ra';\r\n            return throwError(error);\r\n        }));\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\n\r\n@Injectable({ providedIn: 'root', deps: [DTGAuthService] })\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    constructor(private authService: DTGAuthService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // add authorization header with jwt token if available\r\n        const isAuthenticate = this.authService.isAuthenticate();\r\n        if (isAuthenticate) {\r\n            const token = this.authService.getToken();\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(request);\r\n    }\r\n}\r\n","/*\r\n * Public API Surface of ditagis-auth\r\n */\r\n\r\nexport * from './lib/dtg-auth.module';\r\nexport * from './lib/ditagis-auth.service';\r\nexport * from './lib/interfaces';\r\nexport * from './lib/services';\r\nexport * from './lib/interceptors';\r\nexport * from './lib/dtg-auth.config';\r\nexport * from './lib/guards';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DTGSimpleGuard as ɵc} from './lib/guards/simple.guard';\nexport {DTGLayerInfoService as ɵb} from './lib/services/dtg-layerinfo.service';\nexport {DTGLogService as ɵa} from './lib/services/dtg-log.service';"],"names":[],"mappings":"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"}