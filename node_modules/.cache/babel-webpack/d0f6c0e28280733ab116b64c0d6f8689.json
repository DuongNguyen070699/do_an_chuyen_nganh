{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nvar EASE_ACCELERATION = 1.005;\n\nvar TreeAnimateOpenDirective =\n/** @class */\nfunction () {\n  function TreeAnimateOpenDirective(renderer, templateRef, viewContainerRef) {\n    this.renderer = renderer;\n    this.templateRef = templateRef;\n    this.viewContainerRef = viewContainerRef;\n  }\n\n  Object.defineProperty(TreeAnimateOpenDirective.prototype, \"isOpen\", {\n    set: function set(value) {\n      if (value) {\n        this._show();\n\n        if (this.isEnabled && this._isOpen === false) {\n          this._animateOpen();\n        }\n      } else {\n        this.isEnabled ? this._animateClose() : this._hide();\n      }\n\n      this._isOpen = !!value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n\n  TreeAnimateOpenDirective.prototype._show = function () {\n    if (this.innerElement) return; // create child view\n\n    this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\n  };\n\n  TreeAnimateOpenDirective.prototype._hide = function () {\n    this.viewContainerRef.clear();\n    this.innerElement = null;\n  };\n\n  TreeAnimateOpenDirective.prototype._animateOpen = function () {\n    var _this = this;\n\n    var delta = this.animateSpeed;\n    var ease = this.animateAcceleration;\n    var maxHeight = 0; // set height to 0\n\n    this.renderer.setStyle(this.innerElement, 'max-height', \"0\"); // increase maxHeight until height doesn't change\n\n    setTimeout(function () {\n      var i = setInterval(function () {\n        if (!_this._isOpen || !_this.innerElement) return clearInterval(i);\n        maxHeight += delta;\n        var roundedMaxHeight = Math.round(maxHeight);\n\n        _this.renderer.setStyle(_this.innerElement, 'max-height', roundedMaxHeight + \"px\");\n\n        var height = _this.innerElement.getBoundingClientRect ? _this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\n\n        delta *= ease;\n        ease *= EASE_ACCELERATION;\n\n        if (height < roundedMaxHeight) {\n          // Make maxHeight auto because animation finished and container might change height later on\n          _this.renderer.setStyle(_this.innerElement, 'max-height', null);\n\n          clearInterval(i);\n        }\n      }, 17);\n    });\n  };\n\n  TreeAnimateOpenDirective.prototype._animateClose = function () {\n    var _this = this;\n\n    if (!this.innerElement) return;\n    var delta = this.animateSpeed;\n    var ease = this.animateAcceleration;\n    var height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\n    // slowly decrease maxHeight to 0, starting from current height\n\n    var i = setInterval(function () {\n      if (_this._isOpen || !_this.innerElement) return clearInterval(i);\n      height -= delta;\n\n      _this.renderer.setStyle(_this.innerElement, 'max-height', height + \"px\");\n\n      delta *= ease;\n      ease *= EASE_ACCELERATION;\n\n      if (height <= 0) {\n        // after animation complete - remove child element\n        _this.viewContainerRef.clear();\n\n        _this.innerElement = null;\n        clearInterval(i);\n      }\n    }, 17);\n  };\n\n  __decorate([Input('treeAnimateOpenSpeed'), __metadata(\"design:type\", Number)], TreeAnimateOpenDirective.prototype, \"animateSpeed\", void 0);\n\n  __decorate([Input('treeAnimateOpenAcceleration'), __metadata(\"design:type\", Number)], TreeAnimateOpenDirective.prototype, \"animateAcceleration\", void 0);\n\n  __decorate([Input('treeAnimateOpenEnabled'), __metadata(\"design:type\", Boolean)], TreeAnimateOpenDirective.prototype, \"isEnabled\", void 0);\n\n  __decorate([Input('treeAnimateOpen'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], TreeAnimateOpenDirective.prototype, \"isOpen\", null);\n\n  TreeAnimateOpenDirective = __decorate([__metadata(\"design:paramtypes\", [Renderer2, TemplateRef, ViewContainerRef])], TreeAnimateOpenDirective);\n\n  TreeAnimateOpenDirective.ɵfac = function TreeAnimateOpenDirective_Factory(t) {\n    return new (t || TreeAnimateOpenDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  TreeAnimateOpenDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: TreeAnimateOpenDirective,\n    selectors: [[\"\", \"treeAnimateOpen\", \"\"]],\n    inputs: {\n      isOpen: [\"treeAnimateOpen\", \"isOpen\"],\n      animateSpeed: [\"treeAnimateOpenSpeed\", \"animateSpeed\"],\n      animateAcceleration: [\"treeAnimateOpenAcceleration\", \"animateAcceleration\"],\n      isEnabled: [\"treeAnimateOpenEnabled\", \"isEnabled\"]\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TreeAnimateOpenDirective, [{\n      type: Directive,\n      args: [{\n        selector: '[treeAnimateOpen]'\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.Renderer2\n      }, {\n        type: ɵngcc0.TemplateRef\n      }, {\n        type: ɵngcc0.ViewContainerRef\n      }];\n    }, {\n      isOpen: [{\n        type: Input,\n        args: ['treeAnimateOpen']\n      }],\n      animateSpeed: [{\n        type: Input,\n        args: ['treeAnimateOpenSpeed']\n      }],\n      animateAcceleration: [{\n        type: Input,\n        args: ['treeAnimateOpenAcceleration']\n      }],\n      isEnabled: [{\n        type: Input,\n        args: ['treeAnimateOpenEnabled']\n      }]\n    });\n  })();\n\n  return TreeAnimateOpenDirective;\n}();\n\nexport { TreeAnimateOpenDirective };","map":{"version":3,"sources":["../../lib/directives/tree-animate-open.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\n\nconst EASE_ACCELERATION = 1.005;\n\n@Directive({\n  selector: '[treeAnimateOpen]'\n})\nexport class TreeAnimateOpenDirective {\n  private _isOpen: boolean;\n\n  @Input('treeAnimateOpenSpeed') animateSpeed: number;\n  @Input('treeAnimateOpenAcceleration') animateAcceleration: number;\n  @Input('treeAnimateOpenEnabled') isEnabled: boolean;\n\n  @Input('treeAnimateOpen')\n  set isOpen(value: boolean) {\n    if (value) {\n      this._show();\n      if (this.isEnabled && this._isOpen === false) {\n        this._animateOpen();\n      }\n    } else {\n      this.isEnabled ? this._animateClose() : this._hide();\n    }\n    this._isOpen = !!value;\n  };\n\n  private innerElement: any;\n\n  constructor(\n    private renderer: Renderer2,\n    private templateRef: TemplateRef<any>,\n    private viewContainerRef: ViewContainerRef) {\n  }\n\n  private _show() {\n    if (this.innerElement) return;\n\n    // create child view\n    this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\n  }\n\n  private _hide() {\n    this.viewContainerRef.clear();\n    this.innerElement = null;\n  }\n\n  private _animateOpen() {\n    let delta = this.animateSpeed;\n    let ease = this.animateAcceleration;\n    let maxHeight = 0;\n\n    // set height to 0\n    this.renderer.setStyle(this.innerElement, 'max-height', `0`);\n\n    // increase maxHeight until height doesn't change\n    setTimeout(() => { // Allow inner element to create its content\n      const i = setInterval(() => {\n        if (!this._isOpen || !this.innerElement) return clearInterval(i);\n\n        maxHeight += delta;\n        const roundedMaxHeight = Math.round(maxHeight);\n\n        this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\n        const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\n\n        delta *= ease;\n        ease *= EASE_ACCELERATION;\n        if (height < roundedMaxHeight) {\n          // Make maxHeight auto because animation finished and container might change height later on\n          this.renderer.setStyle(this.innerElement, 'max-height', null);\n          clearInterval(i);\n        }\n      }, 17);\n    });\n  }\n\n  private _animateClose() {\n    if (!this.innerElement) return;\n\n    let delta = this.animateSpeed;\n    let ease = this.animateAcceleration;\n    let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\n\n    // slowly decrease maxHeight to 0, starting from current height\n    const i = setInterval(() => {\n      if (this._isOpen || !this.innerElement) return clearInterval(i);\n\n      height -= delta;\n      this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\n      delta *= ease;\n      ease *= EASE_ACCELERATION;\n\n      if (height <= 0) {\n        // after animation complete - remove child element\n        this.viewContainerRef.clear();\n        this.innerElement = null;\n        clearInterval(i);\n      }\n    }, 17);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}