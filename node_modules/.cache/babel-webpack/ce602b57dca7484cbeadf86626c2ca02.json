{"ast":null,"code":"import * as Éµngcc0 from '@angular/core';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Injectable } from '@angular/core';\nimport { observable, computed, action, autorun } from 'mobx';\nimport { TreeNode } from './tree-node.model';\nimport { TreeOptions } from './tree-options.model';\nimport { TREE_EVENTS } from '../constants/events';\nimport first from 'lodash/first';\nimport last from 'lodash/last';\nimport compact from 'lodash/compact';\nimport find from 'lodash/find';\nimport isString from 'lodash/isString';\nimport isFunction from 'lodash/isFunction';\n\nvar TreeModel =\n/** @class */\nfunction () {\n  function TreeModel() {\n    this.options = new TreeOptions();\n    this.eventNames = Object.keys(TREE_EVENTS);\n    this.expandedNodeIds = {};\n    this.selectedLeafNodeIds = {};\n    this.activeNodeIds = {};\n    this.hiddenNodeIds = {};\n    this.focusedNodeId = null;\n    this.firstUpdate = true;\n    this.subscriptions = [];\n  }\n\n  TreeModel_1 = TreeModel; // events\n\n  TreeModel.prototype.fireEvent = function (event) {\n    event.treeModel = this;\n    this.events[event.eventName].emit(event);\n    this.events.event.emit(event);\n  };\n\n  TreeModel.prototype.subscribe = function (eventName, fn) {\n    var subscription = this.events[eventName].subscribe(fn);\n    this.subscriptions.push(subscription);\n  }; // getters\n\n\n  TreeModel.prototype.getFocusedNode = function () {\n    return this.focusedNode;\n  };\n\n  TreeModel.prototype.getActiveNode = function () {\n    return this.activeNodes[0];\n  };\n\n  TreeModel.prototype.getActiveNodes = function () {\n    return this.activeNodes;\n  };\n\n  TreeModel.prototype.getVisibleRoots = function () {\n    return this.virtualRoot.visibleChildren;\n  };\n\n  TreeModel.prototype.getFirstRoot = function (skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    return first(skipHidden ? this.getVisibleRoots() : this.roots);\n  };\n\n  TreeModel.prototype.getLastRoot = function (skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    return last(skipHidden ? this.getVisibleRoots() : this.roots);\n  };\n\n  Object.defineProperty(TreeModel.prototype, \"isFocused\", {\n    get: function get() {\n      return TreeModel_1.focusedTree === this;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeModel.prototype.isNodeFocused = function (node) {\n    return this.focusedNode === node;\n  };\n\n  TreeModel.prototype.isEmptyTree = function () {\n    return this.roots && this.roots.length === 0;\n  };\n\n  Object.defineProperty(TreeModel.prototype, \"focusedNode\", {\n    get: function get() {\n      return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeModel.prototype, \"expandedNodes\", {\n    get: function get() {\n      var _this = this;\n\n      var nodes = Object.keys(this.expandedNodeIds).filter(function (id) {\n        return _this.expandedNodeIds[id];\n      }).map(function (id) {\n        return _this.getNodeById(id);\n      });\n      return compact(nodes);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeModel.prototype, \"activeNodes\", {\n    get: function get() {\n      var _this = this;\n\n      var nodes = Object.keys(this.activeNodeIds).filter(function (id) {\n        return _this.activeNodeIds[id];\n      }).map(function (id) {\n        return _this.getNodeById(id);\n      });\n      return compact(nodes);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeModel.prototype, \"hiddenNodes\", {\n    get: function get() {\n      var _this = this;\n\n      var nodes = Object.keys(this.hiddenNodeIds).filter(function (id) {\n        return _this.hiddenNodeIds[id];\n      }).map(function (id) {\n        return _this.getNodeById(id);\n      });\n      return compact(nodes);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeModel.prototype, \"selectedLeafNodes\", {\n    get: function get() {\n      var _this = this;\n\n      var nodes = Object.keys(this.selectedLeafNodeIds).filter(function (id) {\n        return _this.selectedLeafNodeIds[id];\n      }).map(function (id) {\n        return _this.getNodeById(id);\n      });\n      return compact(nodes);\n    },\n    enumerable: true,\n    configurable: true\n  }); // locating nodes\n\n  TreeModel.prototype.getNodeByPath = function (path, startNode) {\n    if (startNode === void 0) {\n      startNode = null;\n    }\n\n    if (!path) return null;\n    startNode = startNode || this.virtualRoot;\n    if (path.length === 0) return startNode;\n    if (!startNode.children) return null;\n    var childId = path.shift();\n    var childNode = find(startNode.children, {\n      id: childId\n    });\n    if (!childNode) return null;\n    return this.getNodeByPath(path, childNode);\n  };\n\n  TreeModel.prototype.getNodeById = function (id) {\n    var idStr = id.toString();\n    return this.getNodeBy(function (node) {\n      return node.id.toString() === idStr;\n    });\n  };\n\n  TreeModel.prototype.getNodeBy = function (predicate, startNode) {\n    if (startNode === void 0) {\n      startNode = null;\n    }\n\n    startNode = startNode || this.virtualRoot;\n    if (!startNode.children) return null;\n    var found = find(startNode.children, predicate);\n\n    if (found) {\n      // found in children\n      return found;\n    } else {\n      // look in children's children\n      for (var _i = 0, _a = startNode.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        var foundInChildren = this.getNodeBy(predicate, child);\n        if (foundInChildren) return foundInChildren;\n      }\n    }\n  };\n\n  TreeModel.prototype.isExpanded = function (node) {\n    return this.expandedNodeIds[node.id];\n  };\n\n  TreeModel.prototype.isHidden = function (node) {\n    return this.hiddenNodeIds[node.id];\n  };\n\n  TreeModel.prototype.isActive = function (node) {\n    return this.activeNodeIds[node.id];\n  };\n\n  TreeModel.prototype.isSelected = function (node) {\n    return this.selectedLeafNodeIds[node.id];\n  };\n\n  TreeModel.prototype.ngOnDestroy = function () {\n    this.dispose();\n    this.unsubscribeAll();\n  };\n\n  TreeModel.prototype.dispose = function () {\n    // Dispose reactions of the replaced nodes\n    if (this.virtualRoot) {\n      this.virtualRoot.dispose();\n    }\n  };\n\n  TreeModel.prototype.unsubscribeAll = function () {\n    this.subscriptions.forEach(function (subscription) {\n      return subscription.unsubscribe();\n    });\n    this.subscriptions = [];\n  }; // actions\n\n\n  TreeModel.prototype.setData = function (_a) {\n    var nodes = _a.nodes,\n        _b = _a.options,\n        options = _b === void 0 ? null : _b,\n        _c = _a.events,\n        events = _c === void 0 ? null : _c;\n\n    if (options) {\n      this.options = new TreeOptions(options);\n    }\n\n    if (events) {\n      this.events = events;\n    }\n\n    if (nodes) {\n      this.nodes = nodes;\n    }\n\n    this.update();\n  };\n\n  TreeModel.prototype.update = function () {\n    var _a; // Rebuild tree:\n\n\n    var virtualRootConfig = (_a = {\n      id: this.options.rootId,\n      virtual: true\n    }, _a[this.options.childrenField] = this.nodes, _a);\n    this.dispose();\n    this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\n    this.roots = this.virtualRoot.children; // Fire event:\n\n    if (this.firstUpdate) {\n      if (this.roots) {\n        this.firstUpdate = false;\n\n        this._calculateExpandedNodes();\n      }\n    } else {\n      this.fireEvent({\n        eventName: TREE_EVENTS.updateData\n      });\n    }\n  };\n\n  TreeModel.prototype.setFocusedNode = function (node) {\n    this.focusedNodeId = node ? node.id : null;\n  };\n\n  TreeModel.prototype.setFocus = function (value) {\n    TreeModel_1.focusedTree = value ? this : null;\n  };\n\n  TreeModel.prototype.doForAll = function (fn) {\n    this.roots.forEach(function (root) {\n      return root.doForAll(fn);\n    });\n  };\n\n  TreeModel.prototype.focusNextNode = function () {\n    var previousNode = this.getFocusedNode();\n    var nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\n    if (nextNode) nextNode.focus();\n  };\n\n  TreeModel.prototype.focusPreviousNode = function () {\n    var previousNode = this.getFocusedNode();\n    var nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\n    if (nextNode) nextNode.focus();\n  };\n\n  TreeModel.prototype.focusDrillDown = function () {\n    var previousNode = this.getFocusedNode();\n\n    if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\n      previousNode.toggleExpanded();\n    } else {\n      var nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\n      if (nextNode) nextNode.focus();\n    }\n  };\n\n  TreeModel.prototype.focusDrillUp = function () {\n    var previousNode = this.getFocusedNode();\n    if (!previousNode) return;\n\n    if (previousNode.isExpanded) {\n      previousNode.toggleExpanded();\n    } else {\n      var nextNode = previousNode.realParent;\n      if (nextNode) nextNode.focus();\n    }\n  };\n\n  TreeModel.prototype.setActiveNode = function (node, value, multi) {\n    if (multi === void 0) {\n      multi = false;\n    }\n\n    if (multi) {\n      this._setActiveNodeMulti(node, value);\n    } else {\n      this._setActiveNodeSingle(node, value);\n    }\n\n    if (value) {\n      node.focus(this.options.scrollOnActivate);\n      this.fireEvent({\n        eventName: TREE_EVENTS.activate,\n        node: node\n      });\n      this.fireEvent({\n        eventName: TREE_EVENTS.nodeActivate,\n        node: node\n      }); // For IE11\n    } else {\n      this.fireEvent({\n        eventName: TREE_EVENTS.deactivate,\n        node: node\n      });\n      this.fireEvent({\n        eventName: TREE_EVENTS.nodeDeactivate,\n        node: node\n      }); // For IE11\n    }\n  };\n\n  TreeModel.prototype.setSelectedNode = function (node, value) {\n    var _a;\n\n    this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, (_a = {}, _a[node.id] = value, _a));\n\n    if (value) {\n      node.focus();\n      this.fireEvent({\n        eventName: TREE_EVENTS.select,\n        node: node\n      });\n    } else {\n      this.fireEvent({\n        eventName: TREE_EVENTS.deselect,\n        node: node\n      });\n    }\n  };\n\n  TreeModel.prototype.setExpandedNode = function (node, value) {\n    var _a;\n\n    this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, (_a = {}, _a[node.id] = value, _a));\n    this.fireEvent({\n      eventName: TREE_EVENTS.toggleExpanded,\n      node: node,\n      isExpanded: value\n    });\n  };\n\n  TreeModel.prototype.expandAll = function () {\n    this.roots.forEach(function (root) {\n      return root.expandAll();\n    });\n  };\n\n  TreeModel.prototype.collapseAll = function () {\n    this.roots.forEach(function (root) {\n      return root.collapseAll();\n    });\n  };\n\n  TreeModel.prototype.setIsHidden = function (node, value) {\n    var _a;\n\n    this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, (_a = {}, _a[node.id] = value, _a));\n  };\n\n  TreeModel.prototype.setHiddenNodeIds = function (nodeIds) {\n    this.hiddenNodeIds = nodeIds.reduce(function (hiddenNodeIds, id) {\n      var _a;\n\n      return Object.assign(hiddenNodeIds, (_a = {}, _a[id] = true, _a));\n    }, {});\n  };\n\n  TreeModel.prototype.performKeyAction = function (node, $event) {\n    var action = this.options.actionMapping.keys[$event.keyCode];\n\n    if (action) {\n      $event.preventDefault();\n      action(this, node, $event);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  TreeModel.prototype.filterNodes = function (filter, autoShow) {\n    var _this = this;\n\n    if (autoShow === void 0) {\n      autoShow = true;\n    }\n\n    var filterFn;\n\n    if (!filter) {\n      return this.clearFilter();\n    } // support function and string filter\n\n\n    if (isString(filter)) {\n      filterFn = function filterFn(node) {\n        return node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\n      };\n    } else if (isFunction(filter)) {\n      filterFn = filter;\n    } else {\n      console.error('Don\\'t know what to do with filter', filter);\n      console.error('Should be either a string or function');\n      return;\n    }\n\n    var ids = {};\n    this.roots.forEach(function (node) {\n      return _this._filterNode(ids, node, filterFn, autoShow);\n    });\n    this.hiddenNodeIds = ids;\n    this.fireEvent({\n      eventName: TREE_EVENTS.changeFilter\n    });\n  };\n\n  TreeModel.prototype.clearFilter = function () {\n    this.hiddenNodeIds = {};\n    this.fireEvent({\n      eventName: TREE_EVENTS.changeFilter\n    });\n  };\n\n  TreeModel.prototype.moveNode = function (node, to) {\n    var fromIndex = node.getIndexInParent();\n    var fromParent = node.parent;\n    if (!this.canMoveNode(node, to, fromIndex)) return;\n    var fromChildren = fromParent.getField('children'); // If node doesn't have children - create children array\n\n    if (!to.parent.getField('children')) {\n      to.parent.setField('children', []);\n    }\n\n    var toChildren = to.parent.getField('children');\n    var originalNode = fromChildren.splice(fromIndex, 1)[0]; // Compensate for index if already removed from parent:\n\n    var toIndex = fromParent === to.parent && to.index > fromIndex ? to.index - 1 : to.index;\n    toChildren.splice(toIndex, 0, originalNode);\n    fromParent.treeModel.update();\n\n    if (to.parent.treeModel !== fromParent.treeModel) {\n      to.parent.treeModel.update();\n    }\n\n    this.fireEvent({\n      eventName: TREE_EVENTS.moveNode,\n      node: originalNode,\n      to: {\n        parent: to.parent.data,\n        index: toIndex\n      },\n      from: {\n        parent: fromParent.data,\n        index: fromIndex\n      }\n    });\n  };\n\n  TreeModel.prototype.copyNode = function (node, to) {\n    var fromIndex = node.getIndexInParent();\n    if (!this.canMoveNode(node, to, fromIndex)) return; // If node doesn't have children - create children array\n\n    if (!to.parent.getField('children')) {\n      to.parent.setField('children', []);\n    }\n\n    var toChildren = to.parent.getField('children');\n    var nodeCopy = this.options.getNodeClone(node);\n    toChildren.splice(to.index, 0, nodeCopy);\n    node.treeModel.update();\n\n    if (to.parent.treeModel !== node.treeModel) {\n      to.parent.treeModel.update();\n    }\n\n    this.fireEvent({\n      eventName: TREE_EVENTS.copyNode,\n      node: nodeCopy,\n      to: {\n        parent: to.parent.data,\n        index: to.index\n      }\n    });\n  };\n\n  TreeModel.prototype.getState = function () {\n    return {\n      expandedNodeIds: this.expandedNodeIds,\n      selectedLeafNodeIds: this.selectedLeafNodeIds,\n      activeNodeIds: this.activeNodeIds,\n      hiddenNodeIds: this.hiddenNodeIds,\n      focusedNodeId: this.focusedNodeId\n    };\n  };\n\n  TreeModel.prototype.setState = function (state) {\n    if (!state) return;\n    Object.assign(this, {\n      expandedNodeIds: state.expandedNodeIds || {},\n      selectedLeafNodeIds: state.selectedLeafNodeIds || {},\n      activeNodeIds: state.activeNodeIds || {},\n      hiddenNodeIds: state.hiddenNodeIds || {},\n      focusedNodeId: state.focusedNodeId\n    });\n  };\n\n  TreeModel.prototype.subscribeToState = function (fn) {\n    var _this = this;\n\n    autorun(function () {\n      return fn(_this.getState());\n    });\n  };\n\n  TreeModel.prototype.canMoveNode = function (node, to, fromIndex) {\n    if (fromIndex === void 0) {\n      fromIndex = undefined;\n    }\n\n    var fromNodeIndex = fromIndex || node.getIndexInParent(); // same node:\n\n    if (node.parent === to.parent && fromIndex === to.index) {\n      return false;\n    }\n\n    return !to.parent.isDescendantOf(node);\n  };\n\n  TreeModel.prototype.calculateExpandedNodes = function () {\n    this._calculateExpandedNodes();\n  }; // private methods\n\n\n  TreeModel.prototype._filterNode = function (ids, node, filterFn, autoShow) {\n    var _this = this; // if node passes function then it's visible\n\n\n    var isVisible = filterFn(node);\n\n    if (node.children) {\n      // if one of node's children passes filter then this node is also visible\n      node.children.forEach(function (child) {\n        if (_this._filterNode(ids, child, filterFn, autoShow)) {\n          isVisible = true;\n        }\n      });\n    } // mark node as hidden\n\n\n    if (!isVisible) {\n      ids[node.id] = true;\n    } // auto expand parents to make sure the filtered nodes are visible\n\n\n    if (autoShow && isVisible) {\n      node.ensureVisible();\n    }\n\n    return isVisible;\n  };\n\n  TreeModel.prototype._calculateExpandedNodes = function (startNode) {\n    var _a;\n\n    var _this = this;\n\n    if (startNode === void 0) {\n      startNode = null;\n    }\n\n    startNode = startNode || this.virtualRoot;\n\n    if (startNode.data[this.options.isExpandedField]) {\n      this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, (_a = {}, _a[startNode.id] = true, _a));\n    }\n\n    if (startNode.children) {\n      startNode.children.forEach(function (child) {\n        return _this._calculateExpandedNodes(child);\n      });\n    }\n  };\n\n  TreeModel.prototype._setActiveNodeSingle = function (node, value) {\n    var _a;\n\n    var _this = this; // Deactivate all other nodes:\n\n\n    this.activeNodes.filter(function (activeNode) {\n      return activeNode !== node;\n    }).forEach(function (activeNode) {\n      _this.fireEvent({\n        eventName: TREE_EVENTS.deactivate,\n        node: activeNode\n      });\n\n      _this.fireEvent({\n        eventName: TREE_EVENTS.nodeDeactivate,\n        node: activeNode\n      }); // For IE11\n\n    });\n\n    if (value) {\n      this.activeNodeIds = (_a = {}, _a[node.id] = true, _a);\n    } else {\n      this.activeNodeIds = {};\n    }\n  };\n\n  TreeModel.prototype._setActiveNodeMulti = function (node, value) {\n    var _a;\n\n    this.activeNodeIds = Object.assign({}, this.activeNodeIds, (_a = {}, _a[node.id] = value, _a));\n  };\n\n  var TreeModel_1;\n  TreeModel.focusedTree = null;\n\n  __decorate([observable, __metadata(\"design:type\", Array)], TreeModel.prototype, \"roots\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", Object)], TreeModel.prototype, \"expandedNodeIds\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", Object)], TreeModel.prototype, \"selectedLeafNodeIds\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", Object)], TreeModel.prototype, \"activeNodeIds\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", Object)], TreeModel.prototype, \"hiddenNodeIds\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", Object)], TreeModel.prototype, \"focusedNodeId\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", TreeNode)], TreeModel.prototype, \"virtualRoot\", void 0);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeModel.prototype, \"focusedNode\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeModel.prototype, \"expandedNodes\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeModel.prototype, \"activeNodes\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeModel.prototype, \"hiddenNodes\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeModel.prototype, \"selectedLeafNodes\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"setData\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"update\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"setFocusedNode\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"setFocus\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"doForAll\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"focusNextNode\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"focusPreviousNode\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"focusDrillDown\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"focusDrillUp\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object, Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"setActiveNode\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"setSelectedNode\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"setExpandedNode\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"expandAll\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"collapseAll\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"setIsHidden\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"setHiddenNodeIds\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"filterNodes\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"clearFilter\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"moveNode\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"copyNode\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeModel.prototype, \"setState\", null);\n\n  TreeModel.Éµfac = function TreeModel_Factory(t) {\n    return new (t || TreeModel)();\n  };\n\n  TreeModel.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n    token: TreeModel,\n    factory: function factory(t) {\n      return TreeModel.Éµfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    Éµngcc0.ÉµsetClassMetadata(TreeModel, [{\n      type: Injectable\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  return TreeModel;\n}();\n\nexport { TreeModel };","map":{"version":3,"sources":["../../lib/models/tree.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter, OnDestroy } from '@angular/core';\nimport { observable, computed, action, autorun } from 'mobx';\nimport { Subscription } from 'rxjs';\nimport { TreeNode } from './tree-node.model';\nimport { TreeOptions } from './tree-options.model';\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\nimport { TREE_EVENTS } from '../constants/events';\n\nimport first from 'lodash/first';\nimport last from 'lodash/last';\nimport compact from 'lodash/compact';\nimport find from 'lodash/find';\nimport isString from 'lodash/isString';\nimport isFunction from 'lodash/isFunction';\n\n@Injectable()\nexport class TreeModel implements ITreeModel, OnDestroy {\n  static focusedTree = null;\n\n  options: TreeOptions = new TreeOptions();\n  nodes: any[];\n  eventNames = Object.keys(TREE_EVENTS);\n  virtualScroll: TreeVirtualScroll;\n\n  @observable roots: TreeNode[];\n  @observable expandedNodeIds: IDTypeDictionary = {};\n  @observable selectedLeafNodeIds: IDTypeDictionary = {};\n  @observable activeNodeIds: IDTypeDictionary = {};\n  @observable hiddenNodeIds: IDTypeDictionary = {};\n  @observable focusedNodeId: IDType = null;\n  @observable virtualRoot: TreeNode;\n\n  private firstUpdate = true;\n  private events: any;\n  private subscriptions: Subscription[] = [];\n\n  // events\n  fireEvent(event) {\n    event.treeModel = this;\n    this.events[event.eventName].emit(event);\n    this.events.event.emit(event);\n  }\n\n  subscribe(eventName, fn) {\n    const subscription = this.events[eventName].subscribe(fn);\n    this.subscriptions.push(subscription);\n  }\n\n\n  // getters\n  getFocusedNode(): TreeNode {\n    return this.focusedNode;\n  }\n\n\n  getActiveNode(): TreeNode {\n    return this.activeNodes[0];\n  }\n\n  getActiveNodes(): TreeNode[] {\n    return this.activeNodes;\n  }\n\n  getVisibleRoots() {\n    return this.virtualRoot.visibleChildren;\n  }\n\n  getFirstRoot(skipHidden = false) {\n    return first(skipHidden ? this.getVisibleRoots() : this.roots);\n  }\n\n  getLastRoot(skipHidden = false) {\n    return last(skipHidden ? this.getVisibleRoots() : this.roots);\n  }\n\n  get isFocused() {\n    return TreeModel.focusedTree === this;\n  }\n\n  isNodeFocused(node) {\n    return this.focusedNode === node;\n  }\n\n  isEmptyTree(): boolean {\n    return this.roots && this.roots.length === 0;\n  }\n\n  @computed get focusedNode() {\n    return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\n  }\n\n  @computed get expandedNodes() {\n    const nodes = Object.keys(this.expandedNodeIds)\n      .filter((id) => this.expandedNodeIds[id])\n      .map((id) => this.getNodeById(id));\n\n    return compact(nodes);\n  }\n\n  @computed get activeNodes() {\n    const nodes = Object.keys(this.activeNodeIds)\n      .filter((id) => this.activeNodeIds[id])\n      .map((id) => this.getNodeById(id));\n\n    return compact(nodes);\n  }\n\n  @computed get hiddenNodes() {\n    const nodes = Object.keys(this.hiddenNodeIds)\n        .filter((id) => this.hiddenNodeIds[id])\n        .map((id) => this.getNodeById(id));\n\n    return compact(nodes);\n  }\n\n  @computed get selectedLeafNodes() {\n    const nodes = Object.keys(this.selectedLeafNodeIds)\n        .filter((id) => this.selectedLeafNodeIds[id])\n        .map((id) => this.getNodeById(id));\n\n    return compact(nodes);\n  }\n\n  // locating nodes\n  getNodeByPath(path: any[], startNode= null): TreeNode {\n    if (!path) return null;\n\n    startNode = startNode || this.virtualRoot;\n    if (path.length === 0) return startNode;\n\n    if (!startNode.children) return null;\n\n    const childId = path.shift();\n    const childNode = find(startNode.children, { id: childId });\n\n    if (!childNode) return null;\n\n    return this.getNodeByPath(path, childNode);\n  }\n\n  getNodeById(id) {\n    const idStr = id.toString();\n\n    return this.getNodeBy((node) => node.id.toString() === idStr);\n  }\n\n  getNodeBy(predicate, startNode = null) {\n    startNode = startNode || this.virtualRoot;\n\n    if (!startNode.children) return null;\n\n    const found = find(startNode.children, predicate);\n\n    if (found) { // found in children\n      return found;\n    } else { // look in children's children\n      for (let child of startNode.children) {\n        const foundInChildren = this.getNodeBy(predicate, child);\n        if (foundInChildren) return foundInChildren;\n      }\n    }\n  }\n\n  isExpanded(node) {\n    return this.expandedNodeIds[node.id];\n  }\n\n  isHidden(node) {\n    return this.hiddenNodeIds[node.id];\n  }\n\n  isActive(node) {\n    return this.activeNodeIds[node.id];\n  }\n\n  isSelected(node) {\n    return this.selectedLeafNodeIds[node.id];\n  }\n\n  ngOnDestroy() {\n    this.dispose();\n    this.unsubscribeAll();\n  }\n\n  dispose() {\n    // Dispose reactions of the replaced nodes\n    if (this.virtualRoot) {\n      this.virtualRoot.dispose();\n    }\n  }\n\n  unsubscribeAll() {\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    this.subscriptions = [];\n  }\n\n  // actions\n  @action setData({ nodes, options = null, events = null }: {nodes: any, options: any, events: any}) {\n    if (options) {\n      this.options = new TreeOptions(options);\n    }\n    if (events) {\n      this.events = events;\n    }\n    if (nodes) {\n      this.nodes = nodes;\n    }\n\n    this.update();\n  }\n\n  @action update() {\n    // Rebuild tree:\n    let virtualRootConfig = {\n      id: this.options.rootId,\n      virtual: true,\n      [this.options.childrenField]: this.nodes\n    };\n\n    this.dispose();\n\n    this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\n\n    this.roots = this.virtualRoot.children;\n\n    // Fire event:\n    if (this.firstUpdate) {\n      if (this.roots) {\n        this.firstUpdate = false;\n        this._calculateExpandedNodes();\n      }\n    } else {\n      this.fireEvent({ eventName: TREE_EVENTS.updateData });\n    }\n  }\n\n\n  @action setFocusedNode(node) {\n    this.focusedNodeId = node ? node.id : null;\n  }\n\n  @action setFocus(value) {\n    TreeModel.focusedTree = value ? this : null;\n  }\n\n  @action doForAll(fn) {\n    this.roots.forEach((root) => root.doForAll(fn));\n  }\n\n  @action focusNextNode() {\n    let previousNode = this.getFocusedNode();\n    let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\n    if (nextNode) nextNode.focus();\n  }\n\n  @action focusPreviousNode() {\n    let previousNode = this.getFocusedNode();\n    let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\n    if (nextNode) nextNode.focus();\n  }\n\n  @action focusDrillDown() {\n    let previousNode = this.getFocusedNode();\n    if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\n      previousNode.toggleExpanded();\n    }\n    else {\n      let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\n      if (nextNode) nextNode.focus();\n    }\n  }\n\n  @action focusDrillUp() {\n    let previousNode = this.getFocusedNode();\n    if (!previousNode) return;\n    if (previousNode.isExpanded) {\n      previousNode.toggleExpanded();\n    }\n    else {\n      let nextNode = previousNode.realParent;\n      if (nextNode) nextNode.focus();\n    }\n  }\n\n  @action setActiveNode(node, value, multi = false) {\n    if (multi) {\n      this._setActiveNodeMulti(node, value);\n    }\n    else {\n      this._setActiveNodeSingle(node, value);\n    }\n\n    if (value) {\n      node.focus(this.options.scrollOnActivate);\n      this.fireEvent({ eventName: TREE_EVENTS.activate, node });\n      this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\n    } else {\n      this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\n      this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\n    }\n  }\n\n  @action setSelectedNode(node, value) {\n    this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, {[node.id]: value});\n\n    if (value) {\n      node.focus();\n      this.fireEvent({ eventName: TREE_EVENTS.select, node });\n    } else {\n      this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\n    }\n  }\n\n  @action setExpandedNode(node, value) {\n    this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[node.id]: value});\n    this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\n  }\n\n  @action expandAll() {\n    this.roots.forEach((root) => root.expandAll());\n  }\n\n  @action collapseAll() {\n    this.roots.forEach((root) => root.collapseAll());\n  }\n\n  @action setIsHidden(node, value) {\n    this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, {[node.id]: value});\n  }\n\n  @action setHiddenNodeIds(nodeIds) {\n    this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\n      [id]: true\n    }), {});\n  }\n\n  performKeyAction(node, $event) {\n    const action = this.options.actionMapping.keys[$event.keyCode];\n    if (action) {\n      $event.preventDefault();\n      action(this, node, $event);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  @action filterNodes(filter, autoShow = true) {\n    let filterFn;\n\n    if (!filter) {\n      return this.clearFilter();\n    }\n\n    // support function and string filter\n    if (isString(filter)) {\n      filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\n    }\n    else if (isFunction(filter)) {\n       filterFn = filter;\n    }\n    else {\n      console.error('Don\\'t know what to do with filter', filter);\n      console.error('Should be either a string or function');\n      return;\n    }\n\n    const ids = {};\n    this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\n    this.hiddenNodeIds = ids;\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\n  }\n\n  @action clearFilter() {\n    this.hiddenNodeIds = {};\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\n  }\n\n  @action moveNode(node, to) {\n    const fromIndex = node.getIndexInParent();\n    const fromParent = node.parent;\n\n    if (!this.canMoveNode(node, to, fromIndex)) return;\n\n    const fromChildren = fromParent.getField('children');\n\n    // If node doesn't have children - create children array\n    if (!to.parent.getField('children')) {\n      to.parent.setField('children', []);\n    }\n    const toChildren = to.parent.getField('children');\n\n    const originalNode = fromChildren.splice(fromIndex, 1)[0];\n\n    // Compensate for index if already removed from parent:\n    let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\n\n    toChildren.splice(toIndex, 0, originalNode);\n\n    fromParent.treeModel.update();\n    if (to.parent.treeModel !== fromParent.treeModel) {\n      to.parent.treeModel.update();\n    }\n\n    this.fireEvent({\n      eventName: TREE_EVENTS.moveNode,\n      node: originalNode,\n      to: { parent: to.parent.data, index: toIndex },\n      from: { parent: fromParent.data, index: fromIndex}\n    });\n  }\n\n  @action copyNode(node, to) {\n    const fromIndex = node.getIndexInParent();\n\n    if (!this.canMoveNode(node, to, fromIndex)) return;\n\n    // If node doesn't have children - create children array\n    if (!to.parent.getField('children')) {\n      to.parent.setField('children', []);\n    }\n    const toChildren = to.parent.getField('children');\n\n    const nodeCopy = this.options.getNodeClone(node);\n\n    toChildren.splice(to.index, 0, nodeCopy);\n\n    node.treeModel.update();\n    if (to.parent.treeModel !== node.treeModel) {\n      to.parent.treeModel.update();\n    }\n\n    this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\n  }\n\n  getState() {\n    return {\n      expandedNodeIds: this.expandedNodeIds,\n      selectedLeafNodeIds: this.selectedLeafNodeIds,\n      activeNodeIds: this.activeNodeIds,\n      hiddenNodeIds: this.hiddenNodeIds,\n      focusedNodeId: this.focusedNodeId\n    };\n  }\n\n  @action setState(state) {\n    if (!state) return;\n\n    Object.assign(this, {\n      expandedNodeIds: state.expandedNodeIds || {},\n      selectedLeafNodeIds: state.selectedLeafNodeIds || {},\n      activeNodeIds: state.activeNodeIds || {},\n      hiddenNodeIds: state.hiddenNodeIds || {},\n      focusedNodeId: state.focusedNodeId\n    });\n  }\n\n  subscribeToState(fn) {\n    autorun(() => fn(this.getState()));\n  }\n\n  canMoveNode(node, to, fromIndex = undefined) {\n    const fromNodeIndex = fromIndex || node.getIndexInParent();\n\n    // same node:\n    if (node.parent === to.parent && fromIndex === to.index) {\n      return false;\n    }\n\n    return !to.parent.isDescendantOf(node);\n  }\n\n  calculateExpandedNodes() {\n      this._calculateExpandedNodes();\n  }\n\n  // private methods\n  private _filterNode(ids, node, filterFn, autoShow) {\n    // if node passes function then it's visible\n    let isVisible = filterFn(node);\n\n    if (node.children) {\n      // if one of node's children passes filter then this node is also visible\n      node.children.forEach((child) => {\n        if (this._filterNode(ids, child, filterFn, autoShow)) {\n          isVisible = true;\n        }\n      });\n    }\n\n    // mark node as hidden\n    if (!isVisible) {\n      ids[node.id] = true;\n    }\n    // auto expand parents to make sure the filtered nodes are visible\n    if (autoShow && isVisible) {\n      node.ensureVisible();\n    }\n    return isVisible;\n  }\n\n  private _calculateExpandedNodes(startNode = null) {\n    startNode = startNode || this.virtualRoot;\n\n    if (startNode.data[this.options.isExpandedField]) {\n      this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[startNode.id]: true});\n    }\n    if (startNode.children) {\n      startNode.children.forEach((child) => this._calculateExpandedNodes(child));\n    }\n  }\n\n  private _setActiveNodeSingle(node, value) {\n    // Deactivate all other nodes:\n    this.activeNodes\n      .filter((activeNode) => activeNode !== node)\n      .forEach((activeNode) => {\n        this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\n        this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\n      });\n\n    if (value) {\n      this.activeNodeIds = {[node.id]: true};\n    }\n    else {\n      this.activeNodeIds = {};\n    }\n  }\n\n  private _setActiveNodeMulti(node, value) {\n    this.activeNodeIds = Object.assign({}, this.activeNodeIds, {[node.id]: value});\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}