{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, Output, Renderer2 } from '@angular/core';\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\nvar DRAG_OVER_CLASS = 'is-dragging-over';\nvar DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\n\nvar TreeDropDirective =\n/** @class */\nfunction () {\n  function TreeDropDirective(el, renderer, treeDraggedElement, ngZone) {\n    this.el = el;\n    this.renderer = renderer;\n    this.treeDraggedElement = treeDraggedElement;\n    this.ngZone = ngZone;\n    this.allowDragoverStyling = true;\n    this.onDropCallback = new EventEmitter();\n    this.onDragOverCallback = new EventEmitter();\n    this.onDragLeaveCallback = new EventEmitter();\n    this.onDragEnterCallback = new EventEmitter();\n\n    this._allowDrop = function (element, $event) {\n      return true;\n    };\n\n    this.dragOverEventHandler = this.onDragOver.bind(this);\n    this.dragEnterEventHandler = this.onDragEnter.bind(this);\n    this.dragLeaveEventHandler = this.onDragLeave.bind(this);\n  }\n\n  Object.defineProperty(TreeDropDirective.prototype, \"treeAllowDrop\", {\n    set: function set(allowDrop) {\n      if (allowDrop instanceof Function) {\n        this._allowDrop = allowDrop;\n      } else this._allowDrop = function (element, $event) {\n        return allowDrop;\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeDropDirective.prototype.allowDrop = function ($event) {\n    return this._allowDrop(this.treeDraggedElement.get(), $event);\n  };\n\n  TreeDropDirective.prototype.ngAfterViewInit = function () {\n    var _this = this;\n\n    var el = this.el.nativeElement;\n    this.ngZone.runOutsideAngular(function () {\n      el.addEventListener('dragover', _this.dragOverEventHandler);\n      el.addEventListener('dragenter', _this.dragEnterEventHandler);\n      el.addEventListener('dragleave', _this.dragLeaveEventHandler);\n    });\n  };\n\n  TreeDropDirective.prototype.ngOnDestroy = function () {\n    var el = this.el.nativeElement;\n    el.removeEventListener('dragover', this.dragOverEventHandler);\n    el.removeEventListener('dragenter', this.dragEnterEventHandler);\n    el.removeEventListener('dragleave', this.dragLeaveEventHandler);\n  };\n\n  TreeDropDirective.prototype.onDragOver = function ($event) {\n    if (!this.allowDrop($event)) {\n      if (this.allowDragoverStyling) {\n        return this.addDisabledClass();\n      }\n\n      return;\n    }\n\n    this.onDragOverCallback.emit({\n      event: $event,\n      element: this.treeDraggedElement.get()\n    });\n    $event.preventDefault();\n\n    if (this.allowDragoverStyling) {\n      this.addClass();\n    }\n  };\n\n  TreeDropDirective.prototype.onDragEnter = function ($event) {\n    if (!this.allowDrop($event)) return;\n    $event.preventDefault();\n    this.onDragEnterCallback.emit({\n      event: $event,\n      element: this.treeDraggedElement.get()\n    });\n  };\n\n  TreeDropDirective.prototype.onDragLeave = function ($event) {\n    if (!this.allowDrop($event)) {\n      if (this.allowDragoverStyling) {\n        return this.removeDisabledClass();\n      }\n\n      return;\n    }\n\n    this.onDragLeaveCallback.emit({\n      event: $event,\n      element: this.treeDraggedElement.get()\n    });\n\n    if (this.allowDragoverStyling) {\n      this.removeClass();\n    }\n  };\n\n  TreeDropDirective.prototype.onDrop = function ($event) {\n    if (!this.allowDrop($event)) return;\n    $event.preventDefault();\n    this.onDropCallback.emit({\n      event: $event,\n      element: this.treeDraggedElement.get()\n    });\n\n    if (this.allowDragoverStyling) {\n      this.removeClass();\n    }\n\n    this.treeDraggedElement.set(null);\n  };\n\n  TreeDropDirective.prototype.addClass = function () {\n    this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);\n  };\n\n  TreeDropDirective.prototype.removeClass = function () {\n    this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);\n  };\n\n  TreeDropDirective.prototype.addDisabledClass = function () {\n    this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\n  };\n\n  TreeDropDirective.prototype.removeDisabledClass = function () {\n    this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\n  };\n\n  __decorate([Input(), __metadata(\"design:type\", Object)], TreeDropDirective.prototype, \"allowDragoverStyling\", void 0);\n\n  __decorate([Output('treeDrop'), __metadata(\"design:type\", Object)], TreeDropDirective.prototype, \"onDropCallback\", void 0);\n\n  __decorate([Output('treeDropDragOver'), __metadata(\"design:type\", Object)], TreeDropDirective.prototype, \"onDragOverCallback\", void 0);\n\n  __decorate([Output('treeDropDragLeave'), __metadata(\"design:type\", Object)], TreeDropDirective.prototype, \"onDragLeaveCallback\", void 0);\n\n  __decorate([Output('treeDropDragEnter'), __metadata(\"design:type\", Object)], TreeDropDirective.prototype, \"onDragEnterCallback\", void 0);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], TreeDropDirective.prototype, \"treeAllowDrop\", null);\n\n  __decorate([HostListener('drop', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeDropDirective.prototype, \"onDrop\", null);\n\n  TreeDropDirective = __decorate([__metadata(\"design:paramtypes\", [ElementRef, Renderer2, TreeDraggedElement, NgZone])], TreeDropDirective);\n\n  TreeDropDirective.ɵfac = function TreeDropDirective_Factory(t) {\n    return new (t || TreeDropDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(TreeDraggedElement), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  TreeDropDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: TreeDropDirective,\n    selectors: [[\"\", \"treeDrop\", \"\"]],\n    hostBindings: function TreeDropDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"drop\", function TreeDropDirective_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    },\n    inputs: {\n      allowDragoverStyling: \"allowDragoverStyling\",\n      treeAllowDrop: \"treeAllowDrop\"\n    },\n    outputs: {\n      onDropCallback: \"treeDrop\",\n      onDragOverCallback: \"treeDropDragOver\",\n      onDragLeaveCallback: \"treeDropDragLeave\",\n      onDragEnterCallback: \"treeDropDragEnter\"\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TreeDropDirective, [{\n      type: Directive,\n      args: [{\n        selector: '[treeDrop]'\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc0.Renderer2\n      }, {\n        type: TreeDraggedElement\n      }, {\n        type: ɵngcc0.NgZone\n      }];\n    }, {\n      allowDragoverStyling: [{\n        type: Input\n      }],\n      onDropCallback: [{\n        type: Output,\n        args: ['treeDrop']\n      }],\n      onDragOverCallback: [{\n        type: Output,\n        args: ['treeDropDragOver']\n      }],\n      onDragLeaveCallback: [{\n        type: Output,\n        args: ['treeDropDragLeave']\n      }],\n      onDragEnterCallback: [{\n        type: Output,\n        args: ['treeDropDragEnter']\n      }],\n      treeAllowDrop: [{\n        type: Input\n      }],\n      onDrop: [{\n        type: HostListener,\n        args: ['drop', ['$event']]\n      }]\n    });\n  })();\n\n  return TreeDropDirective;\n}();\n\nexport { TreeDropDirective };","map":{"version":3,"sources":["../../lib/directives/tree-drop.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  Renderer2\n} from '@angular/core';\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\n\nconst DRAG_OVER_CLASS = 'is-dragging-over';\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\n\n@Directive({\n  selector: '[treeDrop]'\n})\nexport class TreeDropDirective implements AfterViewInit, OnDestroy {\n  @Input() allowDragoverStyling = true;\n  @Output('treeDrop') onDropCallback = new EventEmitter();\n  @Output('treeDropDragOver') onDragOverCallback = new EventEmitter();\n  @Output('treeDropDragLeave') onDragLeaveCallback = new EventEmitter();\n  @Output('treeDropDragEnter') onDragEnterCallback = new EventEmitter();\n  private readonly dragOverEventHandler: (ev: DragEvent) => void;\n  private readonly dragEnterEventHandler: (ev: DragEvent) => void;\n  private readonly dragLeaveEventHandler: (ev: DragEvent) => void;\n\n  private _allowDrop = (element, $event) => true;\n\n  @Input() set treeAllowDrop(allowDrop) {\n    if (allowDrop instanceof Function) {\n      this._allowDrop = allowDrop;\n    }\n    else this._allowDrop = (element, $event) => allowDrop;\n  }\n\n  allowDrop($event) {\n    return this._allowDrop(this.treeDraggedElement.get(), $event);\n  }\n\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\n    this.dragOverEventHandler = this.onDragOver.bind(this);\n    this.dragEnterEventHandler = this.onDragEnter.bind(this);\n    this.dragLeaveEventHandler = this.onDragLeave.bind(this);\n  }\n\n  ngAfterViewInit() {\n    let el: HTMLElement = this.el.nativeElement;\n    this.ngZone.runOutsideAngular(() => {\n      el.addEventListener('dragover', this.dragOverEventHandler);\n      el.addEventListener('dragenter', this.dragEnterEventHandler);\n      el.addEventListener('dragleave', this.dragLeaveEventHandler);\n    });\n  }\n\n  ngOnDestroy() {\n    let el: HTMLElement = this.el.nativeElement;\n    el.removeEventListener('dragover', this.dragOverEventHandler);\n    el.removeEventListener('dragenter', this.dragEnterEventHandler);\n    el.removeEventListener('dragleave', this.dragLeaveEventHandler);\n  }\n\n  onDragOver($event) {\n    if (!this.allowDrop($event)) {\n      if (this.allowDragoverStyling) {\n        return this.addDisabledClass();\n      }\n      return;\n    }\n\n    this.onDragOverCallback.emit({event: $event, element: this.treeDraggedElement.get()});\n\n    $event.preventDefault();\n    if (this.allowDragoverStyling) {\n      this.addClass();\n    }\n  }\n\n  onDragEnter($event) {\n    if (!this.allowDrop($event)) return;\n\n    $event.preventDefault();\n    this.onDragEnterCallback.emit({event: $event, element: this.treeDraggedElement.get()});\n  }\n\n  onDragLeave($event) {\n    if (!this.allowDrop($event)) {\n      if (this.allowDragoverStyling) {\n        return this.removeDisabledClass();\n      }\n      return;\n    }\n    this.onDragLeaveCallback.emit({event: $event, element: this.treeDraggedElement.get()});\n\n    if (this.allowDragoverStyling) {\n      this.removeClass();\n    }\n  }\n\n  @HostListener('drop', ['$event']) onDrop($event) {\n    if (!this.allowDrop($event)) return;\n\n    $event.preventDefault();\n    this.onDropCallback.emit({event: $event, element: this.treeDraggedElement.get()});\n\n    if (this.allowDragoverStyling) {\n      this.removeClass();\n    }\n    this.treeDraggedElement.set(null);\n  }\n\n  private addClass() {\n    this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);\n  }\n\n  private removeClass() {\n    this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);\n  }\n\n  private addDisabledClass() {\n    this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\n  }\n\n  private removeDisabledClass() {\n    this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}