{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction LoadingComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1, \"loading...\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c0 = function _c0(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component, Input, TemplateRef, ViewEncapsulation } from '@angular/core';\nimport { TreeNode } from '../models/tree-node.model';\n\nvar LoadingComponent =\n/** @class */\nfunction () {\n  function LoadingComponent() {}\n\n  __decorate([Input(), __metadata(\"design:type\", TemplateRef)], LoadingComponent.prototype, \"template\", void 0);\n\n  __decorate([Input(), __metadata(\"design:type\", TreeNode)], LoadingComponent.prototype, \"node\", void 0);\n\n  LoadingComponent.ɵfac = function LoadingComponent_Factory(t) {\n    return new (t || LoadingComponent)();\n  };\n\n  LoadingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: LoadingComponent,\n    selectors: [[\"tree-loading-component\"]],\n    inputs: {\n      template: \"template\",\n      node: \"node\"\n    },\n    decls: 2,\n    vars: 5,\n    consts: [[4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function LoadingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, LoadingComponent_span_0_Template, 2, 0, \"span\", 0);\n        ɵngcc0.ɵɵelementContainer(1, 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx.node));\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(LoadingComponent, [{\n      type: Component,\n      args: [{\n        encapsulation: ViewEncapsulation.None,\n        selector: 'tree-loading-component',\n        template: \"\\n    <span *ngIf=\\\"!template\\\">loading...</span>\\n    <ng-container\\n      [ngTemplateOutlet]=\\\"template\\\"\\n      [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\">\\n    </ng-container>\\n  \"\n      }]\n    }], function () {\n      return [];\n    }, {\n      template: [{\n        type: Input\n      }],\n      node: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return LoadingComponent;\n}();\n\nexport { LoadingComponent };","map":{"version":3,"sources":["../../lib/components/loading.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAT,EAAoB,KAApB,EAA2B,WAA3B,EAAwC,iBAAxC,QAAiE,eAAjE;AACA,SAAS,QAAT,QAAyB,2BAAzB;;AAaA,IAAA,gBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gBAAA,GAAA,CAGC;;AAFU,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAS,WAAT,CAAD,CAAA,EAAuB,gBAAA,CAAA,SAAvB,EAAuB,UAAvB,EAAuB,KAAA,CAAvB,CAAA;;AACA,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAK,QAAL,CAAD,CAAA,EACX,gBAAA,CAAA,SADW,EACX,MADW,EACX,KAD0B,CAAf,CAAA;;AAFE,EAAA,gBAAA,CAAA,IAAA,GAAgB,SAX5B,wBAW4B,CAXlB,CAWkB,EAXlB;AAAA,WACT,KAAA,CAAA,IAAA,gBAAA,GADS;AACwB,GAUtB;;AAV0B,EAAA,gBACrC,CAAA,IADqC,GAC7B,MAAE,CAAA,iBAAF,CAA0B;AAAA,IAAA,IAAA,EAAA,gBAAA;AACxB,IAAA,SAAA,EAAA,CAAA,CAAA,wBAAA,CAAA,CADwB;AACxB,IAAA,MAAA,EAAA;AAAA,MAAA,QAAA,EAAA,UAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KADwB;AACxB,IAAA,KAAA,EAAA,CADwB;AACxB,IAAA,IAAA,EAAA,CADwB;AACxB,IAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,kBAAA,EAAA,yBAAA,CAAA,CADwB;AACxB,IAAA,QAMT,EAAA,SACD,yBADC,CAKF,EALE,EAKF,GALE,EAKF;AAAA,UAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;;KAZmC;sDAAA;;AAAA,GAA1B,CAD6B;;;;;;;;;;;;;;;;;;;;;AAcvC,G;;AADA,SAAA,gBAAA;AAAC,CAHD,EAAA;;AAIA,SAJa,gBAIb","sourcesContent":["import { Component, Input, TemplateRef, ViewEncapsulation } from '@angular/core';\nimport { TreeNode } from '../models/tree-node.model';\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'tree-loading-component',\n  template: `\n    <span *ngIf=\"!template\">loading...</span>\n    <ng-container\n      [ngTemplateOutlet]=\"template\"\n      [ngTemplateOutletContext]=\"{ $implicit: node }\">\n    </ng-container>\n  `,\n})\nexport class LoadingComponent {\n  @Input() template: TemplateRef<any>;\n  @Input() node: TreeNode;\n}\n"]},"metadata":{},"sourceType":"module"}