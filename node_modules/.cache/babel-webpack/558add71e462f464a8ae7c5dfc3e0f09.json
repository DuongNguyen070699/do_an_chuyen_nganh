{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nguyennha/do-an-chuyen-nganh/do_an_chuyen_nganh/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/nguyennha/do-an-chuyen-nganh/do_an_chuyen_nganh/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nguyennha/do-an-chuyen-nganh/do_an_chuyen_nganh/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { HttpHeaders, HttpClient, HttpClientModule } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/router';\nvar DTGAUTH_CONFIG = new InjectionToken('DTGAuthModuleOptions');\nvar TOKEN = 'token';\nvar USER = 'user';\n\nvar DTGAuthService = /*#__PURE__*/function () {\n  function DTGAuthService(http, config) {\n    _classCallCheck(this, DTGAuthService);\n\n    this.http = http;\n    this.config = config;\n  }\n\n  _createClass(DTGAuthService, [{\n    key: \"authenticate\",\n    value: function authenticate(params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var username, password, appId, url, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                username = params.username, password = params.password, appId = params.appId;\n                url = this.config.loginUrl || this.config.apiUrl + '/auth/login';\n                _context.next = 4;\n                return this.http.post(url, {\n                  username: username,\n                  password: password,\n                  appId: appId\n                }).toPromise();\n\n              case 4:\n                result = _context.sent;\n\n                if (result) {\n                  localStorage.setItem(TOKEN, result.accessToken);\n                  localStorage.setItem(USER, JSON.stringify(result));\n                }\n\n                return _context.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"isAuthenticate\",\n    value: function isAuthenticate() {\n      return Boolean(this.getToken());\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return localStorage.getItem(TOKEN);\n    }\n  }, {\n    key: \"getInfo\",\n    value: function getInfo() {\n      var user = localStorage.getItem(USER);\n\n      if (user) {\n        return JSON.parse(user);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"deAuthenticate\",\n    value: function deAuthenticate() {\n      localStorage.removeItem(TOKEN);\n      localStorage.removeItem(USER);\n    }\n  }, {\n    key: \"isAccess\",\n    value: function isAccess(params) {\n      var appId = params.appId;\n      var url = this.config.isAccessUrl || \"\".concat(this.config.apiUrl, \"/auth/isaccess/\").concat(appId);\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + this.getToken()\n        }\n      });\n    }\n  }, {\n    key: \"getAppInfo\",\n    value: function getAppInfo(params) {\n      // Get a token from api server using the fetch api\n      var appId = params.appId,\n          isGuest = params.isGuest;\n      var url = this.config.appInfoUrl || \"\".concat(this.config.apiUrl, \"/auth/appinfo/\").concat(appId);\n      var headers = new HttpHeaders();\n\n      if (!isGuest && this.isAuthenticate()) {\n        headers = headers.append('Authorization', 'Bearer ' + this.getToken());\n      } else {\n        url = url + '/anonymous';\n      }\n\n      return this.http.get(url, {\n        headers: headers\n      });\n    }\n  }]);\n\n  return DTGAuthService;\n}();\n\nDTGAuthService.ɵfac = function DTGAuthService_Factory(t) {\n  return new (t || DTGAuthService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(DTGAUTH_CONFIG));\n};\n\nDTGAuthService.ɵprov = ɵɵdefineInjectable({\n  factory: function DTGAuthService_Factory() {\n    return new DTGAuthService(ɵɵinject(HttpClient), ɵɵinject(DTGAUTH_CONFIG));\n  },\n  token: DTGAuthService,\n  providedIn: \"root\"\n});\n\nDTGAuthService.ctorParameters = function () {\n  return [{\n    type: HttpClient\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DTGAUTH_CONFIG]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DTGAuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DTGAUTH_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nvar DTGLogService = /*#__PURE__*/function () {\n  function DTGLogService(http, authService, config) {\n    _classCallCheck(this, DTGLogService);\n\n    this.http = http;\n    this.authService = authService;\n    this.config = config;\n  }\n\n  _createClass(DTGLogService, [{\n    key: \"create\",\n    value: function create(entity) {\n      var url = this.config.logUrl || \"\".concat(this.config.apiUrl, \"/sys/logger\");\n      return this.http.post(url, JSON.stringify(entity), {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.authService.getToken()\n        }\n      });\n    }\n  }]);\n\n  return DTGLogService;\n}();\n\nDTGLogService.ɵfac = function DTGLogService_Factory(t) {\n  return new (t || DTGLogService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(DTGAuthService), ɵngcc0.ɵɵinject(DTGAUTH_CONFIG));\n};\n\nDTGLogService.ɵprov = ɵɵdefineInjectable({\n  factory: function DTGLogService_Factory() {\n    return new DTGLogService(ɵɵinject(HttpClient), ɵɵinject(DTGAuthService), ɵɵinject(DTGAUTH_CONFIG));\n  },\n  token: DTGLogService,\n  providedIn: \"root\"\n});\n\nDTGLogService.ctorParameters = function () {\n  return [{\n    type: HttpClient\n  }, {\n    type: DTGAuthService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DTGAUTH_CONFIG]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DTGLogService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: DTGAuthService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DTGAUTH_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nvar DTGLayerInfoService = /*#__PURE__*/function () {\n  function DTGLayerInfoService(http, authService, config) {\n    _classCallCheck(this, DTGLayerInfoService);\n\n    this.http = http;\n    this.authService = authService;\n    this.config = config;\n  }\n\n  _createClass(DTGLayerInfoService, [{\n    key: \"get\",\n    value: function get() {\n      var url = this.config.layerInfoUrl || \"\".concat(this.config.apiUrl, \"/auth/layerinfos\");\n      return this.http.get(url, {\n        headers: {\n          Authorization: 'Bearer ' + this.authService.getToken()\n        }\n      });\n    }\n  }, {\n    key: \"getGuest\",\n    value: function getGuest() {\n      var url = this.config.layerInfoUrl || \"\".concat(this.config.apiUrl, \"/auth/layerinfos/anonymous\");\n      return this.http.get(url);\n    }\n  }]);\n\n  return DTGLayerInfoService;\n}();\n\nDTGLayerInfoService.ɵfac = function DTGLayerInfoService_Factory(t) {\n  return new (t || DTGLayerInfoService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(DTGAuthService), ɵngcc0.ɵɵinject(DTGAUTH_CONFIG));\n};\n\nDTGLayerInfoService.ɵprov = ɵɵdefineInjectable({\n  factory: function DTGLayerInfoService_Factory() {\n    return new DTGLayerInfoService(ɵɵinject(HttpClient), ɵɵinject(DTGAuthService), ɵɵinject(DTGAUTH_CONFIG));\n  },\n  token: DTGLayerInfoService,\n  providedIn: \"root\"\n});\n\nDTGLayerInfoService.ctorParameters = function () {\n  return [{\n    type: HttpClient\n  }, {\n    type: DTGAuthService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DTGAUTH_CONFIG]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DTGLayerInfoService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: DTGAuthService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DTGAUTH_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nvar DTGSimpleGuard = /*#__PURE__*/function () {\n  function DTGSimpleGuard(authService, router, config) {\n    _classCallCheck(this, DTGSimpleGuard);\n\n    this.authService = authService;\n    this.router = router;\n    this.config = config;\n  }\n\n  _createClass(DTGSimpleGuard, [{\n    key: \"canActivate\",\n    value: function canActivate(route, state) {\n      var isAuthenticate = this.authService.isAuthenticate();\n\n      if (isAuthenticate) {\n        // logged in so return true\n        if (this.config.guard && this.config.guard.simple) {\n          if (this.config.guard.simple.canActive) {\n            this.config.guard.simple.canActive(route, state);\n          }\n        }\n\n        return true;\n      } // not logged in so redirect to login page with the return url\n\n\n      if (this.config.guard && this.config.guard.simple) {\n        if (this.config.guard.simple.canNotActive) {\n          this.config.guard.simple.canNotActive(route, state);\n          return false;\n        }\n      }\n\n      this.router.navigateByUrl(this.config.guard && this.config.guard.simple && this.config.guard.simple.defaultNavigateUrl ? this.config.guard.simple.defaultNavigateUrl : '/auth', {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n      return false;\n    }\n  }]);\n\n  return DTGSimpleGuard;\n}();\n\nDTGSimpleGuard.ɵfac = function DTGSimpleGuard_Factory(t) {\n  return new (t || DTGSimpleGuard)(ɵngcc0.ɵɵinject(DTGAuthService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(DTGAUTH_CONFIG));\n};\n\nDTGSimpleGuard.ɵprov = ɵɵdefineInjectable({\n  factory: function DTGSimpleGuard_Factory() {\n    return new DTGSimpleGuard(ɵɵinject(DTGAuthService), ɵɵinject(Router), ɵɵinject(DTGAUTH_CONFIG));\n  },\n  token: DTGSimpleGuard,\n  providedIn: \"root\"\n});\n\nDTGSimpleGuard.ctorParameters = function () {\n  return [{\n    type: DTGAuthService\n  }, {\n    type: Router\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DTGAUTH_CONFIG]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DTGSimpleGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: DTGAuthService\n    }, {\n      type: ɵngcc2.Router\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DTGAUTH_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nvar DitagisAuthModule = /*#__PURE__*/function () {\n  function DitagisAuthModule() {\n    _classCallCheck(this, DitagisAuthModule);\n  }\n\n  _createClass(DitagisAuthModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(options) {\n      return {\n        ngModule: DitagisAuthModule,\n        providers: [{\n          provide: DTGAUTH_CONFIG,\n          useValue: options\n        }, DTGAuthService, DTGLogService, DTGLayerInfoService, DTGSimpleGuard]\n      };\n    }\n  }]);\n\n  return DitagisAuthModule;\n}();\n\nDitagisAuthModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: DitagisAuthModule\n});\nDitagisAuthModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function DitagisAuthModule_Factory(t) {\n    return new (t || DitagisAuthModule)();\n  },\n  imports: [[HttpClientModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DitagisAuthModule, {\n    imports: function imports() {\n      return [HttpClientModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DitagisAuthModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [],\n      imports: [HttpClientModule]\n    }]\n  }], null, null);\n})();\n\nvar ApplicationEnvironmentEnum;\n\n(function (ApplicationEnvironmentEnum) {\n  ApplicationEnvironmentEnum[\"Desktop\"] = \"D\";\n  ApplicationEnvironmentEnum[\"Web\"] = \"W\";\n  ApplicationEnvironmentEnum[\"Mobile\"] = \"M\";\n})(ApplicationEnvironmentEnum || (ApplicationEnvironmentEnum = {}));\n\nvar ResponseLogin = function ResponseLogin() {\n  _classCallCheck(this, ResponseLogin);\n};\n\nvar ColumnTypeEnum;\n\n(function (ColumnTypeEnum) {\n  ColumnTypeEnum[\"string\"] = \"esriFieldTypeString\";\n  ColumnTypeEnum[\"smallInteger\"] = \"esriFieldTypeSmallInteger\";\n  ColumnTypeEnum[\"integer\"] = \"esriFieldTypeInteger\";\n  ColumnTypeEnum[\"double\"] = \"esriFieldTypeDouble\";\n  ColumnTypeEnum[\"long\"] = \"esriFieldTypeLong\";\n  ColumnTypeEnum[\"date\"] = \"esriFieldTypeDate\";\n  ColumnTypeEnum[\"oid\"] = \"esriFieldTypeOID\";\n  ColumnTypeEnum[\"geometry\"] = \"esriFieldTypeGeometry\";\n})(ColumnTypeEnum || (ColumnTypeEnum = {}));\n\nvar LoggerActionTypeEnum;\n\n(function (LoggerActionTypeEnum) {\n  LoggerActionTypeEnum[\"INSERT\"] = \"INSERT\";\n  LoggerActionTypeEnum[\"LOGIN\"] = \"LOGIN\";\n  LoggerActionTypeEnum[\"LOGOUT\"] = \"LOGOUT\";\n  LoggerActionTypeEnum[\"REMOVE\"] = \"REMOVE\";\n  LoggerActionTypeEnum[\"UPDATE\"] = \"UPDATE\";\n})(LoggerActionTypeEnum || (LoggerActionTypeEnum = {}));\n\nvar UserStatusEnum;\n\n(function (UserStatusEnum) {\n  UserStatusEnum[\"Open\"] = \"OPEN\";\n  UserStatusEnum[\"Locked\"] = \"LOCKED\";\n  UserStatusEnum[\"Request\"] = \"REQUEST\";\n  UserStatusEnum[\"Expired\"] = \"EXPIRED\";\n})(UserStatusEnum || (UserStatusEnum = {}));\n\nvar RoleStatusEnum;\n\n(function (RoleStatusEnum) {\n  RoleStatusEnum[\"Open\"] = \"OPEN\";\n  RoleStatusEnum[\"Lock\"] = \"LOCK\";\n  RoleStatusEnum[\"Hide\"] = \"HIDE\";\n})(RoleStatusEnum || (RoleStatusEnum = {}));\n\nvar ErrorInterceptor = /*#__PURE__*/function () {\n  function ErrorInterceptor(authService, config) {\n    _classCallCheck(this, ErrorInterceptor);\n\n    this.authService = authService;\n    this.config = config;\n  }\n\n  _createClass(ErrorInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(request, next) {\n      var _this = this;\n\n      return next.handle(request).pipe(catchError(function (err) {\n        var url = _this.config && _this.config.loginUrl || 'login';\n\n        if (request.url.search(url) === -1) {\n          if (err.status === 401) {\n            // auto logout if 401 response returned from api\n            _this.authService.deAuthenticate();\n\n            location.reload(true);\n          }\n        }\n\n        var error = err.error.message || err.statusText || 'Có lỗi xảy ra';\n        return throwError(error);\n      }));\n    }\n  }]);\n\n  return ErrorInterceptor;\n}();\n\nErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || ErrorInterceptor)(ɵngcc0.ɵɵinject(DTGAuthService), ɵngcc0.ɵɵinject(DTGAUTH_CONFIG));\n};\n\nErrorInterceptor.ɵprov = ɵɵdefineInjectable({\n  factory: function ErrorInterceptor_Factory() {\n    return new ErrorInterceptor(ɵɵinject(DTGAuthService), ɵɵinject(DTGAUTH_CONFIG));\n  },\n  token: ErrorInterceptor,\n  providedIn: \"root\"\n});\n\nErrorInterceptor.ctorParameters = function () {\n  return [{\n    type: DTGAuthService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DTGAUTH_CONFIG]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ErrorInterceptor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      deps: [DTGAuthService]\n    }]\n  }], function () {\n    return [{\n      type: DTGAuthService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DTGAUTH_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nvar JwtInterceptor = /*#__PURE__*/function () {\n  function JwtInterceptor(authService) {\n    _classCallCheck(this, JwtInterceptor);\n\n    this.authService = authService;\n  }\n\n  _createClass(JwtInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(request, next) {\n      // add authorization header with jwt token if available\n      var isAuthenticate = this.authService.isAuthenticate();\n\n      if (isAuthenticate) {\n        var token = this.authService.getToken();\n        request = request.clone({\n          setHeaders: {\n            Authorization: \"Bearer \".concat(token)\n          }\n        });\n      }\n\n      return next.handle(request);\n    }\n  }]);\n\n  return JwtInterceptor;\n}();\n\nJwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || JwtInterceptor)(ɵngcc0.ɵɵinject(DTGAuthService));\n};\n\nJwtInterceptor.ɵprov = ɵɵdefineInjectable({\n  factory: function JwtInterceptor_Factory() {\n    return new JwtInterceptor(ɵɵinject(DTGAuthService));\n  },\n  token: JwtInterceptor,\n  providedIn: \"root\"\n});\n\nJwtInterceptor.ctorParameters = function () {\n  return [{\n    type: DTGAuthService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(JwtInterceptor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      deps: [DTGAuthService]\n    }]\n  }], function () {\n    return [{\n      type: DTGAuthService\n    }];\n  }, null);\n})();\n/*\r\n * Public API Surface of ditagis-auth\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ApplicationEnvironmentEnum, ColumnTypeEnum, DTGAUTH_CONFIG, DTGAuthService, DTGLayerInfoService, DTGLogService, DTGSimpleGuard, DitagisAuthModule, ErrorInterceptor, JwtInterceptor, LoggerActionTypeEnum, ResponseLogin, RoleStatusEnum, UserStatusEnum, DTGLogService as ɵa, DTGLayerInfoService as ɵb, DTGSimpleGuard as ɵc };","map":{"version":3,"sources":["../../../projects/dtg-auth/src/lib/dtg-auth.config.ts","../../../projects/dtg-auth/src/lib/ditagis-auth.service.ts","../../../projects/dtg-auth/src/lib/services/dtg-log.service.ts","../../../projects/dtg-auth/src/lib/services/dtg-layerinfo.service.ts","../../../projects/dtg-auth/src/lib/guards/simple.guard.ts","../../../projects/dtg-auth/src/lib/dtg-auth.module.ts","../../../projects/dtg-auth/src/lib/interfaces/application.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/auth.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/layer.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/log.interface.ts","../../../projects/dtg-auth/src/lib/interfaces/user.interface.ts","../../../projects/dtg-auth/src/lib/interceptors/error.interceptor.ts","../../../projects/dtg-auth/src/lib/interceptors/jwt.interceptor.ts","../../../projects/dtg-auth/src/public-api.ts","../../../projects/dtg-auth/src/ditagis-auth.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\nexport interface DTGAuthModuleOptions {\r\n  apiUrl: string;\r\n  loginUrl?: string;\r\n  logUrl?: string;\r\n  layerInfoUrl?: string;\r\n  isAccessUrl?: string;\r\n  appInfoUrl?: string;\r\n  guard?: {\r\n    simple?: {\r\n      canActive?: (route, state) => void,\r\n      canNotActive?: (route, state) => void,\r\n      /**\r\n       * Url mặc định khi canActive = false\r\n       */\r\n      defaultNavigateUrl?: string;\r\n    }\r\n  };\r\n}\r\nexport const DTGAUTH_CONFIG = new InjectionToken<DTGAuthModuleOptions>('DTGAuthModuleOptions');\r\n\r\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ResponseLogin } from './interfaces/auth.interface';\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from './dtg-auth.config';\nimport { ApplicationEntity } from './interfaces';\nimport { Observable } from 'rxjs';\n\nconst TOKEN = 'token';\nconst USER = 'user';\n\n@Injectable({ providedIn: 'root' })\nexport class DTGAuthService {\n    constructor(\n        private http: HttpClient,\n        @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\n    ) {\n\n    }\n\n    async authenticate(params: {\n        username: string, password: string,\n        appId?: string\n    }) {\n        const { username, password, appId } = params;\n        const url = this.config.loginUrl || this.config.apiUrl + '/auth/login';\n        const result = await this.http.post<ResponseLogin>(url, {\n            username, password,\n            appId\n        }).toPromise();\n        if (result) {\n            localStorage.setItem(TOKEN, result.accessToken);\n            localStorage.setItem(USER, JSON.stringify(result));\n        }\n        return result;\n    }\n\n    isAuthenticate(): boolean {\n        return Boolean(this.getToken());\n    }\n\n    getToken() {\n        return localStorage.getItem(TOKEN);\n    }\n\n    getInfo() {\n        const user = localStorage.getItem(USER);\n        if (user) {\n            return JSON.parse(user);\n        }\n        return null;\n    }\n\n    deAuthenticate() {\n        localStorage.removeItem(TOKEN);\n        localStorage.removeItem(USER);\n    }\n\n    isAccess(params: {\n        appId: string\n    }) {\n        const { appId } = params;\n        const url = this.config.isAccessUrl ||\n            `${this.config.apiUrl}/auth/isaccess/${appId}`;\n        return this.http.get<boolean>(url, {\n            headers: {\n                Authorization: 'Bearer ' + this.getToken()\n            }\n        });\n    }\n\n    getAppInfo(params: {\n        appId: string,\n        isGuest?: boolean\n    }): Observable<ApplicationEntity> {\n        // Get a token from api server using the fetch api\n        const { appId, isGuest } = params;\n        let url = this.config.appInfoUrl || `${this.config.apiUrl}/auth/appinfo/${appId}`;\n        let headers = new HttpHeaders();\n        if (!isGuest && this.isAuthenticate()) {\n            headers = headers.append('Authorization', 'Bearer ' + this.getToken());\n\n        } else {\n            url = url + '/anonymous';\n        }\n        return this.http.get<ApplicationEntity>(url, {\n            headers\n        });\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../dtg-auth.config';\r\nimport { LogEntity } from '../interfaces';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DTGLogService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: DTGAuthService,\r\n    @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n  ) {\r\n\r\n  }\r\n\r\n  create(entity: LogEntity) {\r\n    const url = this.config.logUrl || `${this.config.apiUrl}/sys/logger`;\r\n    return this.http.post<LogEntity>(url, JSON.stringify(entity), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer ' + this.authService.getToken()\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../dtg-auth.config';\r\nimport { Observable } from 'rxjs';\r\nimport { LayerEntity, LayerInfo } from '../interfaces';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DTGLayerInfoService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: DTGAuthService,\r\n    @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n  ) { }\r\n\r\n  get(): Observable<LayerInfo[]> {\r\n    const url = this.config.layerInfoUrl ||\r\n      `${this.config.apiUrl}/auth/layerinfos`;\r\n    return this.http.get<LayerInfo[]>(url, {\r\n      headers: {\r\n        Authorization: 'Bearer ' + this.authService.getToken()\r\n      }\r\n    });\r\n  }\r\n\r\n  getGuest(): Observable<LayerEntity[]> {\r\n    const url = this.config.layerInfoUrl ||\r\n      `${this.config.apiUrl}/auth/layerinfos/anonymous`;\r\n    return this.http.get<LayerEntity[]>(url);\r\n  }\r\n\r\n}\r\n","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../dtg-auth.config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DTGSimpleGuard implements CanActivate {\r\n  constructor(\r\n    private authService: DTGAuthService,\r\n    private router: Router,\r\n    @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n  ) {\r\n\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const isAuthenticate = this.authService.isAuthenticate();\r\n    if (isAuthenticate) {\r\n      // logged in so return true\r\n      if (this.config.guard && this.config.guard.simple) {\r\n        if (this.config.guard.simple.canActive) {\r\n          this.config.guard.simple.canActive(route, state);\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    // not logged in so redirect to login page with the return url\r\n    if (this.config.guard && this.config.guard.simple) {\r\n      if (this.config.guard.simple.canNotActive) {\r\n        this.config.guard.simple.canNotActive(route, state);\r\n        return false;\r\n      }\r\n    }\r\n    this.router.navigateByUrl(\r\n      this.config.guard &&\r\n        this.config.guard.simple && this.config.guard.simple.defaultNavigateUrl ?\r\n        this.config.guard.simple.defaultNavigateUrl :\r\n        '/auth'\r\n      , { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DTGAuthModuleOptions, DTGAUTH_CONFIG } from './dtg-auth.config';\nimport { DTGAuthService } from './ditagis-auth.service';\nimport { DTGLogService } from './services/dtg-log.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DTGLayerInfoService } from './services/dtg-layerinfo.service';\nimport { DTGSimpleGuard } from './guards/simple.guard';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    HttpClientModule\n  ]\n})\nexport class DitagisAuthModule {\n  static forRoot(options: DTGAuthModuleOptions): ModuleWithProviders<DitagisAuthModule> {\n    return {\n      ngModule: DitagisAuthModule,\n      providers: [\n        { provide: DTGAUTH_CONFIG, useValue: options },\n        DTGAuthService, DTGLogService, DTGLayerInfoService, DTGSimpleGuard\n      ]\n    };\n  }\n}\n","export interface ApplicationEntity {\r\n    applicationId?: string;\r\n    applicationName?: string;\r\n    isEnabled?: boolean;\r\n    applicationGroupId?: string;\r\n    applicationGroup?: ApplicationGroupEntity;\r\n    environmentId?: ApplicationEnvironmentEnum;\r\n    config?: any;\r\n}\r\n\r\nexport interface ApplicationGroupEntity {\r\n    applicationGroupId?: string;\r\n    applicationGroupName?: string;\r\n     parentId?: string;\r\n    parent?: ApplicationGroupEntity;\r\n    childs?: ApplicationGroupEntity[];\r\n    applications?: ApplicationEntity[];\r\n}\r\n\r\nexport enum ApplicationEnvironmentEnum {\r\n    Desktop = 'D', Web = 'W', Mobile = 'M'\r\n}\r\n","export class ResponseLogin {\r\n  accessToken: string;\r\n}\r\n","export interface LayerEntity {\r\n    layerId?: string;\r\n    layerName?: string;\r\n    datasetId?: string;\r\n    dataset?: DatasetEntity;\r\n    url?: string;\r\n}\r\n\r\nexport interface LayerInfo extends LayerEntity {\r\n    isView: boolean;\r\n    isCreate: boolean;\r\n    isDelete: boolean;\r\n    isUpdate: boolean;\r\n    definition?: string;\r\n}\r\n\r\nexport interface DatasetEntity {\r\n    datasetId?: string;\r\n    datasetName?: string;\r\n    layers?: LayerEntity[];\r\n}\r\nexport interface ColumnEntity {\r\n    name?: string;\r\n    alias?: string;\r\n    type?: ColumnTypeEnum;\r\n    isNullable?: boolean;\r\n    domainId?: string;\r\n    domain?: CodedDomainEntity;\r\n    layerId?: string;\r\n    layer?: LayerEntity;\r\n}\r\n\r\nexport enum ColumnTypeEnum {\r\n    string = 'esriFieldTypeString',\r\n    smallInteger = 'esriFieldTypeSmallInteger',\r\n    integer = 'esriFieldTypeInteger',\r\n    double = 'esriFieldTypeDouble',\r\n    long = 'esriFieldTypeLong',\r\n    date = 'esriFieldTypeDate',\r\n    oid = 'esriFieldTypeOID',\r\n    geometry = 'esriFieldTypeGeometry',\r\n}\r\n\r\nexport interface CodedDomainEntity {\r\n    id?: string;\r\n    name?: string;\r\n    type?: 'esriFieldTypeInteger' | 'esriFieldTypeSmallInteger' | 'esriFieldTypeString';\r\n    codedValues?: CodedValueEntity[];\r\n}\r\n\r\nexport interface CodedValueEntity {\r\n    id?: string;\r\n    code?: string;\r\n    name?: string;\r\n    domain?: CodedDomainEntity;\r\n}\r\n","import { UserEntity } from './user.interface';\r\nimport { ApplicationEntity } from './application.interface';\r\nimport { LayerEntity } from './layer.interface';\r\n\r\nexport interface LogEntity {\r\n    id?: string;\r\n    userId?: string;\r\n    user?: UserEntity;\r\n    createDate?: Date;\r\n    applicationId?: string;\r\n    application?: ApplicationEntity;\r\n    actionTypeId?: LoggerActionTypeEnum;\r\n    description?: string;\r\n    note?: string;\r\n    tableName?: string;\r\n    table?: LayerEntity;\r\n    objectId?: number;\r\n}\r\n\r\nexport enum LoggerActionTypeEnum {\r\n    INSERT = 'INSERT',\r\n    LOGIN = 'LOGIN',\r\n    LOGOUT = 'LOGOUT',\r\n    REMOVE = 'REMOVE',\r\n    UPDATE = 'UPDATE'\r\n}\r\n","import { ApplicationEntity } from './application.interface';\r\nimport { LayerEntity } from './layer.interface';\r\n\r\nexport interface UserEntity {\r\n    userId?: string;\r\n    username?: string;\r\n    password?: string;\r\n    statusId?: UserStatusEnum;\r\n    displayName?: string;\r\n    status?: UserStatusEntity;\r\n    role?: RoleEntity;\r\n    roleId?: string;\r\n}\r\n\r\nexport interface UserStatusEntity {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport enum UserStatusEnum {\r\n    Open = 'OPEN',\r\n    Locked = 'LOCKED',\r\n    Request = 'REQUEST',\r\n    Expired = 'EXPIRED'\r\n}\r\n\r\nexport interface RoleEntity {\r\n    roleId?: string;\r\n    roleName?: string;\r\n    roleParentId?: string;\r\n    roleParent?: RoleEntity;\r\n    users?: UserEntity[];\r\n    status?: RoleStatusEnum;\r\n    applications?: ApplicationEntity[];\r\n    layers?: RoleLayerEntity[];\r\n}\r\n\r\nexport enum RoleStatusEnum {\r\n    Open = 'OPEN', Lock = 'LOCK', Hide = 'HIDE'\r\n}\r\n\r\nexport interface RoleLayerEntity {\r\n    id?: string;\r\n    roleId?: string;\r\n    layerId?: string;\r\n    layer?: LayerEntity;\r\n    role?: LayerEntity;\r\n    isView?: boolean;\r\n    isCreate?: boolean;\r\n    isEdit?: boolean;\r\n    isDelete?: boolean;\r\n    definition?: string;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\nimport { DTGAUTH_CONFIG, DTGAuthModuleOptions } from '../../public-api';\r\n\r\n@Injectable({ providedIn: 'root', deps: [DTGAuthService] })\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        private authService: DTGAuthService,\r\n        @Inject(DTGAUTH_CONFIG) private config: DTGAuthModuleOptions\r\n    ) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            const url = this.config && this.config.loginUrl || 'login';\r\n            if (request.url.search(url) === -1) {\r\n                if (err.status === 401) {\r\n                    // auto logout if 401 response returned from api\r\n                    this.authService.deAuthenticate();\r\n                    location.reload(true);\r\n                }\r\n            }\r\n            const error = err.error.message || err.statusText || 'Có lỗi xảy ra';\r\n            return throwError(error);\r\n        }));\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { DTGAuthService } from '../ditagis-auth.service';\r\n\r\n@Injectable({ providedIn: 'root', deps: [DTGAuthService] })\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    constructor(private authService: DTGAuthService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // add authorization header with jwt token if available\r\n        const isAuthenticate = this.authService.isAuthenticate();\r\n        if (isAuthenticate) {\r\n            const token = this.authService.getToken();\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(request);\r\n    }\r\n}\r\n","/*\r\n * Public API Surface of ditagis-auth\r\n */\r\n\r\nexport * from './lib/dtg-auth.module';\r\nexport * from './lib/ditagis-auth.service';\r\nexport * from './lib/interfaces';\r\nexport * from './lib/services';\r\nexport * from './lib/interceptors';\r\nexport * from './lib/dtg-auth.config';\r\nexport * from './lib/guards';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DTGSimpleGuard as ɵc} from './lib/guards/simple.guard';\nexport {DTGLayerInfoService as ɵb} from './lib/services/dtg-layerinfo.service';\nexport {DTGLogService as ɵa} from './lib/services/dtg-log.service';"]},"metadata":{},"sourceType":"module"}