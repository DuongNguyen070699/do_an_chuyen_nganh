{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Directive, ViewContainerRef, TemplateRef, Input } from '@angular/core';\nimport { autorun } from 'mobx';\n\nvar TreeMobxAutorunDirective =\n/** @class */\nfunction () {\n  function TreeMobxAutorunDirective(templateRef, viewContainer) {\n    this.templateRef = templateRef;\n    this.viewContainer = viewContainer;\n    this.templateBindings = {};\n  }\n\n  TreeMobxAutorunDirective.prototype.ngOnInit = function () {\n    this.view = this.viewContainer.createEmbeddedView(this.templateRef);\n\n    if (this.dispose) {\n      this.dispose();\n    }\n\n    if (this.shouldDetach()) {\n      this.view.detach();\n    }\n\n    this.autoDetect(this.view);\n  };\n\n  TreeMobxAutorunDirective.prototype.shouldDetach = function () {\n    return this.treeMobxAutorun && this.treeMobxAutorun.detach;\n  };\n\n  TreeMobxAutorunDirective.prototype.autoDetect = function (view) {\n    this.dispose = autorun(function () {\n      return view.detectChanges();\n    });\n  };\n\n  TreeMobxAutorunDirective.prototype.ngOnDestroy = function () {\n    if (this.dispose) {\n      this.dispose();\n    }\n  };\n\n  __decorate([Input(), __metadata(\"design:type\", Object)], TreeMobxAutorunDirective.prototype, \"treeMobxAutorun\", void 0);\n\n  TreeMobxAutorunDirective = __decorate([__metadata(\"design:paramtypes\", [TemplateRef, ViewContainerRef])], TreeMobxAutorunDirective);\n\n  TreeMobxAutorunDirective.ɵfac = function TreeMobxAutorunDirective_Factory(t) {\n    return new (t || TreeMobxAutorunDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  TreeMobxAutorunDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: TreeMobxAutorunDirective,\n    selectors: [[\"\", \"treeMobxAutorun\", \"\"]],\n    inputs: {\n      treeMobxAutorun: \"treeMobxAutorun\"\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TreeMobxAutorunDirective, [{\n      type: Directive,\n      args: [{\n        selector: '[treeMobxAutorun]'\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.TemplateRef\n      }, {\n        type: ɵngcc0.ViewContainerRef\n      }];\n    }, {\n      treeMobxAutorun: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return TreeMobxAutorunDirective;\n}();\n\nexport { TreeMobxAutorunDirective };","map":{"version":3,"sources":["../../lib/mobx-angular/tree-mobx-autorun.directive.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,SACE,SADF,EAEE,gBAFF,EAGE,WAHF,EAME,KANF,QAQO,eARP;AASA,SAAS,OAAT,QAAwB,MAAxB;;AAGA,IAAA,wBAAA;AAAA;AAAA,YAAA;AAME,WAAA,wBAAA,CACY,WADZ,EAEY,aAFZ,EAE2C;AAD/B,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,aAAA,GAAA,aAAA;AAPF,SAAA,gBAAA,GAAmB,EAAnB;AAQN;;AAEJ,EAAA,wBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,SAAK,IAAL,GAAY,KAAK,aAAL,CAAmB,kBAAnB,CAAsC,KAAK,WAA3C,CAAZ;;AAEA,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,OAAL;AACD;;AAED,QAAI,KAAK,YAAL,EAAJ,EAAyB;AACvB,WAAK,IAAL,CAAU,MAAV;AACD;;AACD,SAAK,UAAL,CAAgB,KAAK,IAArB;AACD,GAXD;;AAaA,EAAA,wBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,WAAO,KAAK,eAAL,IAAwB,KAAK,eAAL,CAAqB,MAApD;AACD,GAFD;;AAIA,EAAA,wBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,IAAX,EAAqC;AACnC,SAAK,OAAL,GAAe,OAAO,CAAC,YAAA;AAAM,aAAA,IAAI,CAAJ,aAAA,EAAA;AAAoB,KAA3B,CAAtB;AACD,GAFD;;AAIA,EAAA,wBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,OAAL;AACD;AACF,GAJD;;AA5BS,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAA,MAAA,CAAD,CAAA,EAGD,wBAAA,CAAA,SAHC,EAGD,iBAHC,EAGD,KAHiB,CAAhB,CAAA;;AAJE,EAAA,wBAAwB,GAAA,UAAA,CAA7B,CADP,UAAA,CAAA,mBAAA,EAAsB,CAQI,WARJ,EASM,gBATN,CAAtB,CACO,CAA6B,EAAxB,wBAAwB,CAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCb,G;;AADA,SAAA,wBAAA;AAAC,CArCD,EAAA;;AAsCA,SAtCa,wBAsCb","sourcesContent":["import {\n  Directive,\n  ViewContainerRef,\n  TemplateRef,\n  OnInit,\n  OnDestroy,\n  Input,\n  EmbeddedViewRef\n} from '@angular/core';\nimport { autorun } from 'mobx';\n\n@Directive({ selector: '[treeMobxAutorun]' })\nexport class TreeMobxAutorunDirective implements OnInit, OnDestroy {\n  protected templateBindings = {};\n  protected dispose: any;\n  protected view: EmbeddedViewRef<any>;\n  @Input() treeMobxAutorun;\n\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef\n  ) {}\n\n  ngOnInit() {\n    this.view = this.viewContainer.createEmbeddedView(this.templateRef);\n\n    if (this.dispose) {\n      this.dispose();\n    }\n\n    if (this.shouldDetach()) {\n      this.view.detach();\n    }\n    this.autoDetect(this.view);\n  }\n\n  shouldDetach() {\n    return this.treeMobxAutorun && this.treeMobxAutorun.detach;\n  }\n\n  autoDetect(view: EmbeddedViewRef<any>) {\n    this.dispose = autorun(() => view.detectChanges());\n  }\n\n  ngOnDestroy() {\n    if (this.dispose) {\n      this.dispose();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}