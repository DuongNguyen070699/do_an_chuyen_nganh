{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '../mobx-angular/tree-mobx-autorun.directive';\n\nfunction TreeNodeCheckboxComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeNodeCheckboxComponent_ng_container_0_Template_input_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1.node.mouseAction(\"checkboxClick\", $event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"checked\", ctx_r0.node.isSelected)(\"indeterminate\", ctx_r0.node.isPartiallySelected);\n  }\n}\n\nvar _c0 = function _c0() {\n  return {\n    dontDetach: true\n  };\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { TreeNode } from '../models/tree-node.model';\n\nvar TreeNodeCheckboxComponent =\n/** @class */\nfunction () {\n  function TreeNodeCheckboxComponent() {}\n\n  __decorate([Input(), __metadata(\"design:type\", TreeNode)], TreeNodeCheckboxComponent.prototype, \"node\", void 0);\n\n  TreeNodeCheckboxComponent.ɵfac = function TreeNodeCheckboxComponent_Factory(t) {\n    return new (t || TreeNodeCheckboxComponent)();\n  };\n\n  TreeNodeCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: TreeNodeCheckboxComponent,\n    selectors: [[\"tree-node-checkbox\"]],\n    inputs: {\n      node: \"node\"\n    },\n    decls: 1,\n    vars: 2,\n    consts: [[4, \"treeMobxAutorun\"], [\"type\", \"checkbox\", 1, \"tree-node-checkbox\", 3, \"checked\", \"indeterminate\", \"click\"]],\n    template: function TreeNodeCheckboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TreeNodeCheckboxComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c0));\n      }\n    },\n    directives: [ɵngcc1.TreeMobxAutorunDirective],\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TreeNodeCheckboxComponent, [{\n      type: Component,\n      args: [{\n        selector: 'tree-node-checkbox',\n        encapsulation: ViewEncapsulation.None,\n        styles: [],\n        template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <input\\n        class=\\\"tree-node-checkbox\\\"\\n        type=\\\"checkbox\\\"\\n        (click)=\\\"node.mouseAction('checkboxClick', $event)\\\"\\n        [checked]=\\\"node.isSelected\\\"\\n        [indeterminate]=\\\"node.isPartiallySelected\\\"\\n      />\\n    </ng-container>\\n  \"\n      }]\n    }], function () {\n      return [];\n    }, {\n      node: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return TreeNodeCheckboxComponent;\n}();\n\nexport { TreeNodeCheckboxComponent };","map":{"version":3,"sources":["../../lib/components/tree-node-checkbox.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAT,EAAoB,KAApB,EAA2B,iBAA3B,QAAoD,eAApD;AACA,SAAS,QAAT,QAAyB,2BAAzB;;AAkBA,IAAA,yBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,yBAAA,GAAA,CAEC;;AADU,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAK,QAAL,CAAD,CAAA,EACX,yBAAA,CAAA,SADW,EACX,MADW,EACX,KAD0B,CAAf,CAAA;;AADE,EAAA,yBAAA,CAAA,IAAA,GAAyB,SAhBrC,iCAgBqC,CAhB3B,CAgB2B,EAfpC;AAAA,WAAU,KAAA,CAAA,IAAA,yBAAA,GAAV;AACA,GAcW;;AAdE,EAAA,yBAAoB,CAAA,IAApB,GAAwB,MAAA,CAAA,iBAAA,CAC3B;AAAA,IAAA,IAAA,EACV,yBADU;AACA,IAAA,SAAA,EAAA,CAAA,CAAA,oBAAA,CAAA,CADA;AACA,IAAA,MAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KADA;AACA,IAAA,KAAA,EAAA,CADA;AACA,IAAA,IAAA,EAAA,CADA;AACA,IAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,CAAA,EAAA,oBAAA,EAAA,CAAA,EAAA,SAAA,EAAA,eAAA,EAAA,OAAA,CAAA,CADA;AACA,IAAA,QAAA,EAAA,SAAA,kCAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,UAAA,EAAA,GAAA,CAAA,EAAA;6BAUT,iD,EAIF,C,EAAA,C,EAAA,c,EAAA,C;;;;;;KAfW;iDAAA;;AAAA,GAD2B,CAAxB;;;;;;;;;;;;;;;;;;;AAiBf,G;;AADA,SAAA,yBAAA;AAAC,CAFD,EAAA;;AAGA,SAHa,yBAGb","sourcesContent":["import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { TreeNode } from '../models/tree-node.model';\n\n@Component({\n  selector: 'tree-node-checkbox',\n  encapsulation: ViewEncapsulation.None,\n  styles: [],\n  template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <input\n        class=\"tree-node-checkbox\"\n        type=\"checkbox\"\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\n        [checked]=\"node.isSelected\"\n        [indeterminate]=\"node.isPartiallySelected\"\n      />\n    </ng-container>\n  `\n})\nexport class TreeNodeCheckboxComponent {\n  @Input() node: TreeNode;\n}\n"]},"metadata":{},"sourceType":"module"}