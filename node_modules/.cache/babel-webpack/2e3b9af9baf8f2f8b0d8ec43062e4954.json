{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '../mobx-angular/tree-mobx-autorun.directive';\n\nfunction TreeViewportComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\");\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"height\", ctx_r0.getTotalHeight());\n  }\n}\n\nvar _c0 = function _c0() {\n  return {\n    dontDetach: true\n  };\n};\n\nvar _c1 = [\"*\"];\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component, ElementRef, NgZone } from '@angular/core';\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\nimport { TREE_EVENTS } from '../constants/events';\nimport throttle from 'lodash/throttle';\n\nvar TreeViewportComponent =\n/** @class */\nfunction () {\n  function TreeViewportComponent(elementRef, ngZone, virtualScroll) {\n    var _this = this;\n\n    this.elementRef = elementRef;\n    this.ngZone = ngZone;\n    this.virtualScroll = virtualScroll;\n    this.setViewport = throttle(function () {\n      _this.virtualScroll.setViewport(_this.elementRef.nativeElement);\n    }, 17);\n    this.scrollEventHandler = this.setViewport.bind(this);\n  }\n\n  TreeViewportComponent.prototype.ngOnInit = function () {\n    this.virtualScroll.init();\n  };\n\n  TreeViewportComponent.prototype.ngAfterViewInit = function () {\n    var _this = this;\n\n    setTimeout(function () {\n      _this.setViewport();\n\n      _this.virtualScroll.fireEvent({\n        eventName: TREE_EVENTS.initialized\n      });\n    });\n    var el = this.elementRef.nativeElement;\n    this.ngZone.runOutsideAngular(function () {\n      el.addEventListener('scroll', _this.scrollEventHandler);\n    });\n  };\n\n  TreeViewportComponent.prototype.ngOnDestroy = function () {\n    this.virtualScroll.clear();\n    var el = this.elementRef.nativeElement;\n    el.removeEventListener('scroll', this.scrollEventHandler);\n  };\n\n  TreeViewportComponent.prototype.getTotalHeight = function () {\n    return this.virtualScroll.isEnabled() && this.virtualScroll.totalHeight + 'px' || 'auto';\n  };\n\n  TreeViewportComponent = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgZone, TreeVirtualScroll])], TreeViewportComponent);\n\n  TreeViewportComponent.ɵfac = function TreeViewportComponent_Factory(t) {\n    return new (t || TreeViewportComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(TreeVirtualScroll));\n  };\n\n  TreeViewportComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: TreeViewportComponent,\n    selectors: [[\"tree-viewport\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([TreeVirtualScroll])],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 2,\n    consts: [[4, \"treeMobxAutorun\"]],\n    template: function TreeViewportComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, TreeViewportComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c0));\n      }\n    },\n    directives: [ɵngcc1.TreeMobxAutorunDirective],\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TreeViewportComponent, [{\n      type: Component,\n      args: [{\n        selector: 'tree-viewport',\n        styles: [],\n        providers: [TreeVirtualScroll],\n        template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <div [style.height]=\\\"getTotalHeight()\\\">\\n        <ng-content></ng-content>\\n      </div>\\n    </ng-container>\\n  \"\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc0.NgZone\n      }, {\n        type: TreeVirtualScroll\n      }];\n    }, null);\n  })();\n\n  return TreeViewportComponent;\n}();\n\nexport { TreeViewportComponent };","map":{"version":3,"sources":["../../lib/components/tree-viewport.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACE,SADF,EAEE,UAFF,EAOE,MAPF,QAQO,eARP;AASA,SAAS,iBAAT,QAAkC,qCAAlC;AACA,SAAS,WAAT,QAA4B,qBAA5B;AAEA,OAAO,QAAP,MAAqB,iBAArB;;AAcA,IAAA,qBAAA;AAAA;AAAA,YAAA;AAME,WAAA,qBAAA,CACU,UADV,EAEU,MAFV,EAGS,aAHT,EAGyC;AAHzC,QAAA,KAAA,GAAA,IAAA;;AACU,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACD,SAAA,aAAA,GAAA,aAAA;AART,SAAA,WAAA,GAAc,QAAQ,CAAC,YAAA;AACrB,MAAA,KAAI,CAAC,aAAL,CAAmB,WAAnB,CAA+B,KAAI,CAAC,UAAL,CAAgB,aAA/C;AACD,KAFqB,EAEnB,EAFmB,CAAtB;AAUE,SAAK,kBAAL,GAA0B,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAA1B;AACD;;AAED,EAAA,qBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,SAAK,aAAL,CAAmB,IAAnB;AACD,GAFD;;AAIA,EAAA,qBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,IAAA,UAAU,CAAC,YAAA;AACT,MAAA,KAAI,CAAC,WAAL;;AACA,MAAA,KAAI,CAAC,aAAL,CAAmB,SAAnB,CAA6B;AAAE,QAAA,SAAS,EAAE,WAAW,CAAC;AAAzB,OAA7B;AACD,KAHS,CAAV;AAIA,QAAI,EAAE,GAAgB,KAAK,UAAL,CAAgB,aAAtC;AACA,SAAK,MAAL,CAAY,iBAAZ,CAA8B,YAAA;AAC5B,MAAA,EAAE,CAAC,gBAAH,CAAoB,QAApB,EAA8B,KAAI,CAAC,kBAAnC;AACD,KAFD;AAGD,GATD;;AAWA,EAAA,qBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,SAAK,aAAL,CAAmB,KAAnB;AACA,QAAI,EAAE,GAAgB,KAAK,UAAL,CAAgB,aAAtC;AACA,IAAA,EAAE,CAAC,mBAAH,CAAuB,QAAvB,EAAiC,KAAK,kBAAtC;AACD,GAJD;;AAMA,EAAA,qBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,WACG,KAAK,aAAL,CAAmB,SAAnB,MACC,KAAK,aAAL,CAAmB,WAAnB,GAAiC,IADnC,IAEA,MAHF;AAKD,GAND;;AAnCW,EAAA,qBAAqB,GAAA,UAAA,CAA1B,CAZP,UAAA,CAAA,mBAAA,EACC,CAAQ,UAAR,EAmBkB,MAnBlB,EACQ,iBADR,CADD,CAYO,CAA0B,EATrB,qBASqB,CAArB;;AARX,EAAA,qBAAU,CAAA,IAAV,GAAU,SAAA,6BAAA,CAAA,CAAA,EAAA;AAAA,WAAA,KAAA,CAAA,IAAA,qBAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAOV,iBAPU,CAAA,CAAA;AAOV,GAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDF,G;;AADA,SAAA,qBAAA;AAAC,CA1CD,EAAA;;AA2CA,SA3Ca,qBA2Cb","sourcesContent":["import {\n  Component,\n  ElementRef,\n  ViewEncapsulation,\n  AfterViewInit,\n  OnInit,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\nimport { TREE_EVENTS } from '../constants/events';\nimport { Cancelable } from 'lodash';\nimport throttle from 'lodash/throttle';\n\n@Component({\n  selector: 'tree-viewport',\n  styles: [],\n  providers: [TreeVirtualScroll],\n  template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div [style.height]=\"getTotalHeight()\">\n        <ng-content></ng-content>\n      </div>\n    </ng-container>\n  `\n})\nexport class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {\n  setViewport = throttle(() => {\n    this.virtualScroll.setViewport(this.elementRef.nativeElement);\n  }, 17);\n  private readonly scrollEventHandler: ($event: Event) => void;\n\n  constructor(\n    private elementRef: ElementRef,\n    private ngZone: NgZone,\n    public virtualScroll: TreeVirtualScroll\n  ) {\n    this.scrollEventHandler = this.setViewport.bind(this);\n  }\n\n  ngOnInit() {\n    this.virtualScroll.init();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.setViewport();\n      this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\n    });\n    let el: HTMLElement = this.elementRef.nativeElement;\n    this.ngZone.runOutsideAngular(() => {\n      el.addEventListener('scroll', this.scrollEventHandler);\n    });\n  }\n\n  ngOnDestroy() {\n    this.virtualScroll.clear();\n    let el: HTMLElement = this.elementRef.nativeElement;\n    el.removeEventListener('scroll', this.scrollEventHandler);\n  }\n\n  getTotalHeight() {\n    return (\n      (this.virtualScroll.isEnabled() &&\n        this.virtualScroll.totalHeight + 'px') ||\n      'auto'\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}