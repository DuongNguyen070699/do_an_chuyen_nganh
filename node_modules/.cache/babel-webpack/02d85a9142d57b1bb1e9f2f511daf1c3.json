{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction TreeNodeContent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.node.displayField);\n  }\n}\n\nvar _c0 = function _c0(a0, a1, a2) {\n  return {\n    $implicit: a0,\n    node: a1,\n    index: a2\n  };\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component, Input, ViewEncapsulation, TemplateRef } from '@angular/core';\nimport { TreeNode } from '../models/tree-node.model';\n\nvar TreeNodeContent =\n/** @class */\nfunction () {\n  function TreeNodeContent() {}\n\n  __decorate([Input(), __metadata(\"design:type\", TreeNode)], TreeNodeContent.prototype, \"node\", void 0);\n\n  __decorate([Input(), __metadata(\"design:type\", Number)], TreeNodeContent.prototype, \"index\", void 0);\n\n  __decorate([Input(), __metadata(\"design:type\", TemplateRef)], TreeNodeContent.prototype, \"template\", void 0);\n\n  TreeNodeContent.ɵfac = function TreeNodeContent_Factory(t) {\n    return new (t || TreeNodeContent)();\n  };\n\n  TreeNodeContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: TreeNodeContent,\n    selectors: [[\"tree-node-content\"]],\n    inputs: {\n      node: \"node\",\n      index: \"index\",\n      template: \"template\"\n    },\n    decls: 2,\n    vars: 7,\n    consts: [[4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TreeNodeContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TreeNodeContent_span_0_Template, 2, 1, \"span\", 0);\n        ɵngcc0.ɵɵelementContainer(1, 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction3(3, _c0, ctx.node, ctx.node, ctx.index));\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TreeNodeContent, [{\n      type: Component,\n      args: [{\n        selector: 'tree-node-content',\n        encapsulation: ViewEncapsulation.None,\n        template: \"\\n  <span *ngIf=\\\"!template\\\">{{ node.displayField }}</span>\\n  <ng-container\\n    [ngTemplateOutlet]=\\\"template\\\"\\n    [ngTemplateOutletContext]=\\\"{ $implicit: node, node: node, index: index }\\\">\\n  </ng-container>\"\n      }]\n    }], function () {\n      return [];\n    }, {\n      node: [{\n        type: Input\n      }],\n      index: [{\n        type: Input\n      }],\n      template: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return TreeNodeContent;\n}();\n\nexport { TreeNodeContent };","map":{"version":3,"sources":["../../lib/components/tree-node-content.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAT,EAAoB,KAApB,EAA2B,iBAA3B,EAA8C,WAA9C,QAAiE,eAAjE;AACA,SAAS,QAAT,QAAyB,2BAAzB;;AAYA,IAAA,eAAA;AAAA;AAAA,YAAA;AAAA,WAAA,eAAA,GAAA,CAIC;;AAHU,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAK,QAAL,CAAD,CAAA,EACX,eAAA,CAAA,SADW,EACX,MADW,EACX,KAD0B,CAAf,CAAA;;AACA,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAA,MAAA,CAAD,CAAA,EACiB,eAAA,CAAA,SADjB,EACiB,OADjB,EACiB,KADH,CAAd,CAAA;;AACA,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAS,WAAT,CAAD,CAAA,EAAuB,eAAA,CAAA,SAAvB,EAAuB,UAAvB,EAAuB,KAAA,CAAvB,CAAA;;AAHE,EAAA,eAAA,CAAA,IAAA,GAAe,SAV3B,uBAU2B,CAVjB,CAUiB,EAVjB;AAAA,WACT,KAAA,CAAA,IAAU,eAAV,GADS;AACoB,GASlB;;AARX,EAAA,eAAA,CAAA,IAAA,GAAa,MAAE,CAAA,iBAAF,CAAwB;AAAA,IAAA,IAAA,EAAA,eAAA;AAC3B,IAAA,SAAA,EAAA,CAAA,CAAA,mBAAA,CAAA,CAD2B;AAC3B,IAAA,MAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,KAAA,EAAA,OAAA;AAAA,MAAA,QAAA,EAAA;AAAA,KAD2B;AAC3B,IAAA,KAAA,EAAA,CAD2B;AAC3B,IAAA,IAAA,EAAA,CAD2B;AAC3B,IAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,kBAAA,EAAA,yBAAA,CAAA,CAD2B;AAC3B,IAAA,QAAA,EAAA,SAAA,wBAAA,CAOC,EAPD,EAOC,GAPD,EAOC;AAAe,UAI3B,EAAA,GAAA,CAJ2B,EAI3B;;;;;;;;;;KAZsC;sDAAA;;AAAA,GAAxB,CAAb;;;;;;;;;;;;;;;;;;;;;;;;AAaF,G;;AADA,SAAA,eAAA;AAAC,CAJD,EAAA;;AAKA,SALa,eAKb","sourcesContent":["import { Component, Input, ViewEncapsulation, TemplateRef } from '@angular/core';\nimport { TreeNode } from '../models/tree-node.model';\n\n@Component({\n  selector: 'tree-node-content',\n  encapsulation: ViewEncapsulation.None,\n  template: `\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\n  <ng-container\n    [ngTemplateOutlet]=\"template\"\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\n  </ng-container>`,\n})\nexport class TreeNodeContent {\n  @Input() node: TreeNode;\n  @Input() index: number;\n  @Input() template: TemplateRef<any>;\n}\n"]},"metadata":{},"sourceType":"module"}