{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './tree-viewport.component';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from './tree-node-collection.component';\nimport * as ɵngcc4 from './tree-node-drop-slot.component';\nvar _c0 = [\"loadingTemplate\"];\nvar _c1 = [\"treeNodeTemplate\"];\nvar _c2 = [\"treeNodeWrapperTemplate\"];\nvar _c3 = [\"treeNodeFullTemplate\"];\nvar _c4 = [\"viewport\"];\n\nvar _c5 = function _c5(a0, a1, a2, a3) {\n  return {\n    loadingTemplate: a0,\n    treeNodeTemplate: a1,\n    treeNodeWrapperTemplate: a2,\n    treeNodeFullTemplate: a3\n  };\n};\n\nfunction TreeComponent_tree_node_collection_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-node-collection\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nodes\", ctx_r1.treeModel.roots)(\"treeModel\", ctx_r1.treeModel)(\"templates\", ɵngcc0.ɵɵpureFunction4(3, _c5, ctx_r1.loadingTemplate, ctx_r1.treeNodeTemplate, ctx_r1.treeNodeWrapperTemplate, ctx_r1.treeNodeFullTemplate));\n  }\n}\n\nfunction TreeComponent_tree_node_drop_slot_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-node-drop-slot\", 5);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"dropIndex\", 0)(\"node\", ctx_r2.treeModel.virtualRoot);\n  }\n}\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component, ContentChild, EventEmitter, HostListener, Input, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { TreeModel } from '../models/tree.model';\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\nimport { TreeOptions } from '../models/tree-options.model';\nimport { TreeViewportComponent } from './tree-viewport.component';\nimport includes from 'lodash/includes';\nimport pick from 'lodash/pick';\n\nvar TreeComponent =\n/** @class */\nfunction () {\n  function TreeComponent(treeModel, treeDraggedElement) {\n    var _this = this;\n\n    this.treeModel = treeModel;\n    this.treeDraggedElement = treeDraggedElement;\n    treeModel.eventNames.forEach(function (name) {\n      return _this[name] = new EventEmitter();\n    });\n    treeModel.subscribeToState(function (state) {\n      return _this.stateChange.emit(state);\n    });\n  }\n\n  Object.defineProperty(TreeComponent.prototype, \"nodes\", {\n    // Will be handled in ngOnChanges\n    set: function set(nodes) {},\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  Object.defineProperty(TreeComponent.prototype, \"options\", {\n    set: function set(options) {},\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  Object.defineProperty(TreeComponent.prototype, \"focused\", {\n    set: function set(value) {\n      this.treeModel.setFocus(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeComponent.prototype, \"state\", {\n    set: function set(state) {\n      this.treeModel.setState(state);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeComponent.prototype.onKeydown = function ($event) {\n    if (!this.treeModel.isFocused) return;\n    if (includes(['input', 'textarea'], document.activeElement.tagName.toLowerCase())) return;\n    var focusedNode = this.treeModel.getFocusedNode();\n    this.treeModel.performKeyAction(focusedNode, $event);\n  };\n\n  TreeComponent.prototype.onMousedown = function ($event) {\n    function isOutsideClick(startElement, nodeName) {\n      return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\n    }\n\n    if (isOutsideClick($event.target, 'tree-root')) {\n      this.treeModel.setFocus(false);\n    }\n  };\n\n  TreeComponent.prototype.ngOnChanges = function (changes) {\n    if (changes.options || changes.nodes) {\n      this.treeModel.setData({\n        options: changes.options && changes.options.currentValue,\n        nodes: changes.nodes && changes.nodes.currentValue,\n        events: pick(this, this.treeModel.eventNames)\n      });\n    }\n  };\n\n  TreeComponent.prototype.sizeChanged = function () {\n    this.viewportComponent.setViewport();\n  };\n\n  __decorate([ContentChild('loadingTemplate', {\n    static: false\n  }), __metadata(\"design:type\", TemplateRef)], TreeComponent.prototype, \"loadingTemplate\", void 0);\n\n  __decorate([ContentChild('treeNodeTemplate', {\n    static: false\n  }), __metadata(\"design:type\", TemplateRef)], TreeComponent.prototype, \"treeNodeTemplate\", void 0);\n\n  __decorate([ContentChild('treeNodeWrapperTemplate', {\n    static: false\n  }), __metadata(\"design:type\", TemplateRef)], TreeComponent.prototype, \"treeNodeWrapperTemplate\", void 0);\n\n  __decorate([ContentChild('treeNodeFullTemplate', {\n    static: false\n  }), __metadata(\"design:type\", TemplateRef)], TreeComponent.prototype, \"treeNodeFullTemplate\", void 0);\n\n  __decorate([ViewChild('viewport', {\n    static: false\n  }), __metadata(\"design:type\", TreeViewportComponent)], TreeComponent.prototype, \"viewportComponent\", void 0);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], TreeComponent.prototype, \"nodes\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", TreeOptions), __metadata(\"design:paramtypes\", [TreeOptions])], TreeComponent.prototype, \"options\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], TreeComponent.prototype, \"focused\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], TreeComponent.prototype, \"state\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"toggleExpanded\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"activate\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"deactivate\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"nodeActivate\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"nodeDeactivate\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"select\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"deselect\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"focus\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"blur\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"updateData\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"initialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"moveNode\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"copyNode\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"loadNodeChildren\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"changeFilter\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"event\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", Object)], TreeComponent.prototype, \"stateChange\", void 0);\n\n  __decorate([HostListener('body: keydown', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeComponent.prototype, \"onKeydown\", null);\n\n  __decorate([HostListener('body: mousedown', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeComponent.prototype, \"onMousedown\", null);\n\n  TreeComponent = __decorate([__metadata(\"design:paramtypes\", [TreeModel, TreeDraggedElement])], TreeComponent);\n\n  TreeComponent.ɵfac = function TreeComponent_Factory(t) {\n    return new (t || TreeComponent)(ɵngcc0.ɵɵdirectiveInject(TreeModel), ɵngcc0.ɵɵdirectiveInject(TreeDraggedElement));\n  };\n\n  TreeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: TreeComponent,\n    selectors: [[\"Tree\"], [\"tree-root\"]],\n    contentQueries: function TreeComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c3, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeWrapperTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeFullTemplate = _t.first);\n      }\n    },\n    viewQuery: function TreeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c4, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewportComponent = _t.first);\n      }\n    },\n    hostBindings: function TreeComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function TreeComponent_keydown_HostBindingHandler($event) {\n          return ctx.onKeydown($event);\n        }, false, ɵngcc0.ɵɵresolveBody)(\"mousedown\", function TreeComponent_mousedown_HostBindingHandler($event) {\n          return ctx.onMousedown($event);\n        }, false, ɵngcc0.ɵɵresolveBody);\n      }\n    },\n    inputs: {\n      nodes: \"nodes\",\n      options: \"options\",\n      focused: \"focused\",\n      state: \"state\"\n    },\n    outputs: {\n      toggleExpanded: \"toggleExpanded\",\n      activate: \"activate\",\n      deactivate: \"deactivate\",\n      nodeActivate: \"nodeActivate\",\n      nodeDeactivate: \"nodeDeactivate\",\n      select: \"select\",\n      deselect: \"deselect\",\n      focus: \"focus\",\n      blur: \"blur\",\n      updateData: \"updateData\",\n      initialized: \"initialized\",\n      moveNode: \"moveNode\",\n      copyNode: \"copyNode\",\n      loadNodeChildren: \"loadNodeChildren\",\n      changeFilter: \"changeFilter\",\n      event: \"event\",\n      stateChange: \"stateChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TreeModel]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 5,\n    vars: 6,\n    consts: [[\"viewport\", \"\"], [1, \"angular-tree-component\"], [3, \"nodes\", \"treeModel\", \"templates\", 4, \"ngIf\"], [\"class\", \"empty-tree-drop-slot\", 3, \"dropIndex\", \"node\", 4, \"ngIf\"], [3, \"nodes\", \"treeModel\", \"templates\"], [1, \"empty-tree-drop-slot\", 3, \"dropIndex\", \"node\"]],\n    template: function TreeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"tree-viewport\", null, 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(3, TreeComponent_tree_node_collection_3_Template, 1, 8, \"tree-node-collection\", 2);\n        ɵngcc0.ɵɵtemplate(4, TreeComponent_tree_node_drop_slot_4_Template, 1, 2, \"tree-node-drop-slot\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"node-dragging\", ctx.treeDraggedElement.isDragging())(\"angular-tree-component-rtl\", ctx.treeModel.options.rtl);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.treeModel.roots);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.treeModel.isEmptyTree());\n      }\n    },\n    directives: [ɵngcc1.TreeViewportComponent, ɵngcc2.NgIf, ɵngcc3.TreeNodeCollectionComponent, ɵngcc4.TreeNodeDropSlot],\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TreeComponent, [{\n      type: Component,\n      args: [{\n        selector: 'Tree, tree-root',\n        providers: [TreeModel],\n        styles: [],\n        template: \"\\n      <tree-viewport #viewport>\\n          <div\\n                  class=\\\"angular-tree-component\\\"\\n                  [class.node-dragging]=\\\"treeDraggedElement.isDragging()\\\"\\n                  [class.angular-tree-component-rtl]=\\\"treeModel.options.rtl\\\">\\n              <tree-node-collection\\n                      *ngIf=\\\"treeModel.roots\\\"\\n                      [nodes]=\\\"treeModel.roots\\\"\\n                      [treeModel]=\\\"treeModel\\\"\\n                      [templates]=\\\"{\\n            loadingTemplate: loadingTemplate,\\n            treeNodeTemplate: treeNodeTemplate,\\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\\n            treeNodeFullTemplate: treeNodeFullTemplate\\n          }\\\">\\n              </tree-node-collection>\\n              <tree-node-drop-slot\\n                      class=\\\"empty-tree-drop-slot\\\"\\n                      *ngIf=\\\"treeModel.isEmptyTree()\\\"\\n                      [dropIndex]=\\\"0\\\"\\n                      [node]=\\\"treeModel.virtualRoot\\\">\\n              </tree-node-drop-slot>\\n          </div>\\n      </tree-viewport>\\n  \"\n      }]\n    }], function () {\n      return [{\n        type: TreeModel\n      }, {\n        type: TreeDraggedElement\n      }];\n    }, {\n      nodes: [{\n        type: Input\n      }],\n      options: [{\n        type: Input\n      }],\n      focused: [{\n        type: Input\n      }],\n      state: [{\n        type: Input\n      }],\n      onKeydown: [{\n        type: HostListener,\n        args: ['body: keydown', ['$event']]\n      }],\n      onMousedown: [{\n        type: HostListener,\n        args: ['body: mousedown', ['$event']]\n      }],\n      loadingTemplate: [{\n        type: ContentChild,\n        args: ['loadingTemplate', {\n          static: false\n        }]\n      }],\n      treeNodeTemplate: [{\n        type: ContentChild,\n        args: ['treeNodeTemplate', {\n          static: false\n        }]\n      }],\n      treeNodeWrapperTemplate: [{\n        type: ContentChild,\n        args: ['treeNodeWrapperTemplate', {\n          static: false\n        }]\n      }],\n      treeNodeFullTemplate: [{\n        type: ContentChild,\n        args: ['treeNodeFullTemplate', {\n          static: false\n        }]\n      }],\n      viewportComponent: [{\n        type: ViewChild,\n        args: ['viewport', {\n          static: false\n        }]\n      }],\n      toggleExpanded: [{\n        type: Output\n      }],\n      activate: [{\n        type: Output\n      }],\n      deactivate: [{\n        type: Output\n      }],\n      nodeActivate: [{\n        type: Output\n      }],\n      nodeDeactivate: [{\n        type: Output\n      }],\n      select: [{\n        type: Output\n      }],\n      deselect: [{\n        type: Output\n      }],\n      focus: [{\n        type: Output\n      }],\n      blur: [{\n        type: Output\n      }],\n      updateData: [{\n        type: Output\n      }],\n      initialized: [{\n        type: Output\n      }],\n      moveNode: [{\n        type: Output\n      }],\n      copyNode: [{\n        type: Output\n      }],\n      loadNodeChildren: [{\n        type: Output\n      }],\n      changeFilter: [{\n        type: Output\n      }],\n      event: [{\n        type: Output\n      }],\n      stateChange: [{\n        type: Output\n      }]\n    });\n  })();\n\n  return TreeComponent;\n}();\n\nexport { TreeComponent };","map":{"version":3,"sources":["../../lib/components/tree.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, ContentChild, EventEmitter, HostListener, Input, OnChanges, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { TreeModel } from '../models/tree.model';\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\nimport { TreeOptions } from '../models/tree-options.model';\nimport { TreeViewportComponent } from './tree-viewport.component';\n\nimport includes from 'lodash/includes';\nimport pick from 'lodash/pick';\n\n@Component({\n  selector: 'Tree, tree-root',\n  providers: [TreeModel],\n  styles: [],\n  template: `\n      <tree-viewport #viewport>\n          <div\n                  class=\"angular-tree-component\"\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\n              <tree-node-collection\n                      *ngIf=\"treeModel.roots\"\n                      [nodes]=\"treeModel.roots\"\n                      [treeModel]=\"treeModel\"\n                      [templates]=\"{\n            loadingTemplate: loadingTemplate,\n            treeNodeTemplate: treeNodeTemplate,\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\n            treeNodeFullTemplate: treeNodeFullTemplate\n          }\">\n              </tree-node-collection>\n              <tree-node-drop-slot\n                      class=\"empty-tree-drop-slot\"\n                      *ngIf=\"treeModel.isEmptyTree()\"\n                      [dropIndex]=\"0\"\n                      [node]=\"treeModel.virtualRoot\">\n              </tree-node-drop-slot>\n          </div>\n      </tree-viewport>\n  `\n})\nexport class TreeComponent implements OnChanges {\n  _nodes: any[];\n  _options: TreeOptions;\n\n  @ContentChild('loadingTemplate', { static: false }) loadingTemplate: TemplateRef<any>;\n  @ContentChild('treeNodeTemplate', { static: false }) treeNodeTemplate: TemplateRef<any>;\n  @ContentChild('treeNodeWrapperTemplate', { static: false }) treeNodeWrapperTemplate: TemplateRef<any>;\n  @ContentChild('treeNodeFullTemplate', { static: false }) treeNodeFullTemplate: TemplateRef<any>;\n  @ViewChild('viewport', { static: false }) viewportComponent: TreeViewportComponent;\n\n  // Will be handled in ngOnChanges\n  @Input() set nodes(nodes: any[]) {\n  };\n\n  @Input() set options(options: TreeOptions) {\n  };\n\n  @Input() set focused(value: boolean) {\n    this.treeModel.setFocus(value);\n  }\n\n  @Input() set state(state) {\n    this.treeModel.setState(state);\n  }\n\n  @Output() toggleExpanded;\n  @Output() activate;\n  @Output() deactivate;\n  @Output() nodeActivate;\n  @Output() nodeDeactivate;\n  @Output() select;\n  @Output() deselect;\n  @Output() focus;\n  @Output() blur;\n  @Output() updateData;\n  @Output() initialized;\n  @Output() moveNode;\n  @Output() copyNode;\n  @Output() loadNodeChildren;\n  @Output() changeFilter;\n  @Output() event;\n  @Output() stateChange;\n\n  constructor(\n    public treeModel: TreeModel,\n    public treeDraggedElement: TreeDraggedElement) {\n\n    treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\n    treeModel.subscribeToState((state) => this.stateChange.emit(state));\n  }\n\n  @HostListener('body: keydown', ['$event'])\n  onKeydown($event) {\n    if (!this.treeModel.isFocused) return;\n    if (includes(['input', 'textarea'],\n      document.activeElement.tagName.toLowerCase())) return;\n\n    const focusedNode = this.treeModel.getFocusedNode();\n\n    this.treeModel.performKeyAction(focusedNode, $event);\n  }\n\n  @HostListener('body: mousedown', ['$event'])\n  onMousedown($event) {\n    function isOutsideClick(startElement: Element, nodeName: string) {\n      return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\n    }\n\n    if (isOutsideClick($event.target, 'tree-root')) {\n      this.treeModel.setFocus(false);\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes.options || changes.nodes) {\n      this.treeModel.setData({\n        options: changes.options && changes.options.currentValue,\n        nodes: changes.nodes && changes.nodes.currentValue,\n        events: pick(this, this.treeModel.eventNames)\n      });\n    }\n  }\n\n  sizeChanged() {\n    this.viewportComponent.setViewport();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}