{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\n\nfunction TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-node\", 2);\n  }\n\n  if (rf & 2) {\n    var node_r2 = ctx.$implicit;\n    var i_r3 = ctx.index;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"node\", node_r2)(\"index\", i_r3)(\"templates\", ctx_r1.templates);\n  }\n}\n\nfunction TreeNodeCollectionComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\");\n    ɵngcc0.ɵɵtemplate(2, TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template, 1, 3, \"tree-node\", 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"margin-top\", ctx_r0.marginTop);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.viewportNodes)(\"ngForTrackBy\", ctx_r0.trackNode);\n  }\n}\n\nvar _c0 = function _c0() {\n  return {\n    dontDetach: true\n  };\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { reaction } from 'mobx';\nimport { observable, computed, action } from '../mobx-angular/mobx-proxy';\nimport { TreeModel } from '../models/tree.model';\n\nvar TreeNodeCollectionComponent =\n/** @class */\nfunction () {\n  function TreeNodeCollectionComponent() {\n    this._dispose = [];\n  }\n\n  Object.defineProperty(TreeNodeCollectionComponent.prototype, \"nodes\", {\n    get: function get() {\n      return this._nodes;\n    },\n    set: function set(nodes) {\n      this.setNodes(nodes);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNodeCollectionComponent.prototype, \"marginTop\", {\n    get: function get() {\n      var firstNode = this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\n      var relativePosition = firstNode && firstNode.parent ? firstNode.position - firstNode.parent.position - firstNode.parent.getSelfHeight() : 0;\n      return relativePosition + \"px\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeNodeCollectionComponent.prototype.setNodes = function (nodes) {\n    this._nodes = nodes;\n  };\n\n  TreeNodeCollectionComponent.prototype.ngOnInit = function () {\n    var _this = this;\n\n    this.virtualScroll = this.treeModel.virtualScroll;\n    this._dispose = [// return node indexes so we can compare structurally,\n    reaction(function () {\n      return _this.virtualScroll.getViewportNodes(_this.nodes).map(function (n) {\n        return n.index;\n      });\n    }, function (nodeIndexes) {\n      _this.viewportNodes = nodeIndexes.map(function (i) {\n        return _this.nodes[i];\n      });\n    }, {\n      compareStructural: true,\n      fireImmediately: true\n    }), reaction(function () {\n      return _this.nodes;\n    }, function (nodes) {\n      _this.viewportNodes = _this.virtualScroll.getViewportNodes(nodes);\n    })];\n  };\n\n  TreeNodeCollectionComponent.prototype.ngOnDestroy = function () {\n    this._dispose.forEach(function (d) {\n      return d();\n    });\n  };\n\n  TreeNodeCollectionComponent.prototype.trackNode = function (index, node) {\n    return node.id;\n  };\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], TreeNodeCollectionComponent.prototype, \"nodes\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", TreeModel)], TreeNodeCollectionComponent.prototype, \"treeModel\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", Object)], TreeNodeCollectionComponent.prototype, \"_nodes\", void 0);\n\n  __decorate([Input(), __metadata(\"design:type\", Object)], TreeNodeCollectionComponent.prototype, \"templates\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", Array)], TreeNodeCollectionComponent.prototype, \"viewportNodes\", void 0);\n\n  __decorate([computed, __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [])], TreeNodeCollectionComponent.prototype, \"marginTop\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeNodeCollectionComponent.prototype, \"setNodes\", null);\n\n  TreeNodeCollectionComponent.ɵfac = function TreeNodeCollectionComponent_Factory(t) {\n    return new (t || TreeNodeCollectionComponent)();\n  };\n\n  TreeNodeCollectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: TreeNodeCollectionComponent,\n    selectors: [[\"tree-node-collection\"]],\n    inputs: {\n      nodes: \"nodes\",\n      treeModel: \"treeModel\",\n      templates: \"templates\"\n    },\n    decls: 1,\n    vars: 2,\n    consts: [[4, \"treeMobxAutorun\"], [3, \"node\", \"index\", \"templates\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"node\", \"index\", \"templates\"]],\n    template: function TreeNodeCollectionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TreeNodeCollectionComponent_ng_container_0_Template, 3, 4, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c0));\n      }\n    },\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TreeNodeCollectionComponent, [{\n      type: Component,\n      args: [{\n        selector: 'tree-node-collection',\n        encapsulation: ViewEncapsulation.None,\n        template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <div [style.margin-top]=\\\"marginTop\\\">\\n        <tree-node\\n          *ngFor=\\\"let node of viewportNodes; let i = index; trackBy: trackNode\\\"\\n          [node]=\\\"node\\\"\\n          [index]=\\\"i\\\"\\n          [templates]=\\\"templates\\\"\\n        >\\n        </tree-node>\\n      </div>\\n    </ng-container>\\n  \"\n      }]\n    }], function () {\n      return [];\n    }, {\n      nodes: [{\n        type: Input\n      }],\n      treeModel: [{\n        type: Input\n      }],\n      templates: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return TreeNodeCollectionComponent;\n}();\n\nexport { TreeNodeCollectionComponent };","map":{"version":3,"sources":["../../lib/components/tree-node-collection.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\nimport { reaction } from 'mobx';\nimport { observable, computed, action } from '../mobx-angular/mobx-proxy';\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\nimport { TreeNode } from '../models/tree-node.model';\nimport { TreeModel } from '../models/tree.model';\n\n@Component({\n  selector: 'tree-node-collection',\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div [style.margin-top]=\"marginTop\">\n        <tree-node\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\n          [node]=\"node\"\n          [index]=\"i\"\n          [templates]=\"templates\"\n        >\n        </tree-node>\n      </div>\n    </ng-container>\n  `\n})\nexport class TreeNodeCollectionComponent implements OnInit, OnDestroy {\n  @Input()\n  get nodes() {\n    return this._nodes;\n  }\n  set nodes(nodes) {\n    this.setNodes(nodes);\n  }\n\n  @Input() treeModel: TreeModel;\n\n  @observable _nodes;\n  private virtualScroll: TreeVirtualScroll; // Cannot inject this, because we might be inside treeNodeTemplateFull\n  @Input() templates;\n\n  @observable viewportNodes: TreeNode[];\n\n  @computed get marginTop(): string {\n    const firstNode =\n      this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\n    const relativePosition =\n      firstNode && firstNode.parent\n        ? firstNode.position -\n          firstNode.parent.position -\n          firstNode.parent.getSelfHeight()\n        : 0;\n\n    return `${relativePosition}px`;\n  }\n\n  _dispose = [];\n\n  @action setNodes(nodes) {\n    this._nodes = nodes;\n  }\n\n  ngOnInit() {\n    this.virtualScroll = this.treeModel.virtualScroll;\n    this._dispose = [\n      // return node indexes so we can compare structurally,\n      reaction(\n        () => {\n          return this.virtualScroll\n            .getViewportNodes(this.nodes)\n            .map(n => n.index);\n        },\n        nodeIndexes => {\n          this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\n        },\n        { compareStructural: true, fireImmediately: true } as any\n      ),\n      reaction(\n        () => this.nodes,\n        nodes => {\n          this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\n        }\n      )\n    ];\n  }\n\n  ngOnDestroy() {\n    this._dispose.forEach(d => d());\n  }\n\n  trackNode(index, node) {\n    return node.id;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}