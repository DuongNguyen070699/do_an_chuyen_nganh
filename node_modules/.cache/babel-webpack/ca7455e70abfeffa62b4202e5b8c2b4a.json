{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '../mobx-angular/tree-mobx-autorun.directive';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction TreeNodeExpanderComponent_ng_container_0_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 3);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeNodeExpanderComponent_ng_container_0_span_1_Template_span_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r3.node.mouseAction(\"expanderClick\", $event);\n    });\n    ɵngcc0.ɵɵelement(1, \"span\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassProp(\"toggle-children-wrapper-expanded\", ctx_r1.node.isExpanded)(\"toggle-children-wrapper-collapsed\", ctx_r1.node.isCollapsed);\n  }\n}\n\nfunction TreeNodeExpanderComponent_ng_container_0_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 5);\n  }\n}\n\nfunction TreeNodeExpanderComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TreeNodeExpanderComponent_ng_container_0_span_1_Template, 2, 4, \"span\", 1);\n    ɵngcc0.ɵɵtemplate(2, TreeNodeExpanderComponent_ng_container_0_span_2_Template, 1, 0, \"span\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.node.hasChildren);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.node.hasChildren);\n  }\n}\n\nvar _c0 = function _c0() {\n  return {\n    dontDetach: true\n  };\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { TreeNode } from '../models/tree-node.model';\n\nvar TreeNodeExpanderComponent =\n/** @class */\nfunction () {\n  function TreeNodeExpanderComponent() {}\n\n  __decorate([Input(), __metadata(\"design:type\", TreeNode)], TreeNodeExpanderComponent.prototype, \"node\", void 0);\n\n  TreeNodeExpanderComponent.ɵfac = function TreeNodeExpanderComponent_Factory(t) {\n    return new (t || TreeNodeExpanderComponent)();\n  };\n\n  TreeNodeExpanderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: TreeNodeExpanderComponent,\n    selectors: [[\"tree-node-expander\"]],\n    inputs: {\n      node: \"node\"\n    },\n    decls: 1,\n    vars: 2,\n    consts: [[4, \"treeMobxAutorun\"], [\"class\", \"toggle-children-wrapper\", 3, \"toggle-children-wrapper-expanded\", \"toggle-children-wrapper-collapsed\", \"click\", 4, \"ngIf\"], [\"class\", \"toggle-children-placeholder\", 4, \"ngIf\"], [1, \"toggle-children-wrapper\", 3, \"click\"], [1, \"toggle-children\"], [1, \"toggle-children-placeholder\"]],\n    template: function TreeNodeExpanderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TreeNodeExpanderComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c0));\n      }\n    },\n    directives: [ɵngcc1.TreeMobxAutorunDirective, ɵngcc2.NgIf],\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TreeNodeExpanderComponent, [{\n      type: Component,\n      args: [{\n        selector: 'tree-node-expander',\n        encapsulation: ViewEncapsulation.None,\n        styles: [],\n        template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <span\\n        *ngIf=\\\"node.hasChildren\\\"\\n        [class.toggle-children-wrapper-expanded]=\\\"node.isExpanded\\\"\\n        [class.toggle-children-wrapper-collapsed]=\\\"node.isCollapsed\\\"\\n        class=\\\"toggle-children-wrapper\\\"\\n        (click)=\\\"node.mouseAction('expanderClick', $event)\\\"\\n      >\\n        <span class=\\\"toggle-children\\\"></span>\\n      </span>\\n      <span *ngIf=\\\"!node.hasChildren\\\" class=\\\"toggle-children-placeholder\\\">\\n      </span>\\n    </ng-container>\\n  \"\n      }]\n    }], function () {\n      return [];\n    }, {\n      node: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return TreeNodeExpanderComponent;\n}();\n\nexport { TreeNodeExpanderComponent };","map":{"version":3,"sources":["../../lib/components/tree-node-expander.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAT,EAAoB,KAApB,EAA2B,iBAA3B,QAAoD,eAApD;AACA,SAAS,QAAT,QAAyB,2BAAzB;;AAsBA,IAAA,yBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,yBAAA,GAAA,CAEC;;AADU,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAK,QAAL,CAAD,CAAA,EACX,yBAAA,CAAA,SADW,EACX,MADW,EACX,KAD0B,CAAf,CAAA;;AADE,EAAA,yBAAA,CAAA,IAAA,GAAyB,SApBrC,iCAoBqC,CApB3B,CAoB2B,EAnBpC;AAAA,WAAU,KAAA,CAAA,IAAA,yBAAA,GAAV;AACA,GAkBW;;AAlBE,EAAA,yBAAoB,CAAA,IAApB,GAAwB,MAAA,CAAA,iBAAA,CAC3B;AAAA,IAAA,IAAA,EACV,yBADU;AACA,IAAA,SAAA,EAAA,CAAA,CAAA,oBAAA,CAAA,CADA;AACA,IAAA,MAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KADA;AACA,IAAA,KAAA,EAAA,CADA;AACA,IAAA,IAAA,EAAA,CADA;AACA,IAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,OAAA,EAAA,yBAAA,EAAA,CAAA,EAAA,kCAAA,EAAA,mCAAA,EAAA,OAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,OAAA,EAAA,6BAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,yBAAA,EAAA,CAAA,EAAA,OAAA,CAAA,EAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,6BAAA,CAAA,CADA;AACA,IAAA,QAAA,EAAA,SAAA,kCAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,UAAA,EAAA,GAAA,CAAA,EAAA;6BAcT,iD,EAEU,C,EAAA,C,EAAA,c,EAEZ,C;;;;;;KAnBW;8DAAA;;AAAA,GAD2B,CAAxB;;;;;;;;;;;;;;;;;;;AAqBf,G;;AADA,SAAA,yBAAA;AAAC,CAFD,EAAA;;AAGA,SAHa,yBAGb","sourcesContent":["import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { TreeNode } from '../models/tree-node.model';\n\n@Component({\n  selector: 'tree-node-expander',\n  encapsulation: ViewEncapsulation.None,\n  styles: [],\n  template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <span\n        *ngIf=\"node.hasChildren\"\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\n        class=\"toggle-children-wrapper\"\n        (click)=\"node.mouseAction('expanderClick', $event)\"\n      >\n        <span class=\"toggle-children\"></span>\n      </span>\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\n      </span>\n    </ng-container>\n  `\n})\nexport class TreeNodeExpanderComponent {\n  @Input() node: TreeNode;\n}\n"]},"metadata":{},"sourceType":"module"}