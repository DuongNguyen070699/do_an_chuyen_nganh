{"ast":null,"code":"import _defineProperty from \"/Users/nguyennha/do-an-chuyen-nganh/do_an_chuyen_nganh/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/nguyennha/do-an-chuyen-nganh/do_an_chuyen_nganh/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/nguyennha/do-an-chuyen-nganh/do_an_chuyen_nganh/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/nguyennha/do-an-chuyen-nganh/do_an_chuyen_nganh/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/nguyennha/do-an-chuyen-nganh/do_an_chuyen_nganh/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/nguyennha/do-an-chuyen-nganh/do_an_chuyen_nganh/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/Users/nguyennha/do-an-chuyen-nganh/do_an_chuyen_nganh/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { HttpParams } from '@angular/common/http';\nimport { stringify } from 'qs';\n\nvar RequestQueryException = /*#__PURE__*/function (_Error) {\n  _inherits(RequestQueryException, _Error);\n\n  var _super = _createSuper(RequestQueryException);\n\n  function RequestQueryException(msg) {\n    _classCallCheck(this, RequestQueryException);\n\n    return _super.call(this, msg);\n  }\n\n  return RequestQueryException;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar objKeys = function objKeys(val) {\n  return Object.keys(val);\n};\n\nvar getOwnPropNames = function getOwnPropNames(val) {\n  return Object.getOwnPropertyNames(val);\n};\n\nvar isUndefined = function isUndefined(val) {\n  return typeof val === 'undefined';\n};\n\nvar isNull = function isNull(val) {\n  return val === null;\n};\n\nvar isNil = function isNil(val) {\n  return isUndefined(val) || isNull(val);\n};\n\nvar isString = function isString(val) {\n  return typeof val === 'string';\n};\n\nvar hasLength = function hasLength(val) {\n  return val.length > 0;\n};\n\nvar isStringFull = function isStringFull(val) {\n  return isString(val) && hasLength(val);\n};\n\nvar isArrayFull = function isArrayFull(val) {\n  return Array.isArray(val) && hasLength(val);\n};\n\nvar isArrayStrings = function isArrayStrings(val) {\n  return isArrayFull(val) && val.every(function (v) {\n    return isStringFull(v);\n  });\n};\n\nvar isObject = function isObject(val) {\n  return typeof val === 'object' && !isNull(val);\n};\n\nvar isObjectFull = function isObjectFull(val) {\n  return isObject(val) && hasLength(objKeys(val));\n};\n\nvar isNumber = function isNumber(val) {\n  return typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val);\n};\n\nvar isEqual = function isEqual(val, eq) {\n  return val === eq;\n};\n\nvar isFalse = function isFalse(val) {\n  return val === false;\n};\n\nvar isTrue = function isTrue(val) {\n  return val === true;\n};\n\nvar isIn = function isIn(val) {\n  var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return arr.some(function (o) {\n    return isEqual(val, o);\n  });\n};\n\nvar isBoolean = function isBoolean(val) {\n  return typeof val === 'boolean';\n};\n\nvar isNumeric = function isNumeric(val) {\n  return /^[+-]?([0-9]*[.])?[0-9]+$/.test(val);\n};\n\nvar isDateString = function isDateString(val) {\n  return isStringFull(val) && /^\\d{4}-[01]\\d-[0-3]\\d(?:T[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:Z|[-+][0-2]\\d(?::?[0-5]\\d)?)?)?$/g.test(val);\n};\n\nvar isDate = function isDate(val) {\n  return val instanceof Date;\n};\n\nvar isValue = function isValue(val) {\n  return isStringFull(val) || isNumber(val) || isBoolean(val) || isDate(val);\n};\n\nvar hasValue = function hasValue(val) {\n  return isArrayFull(val) ? val.every(function (o) {\n    return isValue(o);\n  }) : isValue(val);\n};\n\nvar isFunction = function isFunction(val) {\n  return typeof val === 'function';\n};\n\nvar CondOperator;\n\n(function (CondOperator) {\n  CondOperator[\"EQUALS\"] = \"$eq\";\n  CondOperator[\"NOT_EQUALS\"] = \"$ne\";\n  CondOperator[\"GREATER_THAN\"] = \"$gt\";\n  CondOperator[\"LOWER_THAN\"] = \"$lt\";\n  CondOperator[\"GREATER_THAN_EQUALS\"] = \"$gte\";\n  CondOperator[\"LOWER_THAN_EQUALS\"] = \"$lte\";\n  CondOperator[\"STARTS\"] = \"$starts\";\n  CondOperator[\"ENDS\"] = \"$ends\";\n  CondOperator[\"CONTAINS\"] = \"$cont\";\n  CondOperator[\"EXCLUDES\"] = \"$excl\";\n  CondOperator[\"IN\"] = \"$in\";\n  CondOperator[\"NOT_IN\"] = \"$notin\";\n  CondOperator[\"IS_NULL\"] = \"$isnull\";\n  CondOperator[\"NOT_NULL\"] = \"$notnull\";\n  CondOperator[\"BETWEEN\"] = \"$between\";\n  CondOperator[\"EQUALS_LOW\"] = \"$eqL\";\n  CondOperator[\"NOT_EQUALS_LOW\"] = \"$neL\";\n  CondOperator[\"STARTS_LOW\"] = \"$startsL\";\n  CondOperator[\"ENDS_LOW\"] = \"$endsL\";\n  CondOperator[\"CONTAINS_LOW\"] = \"$contL\";\n  CondOperator[\"EXCLUDES_LOW\"] = \"$exclL\";\n  CondOperator[\"IN_LOW\"] = \"$inL\";\n  CondOperator[\"NOT_IN_LOW\"] = \"$notinL\";\n})(CondOperator || (CondOperator = {}));\n\nvar deprecatedComparisonOperatorsList = ['eq', 'ne', 'gt', 'lt', 'gte', 'lte', 'starts', 'ends', 'cont', 'excl', 'in', 'notin', 'isnull', 'notnull', 'between'];\n\nvar ɵ0 = function ɵ0(n) {\n  return CondOperator[n];\n};\n\nvar comparisonOperatorsList = Object.assign(deprecatedComparisonOperatorsList, objKeys(CondOperator).map(ɵ0));\nvar sortOrdersList = ['ASC', 'DESC'];\nvar comparisonOperatorsListStr = comparisonOperatorsList.join();\nvar sortOrdersListStr = sortOrdersList.join();\n\nfunction validateFields(fields) {\n  if (!isArrayStrings(fields)) {\n    throw new RequestQueryException('Invalid fields. Array of strings expected');\n  }\n}\n\nfunction validateCondition(val, cond) {\n  if (!isObject(val) || !isStringFull(val.field)) {\n    throw new RequestQueryException(\"Invalid field type in \".concat(cond, \" condition. String expected\"));\n  }\n\n  validateComparisonOperator(val.operator);\n}\n\nfunction validateComparisonOperator(operator) {\n  if (!comparisonOperatorsList.includes(operator)) {\n    throw new RequestQueryException(\"Invalid comparison operator. \".concat(comparisonOperatorsListStr, \" expected\"));\n  }\n}\n\nfunction validateJoin(join) {\n  if (!isObject(join) || !isStringFull(join.field)) {\n    throw new RequestQueryException('Invalid join field. String expected');\n  }\n\n  if (!isUndefined(join.select) && !isArrayStrings(join.select)) {\n    throw new RequestQueryException('Invalid join select. Array of strings expected');\n  }\n}\n\nfunction validateSort(sort) {\n  if (!isObject(sort) || !isStringFull(sort.field)) {\n    throw new RequestQueryException('Invalid sort field. String expected');\n  }\n\n  if (!isEqual(sort.order, sortOrdersList[0]) && !isEqual(sort.order, sortOrdersList[1])) {\n    throw new RequestQueryException(\"Invalid sort order. \".concat(sortOrdersListStr, \" expected\"));\n  }\n}\n\nfunction validateNumeric(val, num) {\n  if (!isNumber(val)) {\n    throw new RequestQueryException(\"Invalid \".concat(num, \". Number expected\"));\n  }\n}\n\nfunction validateParamOption(options, name) {\n  if (!isObject(options)) {\n    throw new RequestQueryException(\"Invalid param \".concat(name, \". Invalid crud options\"));\n  }\n\n  var option = options[name];\n\n  if (option && option.disabled) {\n    return;\n  }\n\n  if (!isObject(option) || isNil(option.field) || isNil(option.type)) {\n    throw new RequestQueryException(\"Invalid param option in Crud\");\n  }\n}\n\nfunction validateUUID(str, name) {\n  var uuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  var uuidV4 = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n\n  if (!uuidV4.test(str) && !uuid.test(str)) {\n    throw new RequestQueryException(\"Invalid param \".concat(name, \". UUID string expected\"));\n  }\n} // tslint:disable:variable-name ban-types\n\n\nvar RequestQueryBuilder = /*#__PURE__*/function () {\n  function RequestQueryBuilder() {\n    _classCallCheck(this, RequestQueryBuilder);\n\n    this.paramNames = {};\n    this.queryObject = {};\n    this.setParamNames();\n  }\n\n  _createClass(RequestQueryBuilder, [{\n    key: \"setParamNames\",\n    value: function setParamNames() {\n      var _this = this;\n\n      Object.keys(RequestQueryBuilder._options.paramNamesMap).forEach(function (key) {\n        var name = RequestQueryBuilder._options.paramNamesMap[key];\n        _this.paramNames[key] = isString(name) ? name : name[0];\n      });\n    }\n  }, {\n    key: \"query\",\n    value: function query() {\n      var encode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this.queryObject[this.paramNames.search]) {\n        this.queryObject[this.paramNames.filter] = undefined;\n        this.queryObject[this.paramNames.or] = undefined;\n      }\n\n      this.queryString = stringify(this.queryObject, {\n        encode: encode\n      });\n      return this.queryString;\n    }\n  }, {\n    key: \"select\",\n    value: function select(fields) {\n      if (isArrayFull(fields)) {\n        validateFields(fields);\n        this.queryObject[this.paramNames.fields] = fields.join(this.options.delimStr);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"search\",\n    value: function search(s) {\n      if (!isNil(s) && isObject(s)) {\n        this.queryObject[this.paramNames.search] = JSON.stringify(s);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setFilter\",\n    value: function setFilter(f) {\n      this.setCondition(f, 'filter');\n      return this;\n    }\n  }, {\n    key: \"setOr\",\n    value: function setOr(f) {\n      this.setCondition(f, 'or');\n      return this;\n    }\n  }, {\n    key: \"setJoin\",\n    value: function setJoin(j) {\n      var _this2 = this;\n\n      if (!isNil(j)) {\n        var param = this.checkQueryObjectParam('join', []);\n        this.queryObject[param] = [].concat(_toConsumableArray(this.queryObject[param]), _toConsumableArray(Array.isArray(j) && !isString(j[0]) ? j.map(function (o) {\n          return _this2.addJoin(o);\n        }) : [this.addJoin(j)]));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"sortBy\",\n    value: function sortBy(s) {\n      var _this3 = this;\n\n      if (!isNil(s)) {\n        var param = this.checkQueryObjectParam('sort', []);\n        this.queryObject[param] = [].concat(_toConsumableArray(this.queryObject[param]), _toConsumableArray(Array.isArray(s) && !isString(s[0]) ? s.map(function (o) {\n          return _this3.addSortBy(o);\n        }) : [this.addSortBy(s)]));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setLimit\",\n    value: function setLimit(n) {\n      this.setNumeric(n, 'limit');\n      return this;\n    }\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(n) {\n      this.setNumeric(n, 'offset');\n      return this;\n    }\n  }, {\n    key: \"setPage\",\n    value: function setPage(n) {\n      this.setNumeric(n, 'page');\n      return this;\n    }\n  }, {\n    key: \"resetCache\",\n    value: function resetCache() {\n      this.setNumeric(0, 'cache');\n      return this;\n    }\n  }, {\n    key: \"cond\",\n    value: function cond(f) {\n      var _cond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'search';\n\n      var filter = Array.isArray(f) ? {\n        field: f[0],\n        operator: f[1],\n        value: f[2]\n      } : f;\n      validateCondition(filter, _cond);\n      var d = this.options.delim;\n      return filter.field + d + filter.operator + (hasValue(filter.value) ? d + filter.value : '');\n    }\n  }, {\n    key: \"addJoin\",\n    value: function addJoin(j) {\n      var join = Array.isArray(j) ? {\n        field: j[0],\n        select: j[1]\n      } : j;\n      validateJoin(join);\n      var d = this.options.delim;\n      var ds = this.options.delimStr;\n      return join.field + (isArrayFull(join.select) ? d + join.select.join(ds) : '');\n    }\n  }, {\n    key: \"addSortBy\",\n    value: function addSortBy(s) {\n      var sort = Array.isArray(s) ? {\n        field: s[0],\n        order: s[1]\n      } : s;\n      validateSort(sort);\n      var ds = this.options.delimStr;\n      return sort.field + ds + sort.order;\n    }\n  }, {\n    key: \"createFromParams\",\n    value: function createFromParams(params) {\n      this.select(params.fields);\n      this.search(params.search);\n      this.setFilter(params.filter);\n      this.setOr(params.or);\n      this.setJoin(params.join);\n      this.setLimit(params.limit);\n      this.setOffset(params.offset);\n      this.setPage(params.page);\n      this.sortBy(params.sort);\n\n      if (params.resetCache) {\n        this.resetCache();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"checkQueryObjectParam\",\n    value: function checkQueryObjectParam(cond, defaults) {\n      var param = this.paramNames[cond];\n\n      if (isNil(this.queryObject[param]) && !isUndefined(defaults)) {\n        this.queryObject[param] = defaults;\n      }\n\n      return param;\n    }\n  }, {\n    key: \"setCondition\",\n    value: function setCondition(f, cond) {\n      var _this4 = this;\n\n      if (!isNil(f)) {\n        var param = this.checkQueryObjectParam(cond, []);\n        this.queryObject[param] = [].concat(_toConsumableArray(this.queryObject[param]), _toConsumableArray(Array.isArray(f) && !isString(f[0]) ? f.map(function (o) {\n          return _this4.cond(o, cond);\n        }) : [this.cond(f, cond)]));\n      }\n    }\n  }, {\n    key: \"setNumeric\",\n    value: function setNumeric(n, cond) {\n      if (!isNil(n)) {\n        validateNumeric(n, cond);\n        this.queryObject[this.paramNames[cond]] = n;\n      }\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return RequestQueryBuilder._options;\n    }\n  }], [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      RequestQueryBuilder._options = Object.assign(Object.assign(Object.assign({}, RequestQueryBuilder._options), options), {\n        paramNamesMap: Object.assign(Object.assign({}, RequestQueryBuilder._options.paramNamesMap), options.paramNamesMap ? options.paramNamesMap : {})\n      });\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      return RequestQueryBuilder._options;\n    }\n  }, {\n    key: \"create\",\n    value: function create(params) {\n      var qb = new RequestQueryBuilder();\n      return isObject(params) ? qb.createFromParams(params) : qb;\n    }\n  }]);\n\n  return RequestQueryBuilder;\n}();\n\nRequestQueryBuilder._options = {\n  delim: '||',\n  delimStr: ',',\n  paramNamesMap: {\n    fields: ['fields', 'select'],\n    search: 's',\n    filter: 'filter',\n    or: 'or',\n    join: 'join',\n    sort: 'sort',\n    limit: ['limit', 'per_page'],\n    offset: 'offset',\n    page: 'page',\n    cache: 'cache'\n  }\n}; // tslint:disable:variable-name ban-types\n\nvar RequestQueryParser = /*#__PURE__*/function () {\n  function RequestQueryParser() {\n    _classCallCheck(this, RequestQueryParser);\n\n    this.fields = [];\n    this.paramsFilter = [];\n    this.authPersist = undefined;\n    this.filter = [];\n    this.or = [];\n    this.join = [];\n    this.sort = [];\n  }\n\n  _createClass(RequestQueryParser, [{\n    key: \"getParsed\",\n    value: function getParsed() {\n      return {\n        fields: this.fields,\n        paramsFilter: this.paramsFilter,\n        authPersist: this.authPersist,\n        search: this.search,\n        filter: this.filter,\n        or: this.or,\n        join: this.join,\n        sort: this.sort,\n        limit: this.limit,\n        offset: this.offset,\n        page: this.page,\n        cache: this.cache\n      };\n    }\n  }, {\n    key: \"parseQuery\",\n    value: function parseQuery(query) {\n      if (isObject(query)) {\n        var paramNames = objKeys(query);\n\n        if (hasLength(paramNames)) {\n          this._query = query;\n          this._paramNames = paramNames;\n\n          var searchData = this._query[this.getParamNames('search')[0]];\n\n          this.search = this.parseSearchQueryParam(searchData);\n\n          if (isNil(this.search)) {\n            this.filter = this.parseQueryParam('filter', this.conditionParser.bind(this, 'filter'));\n            this.or = this.parseQueryParam('or', this.conditionParser.bind(this, 'or'));\n          }\n\n          this.fields = this.parseQueryParam('fields', this.fieldsParser.bind(this))[0] || [];\n          this.join = this.parseQueryParam('join', this.joinParser.bind(this));\n          this.sort = this.parseQueryParam('sort', this.sortParser.bind(this));\n          this.limit = this.parseQueryParam('limit', this.numericParser.bind(this, 'limit'))[0];\n          this.offset = this.parseQueryParam('offset', this.numericParser.bind(this, 'offset'))[0];\n          this.page = this.parseQueryParam('page', this.numericParser.bind(this, 'page'))[0];\n          this.cache = this.parseQueryParam('cache', this.numericParser.bind(this, 'cache'))[0];\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"parseParams\",\n    value: function parseParams(params, options) {\n      var _this5 = this;\n\n      if (isObject(params)) {\n        var paramNames = objKeys(params);\n\n        if (hasLength(paramNames)) {\n          this._params = params;\n          this._paramsOptions = options;\n          this.paramsFilter = paramNames.map(function (name) {\n            return _this5.paramParser(name);\n          }).filter(function (filter) {\n            return filter;\n          });\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setAuthPersist\",\n    value: function setAuthPersist() {\n      var persist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.authPersist = persist ||\n      /* istanbul ignore next */\n      {};\n    }\n  }, {\n    key: \"convertFilterToSearch\",\n    value: function convertFilterToSearch(filter) {\n      var isEmptyValue = {\n        isnull: true,\n        notnull: true\n      };\n      return filter ? _defineProperty({}, filter.field, _defineProperty({}, filter.operator, isEmptyValue[filter.operator] ? isEmptyValue[filter.operator] : filter.value)) :\n      /* istanbul ignore next */\n      {};\n    }\n  }, {\n    key: \"getParamNames\",\n    value: function getParamNames(type) {\n      var _this6 = this;\n\n      return this._paramNames.filter(function (p) {\n        var name = _this6._options.paramNamesMap[type];\n        return isString(name) ? name === p : name.some(function (m) {\n          return m === p;\n        });\n      });\n    }\n  }, {\n    key: \"getParamValues\",\n    value: function getParamValues(value, parser) {\n      if (isStringFull(value)) {\n        return [parser.call(this, value)];\n      }\n\n      if (isArrayFull(value)) {\n        return value.map(function (val) {\n          return parser(val);\n        });\n      }\n\n      return [];\n    }\n  }, {\n    key: \"parseQueryParam\",\n    value: function parseQueryParam(type, parser) {\n      var _this7 = this;\n\n      var param = this.getParamNames(type);\n\n      if (isArrayFull(param)) {\n        return param.reduce(function (a, name) {\n          return Object.assign(a, _this7.getParamValues(_this7._query[name], parser));\n        }, []);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"parseValue\",\n    value: function parseValue(val) {\n      try {\n        var parsed = JSON.parse(val);\n\n        if (!isDate(parsed) && isObject(parsed)) {\n          // throw new Error('Don\\'t support object now');\n          return val;\n        } else if (typeof parsed === 'number' && parsed.toLocaleString('fullwide', {\n          useGrouping: false\n        }) !== val) {\n          // JS cannot handle big numbers. Leave it as a string to prevent data loss\n          return val;\n        }\n\n        return parsed;\n      } catch (ignored) {\n        if (isDateString(val)) {\n          return new Date(val);\n        }\n\n        return val;\n      }\n    }\n  }, {\n    key: \"parseValues\",\n    value: function parseValues(vals) {\n      var _this8 = this;\n\n      if (isArrayFull(vals)) {\n        return vals.map(function (v) {\n          return _this8.parseValue(v);\n        });\n      } else {\n        return this.parseValue(vals);\n      }\n    }\n  }, {\n    key: \"fieldsParser\",\n    value: function fieldsParser(data) {\n      return data.split(this._options.delimStr);\n    }\n  }, {\n    key: \"parseSearchQueryParam\",\n    value: function parseSearchQueryParam(d) {\n      try {\n        if (isNil(d)) {\n          return undefined;\n        }\n\n        var data = JSON.parse(d);\n\n        if (!isObject(data)) {\n          throw new Error();\n        }\n\n        return data;\n      } catch (_) {\n        throw new RequestQueryException('Invalid search param. JSON expected');\n      }\n    }\n  }, {\n    key: \"conditionParser\",\n    value: function conditionParser(cond, data) {\n      var isArrayValue = ['in', 'notin', 'between', '$in', '$notin', '$between', '$inL', '$notinL'];\n      var isEmptyValue = ['isnull', 'notnull', '$isnull', '$notnull'];\n      var param = data.split(this._options.delim);\n      var field = param[0];\n      var operator = param[1];\n      var value = param[2] || '';\n\n      if (isArrayValue.some(function (name) {\n        return name === operator;\n      })) {\n        value = value.split(this._options.delimStr);\n      }\n\n      value = this.parseValues(value);\n\n      if (!isEmptyValue.some(function (name) {\n        return name === operator;\n      }) && !hasValue(value)) {\n        throw new RequestQueryException(\"Invalid \".concat(cond, \" value\"));\n      }\n\n      var condition = {\n        field: field,\n        operator: operator,\n        value: value\n      };\n      validateCondition(condition, cond);\n      return condition;\n    }\n  }, {\n    key: \"joinParser\",\n    value: function joinParser(data) {\n      var param = data.split(this._options.delim);\n      var join = {\n        field: param[0],\n        select: isStringFull(param[1]) ? param[1].split(this._options.delimStr) : undefined\n      };\n      validateJoin(join);\n      return join;\n    }\n  }, {\n    key: \"sortParser\",\n    value: function sortParser(data) {\n      var param = data.split(this._options.delimStr);\n      var sort = {\n        field: param[0],\n        order: param[1]\n      };\n      validateSort(sort);\n      return sort;\n    }\n  }, {\n    key: \"numericParser\",\n    value: function numericParser(num, data) {\n      var val = this.parseValue(data);\n      validateNumeric(val, num);\n      return val;\n    }\n  }, {\n    key: \"paramParser\",\n    value: function paramParser(name) {\n      validateParamOption(this._paramsOptions, name);\n      var option = this._paramsOptions[name];\n\n      if (option.disabled) {\n        return undefined;\n      }\n\n      var value = this._params[name];\n\n      switch (option.type) {\n        case 'number':\n          value = this.parseValue(value);\n          validateNumeric(value, \"param \".concat(name));\n          break;\n\n        case 'uuid':\n          validateUUID(value, name);\n          break;\n\n        default:\n          break;\n      }\n\n      return {\n        field: option.field,\n        operator: '$eq',\n        value: value\n      };\n    }\n  }, {\n    key: \"_options\",\n    get: function get() {\n      return RequestQueryBuilder.getOptions();\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      return new RequestQueryParser();\n    }\n  }]);\n\n  return RequestQueryParser;\n}();\n\nvar CrudBaseService = /*#__PURE__*/function () {\n  function CrudBaseService(options, http) {\n    _classCallCheck(this, CrudBaseService);\n\n    this.http = http;\n    this.options = options;\n  }\n\n  _createClass(CrudBaseService, [{\n    key: \"getPagination\",\n    value: function getPagination(limit, page, builder) {\n      if (!builder) {\n        builder = RequestQueryBuilder.create();\n      } else if (!(builder instanceof RequestQueryBuilder)) {\n        builder = RequestQueryBuilder.create(builder);\n      }\n\n      builder.setLimit(limit);\n      builder.setPage(page);\n      return this.http.get(this.getBaseUrl(), {\n        params: this.getParamsFromQuery(builder)\n      });\n    }\n  }, {\n    key: \"getMany\",\n    value: function getMany(builder) {\n      return this.http.get(this.getBaseUrl(), {\n        params: this.getParamsFromQuery(builder)\n      });\n    }\n  }, {\n    key: \"getOne\",\n    value: function getOne(value, builder) {\n      var url = this.getOneUrl(value);\n      return this.http.get(url, {\n        params: this.getParamsFromQuery(builder)\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create(body) {\n      return this.http.post(this.getBaseUrl(), JSON.stringify(body), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  }, {\n    key: \"createMany\",\n    value: function createMany(body) {\n      return this.http.post(this.getBaseUrl() + '/bulk', JSON.stringify({\n        bulk: body\n      }), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  }, {\n    key: \"put\",\n    value: function put(value, body) {\n      var url = this.getOneUrl(value);\n      return this.http.put(url, JSON.stringify(body), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  }, {\n    key: \"patch\",\n    value: function patch(value, body) {\n      var url = this.getOneUrl(value);\n      return this.http.patch(url, JSON.stringify(body), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(value) {\n      var url = this.getOneUrl(value);\n      return this.http.delete(url);\n    }\n  }, {\n    key: \"getParamsFromQuery\",\n    value: function getParamsFromQuery(builder) {\n      if (!(builder instanceof RequestQueryBuilder)) {\n        builder = RequestQueryBuilder.create(builder);\n      }\n\n      return new HttpParams({\n        fromString: this.getQuery(builder)\n      });\n    }\n    /**\r\n     * Get request link\r\n     */\n\n  }, {\n    key: \"getBaseUrl\",\n    value: function getBaseUrl() {\n      return \"\".concat(this.options.apiUrl, \"/\").concat(this.options.entity);\n    }\n  }, {\n    key: \"getOneUrl\",\n    value: function getOneUrl(value) {\n      return \"\".concat(this.getBaseUrl(), \"/\").concat(value);\n    }\n  }, {\n    key: \"getQuery\",\n    value: function getQuery(builder) {\n      if (builder) {\n        return builder.query();\n      }\n\n      return '';\n    }\n  }]);\n\n  return CrudBaseService;\n}();\n/*\r\n * Public API Surface of nest-crud-typeorm-client\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { CondOperator, CrudBaseService, RequestQueryBuilder, RequestQueryException, RequestQueryParser, getOwnPropNames, hasLength, hasValue, isArrayFull, isArrayStrings, isBoolean, isDate, isDateString, isEqual, isFalse, isFunction, isIn, isNil, isNull, isNumber, isNumeric, isObject, isObjectFull, isString, isStringFull, isTrue, isUndefined, isValue, objKeys };","map":{"version":3,"sources":["ng:/nest-crud-typeorm-client/lib/crud-request/exceptions/request-query.exception.ts","ng:/nest-crud-typeorm-client/lib/util/obj.util.ts","ng:/nest-crud-typeorm-client/lib/util/checks.util.ts","ng:/nest-crud-typeorm-client/lib/crud-request/types/request-query.types.ts","ng:/nest-crud-typeorm-client/lib/crud-request/request-query.validator.ts","ng:/nest-crud-typeorm-client/lib/crud-request/request-query.builder.ts","ng:/nest-crud-typeorm-client/lib/crud-request/request-query.parser.ts","ng:/nest-crud-typeorm-client/lib/crud-base.service.ts","ng:/nest-crud-typeorm-client/public-api.ts","ng:/nest-crud-typeorm-client/nest-crud-typeorm-client.ts"],"names":[],"mappings":"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","sourcesContent":["export class RequestQueryException extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","export const objKeys = (val: any): string[] => Object.keys(val);\nexport const getOwnPropNames = (val: any): string[] => Object.getOwnPropertyNames(val);\n","import { objKeys } from './obj.util';\n\nexport const isUndefined = (val: any): boolean => typeof val === 'undefined';\nexport const isNull = (val: any): boolean => val === null;\nexport const isNil = (val: any): boolean => isUndefined(val) || isNull(val);\nexport const isString = (val: any): boolean => typeof val === 'string';\nexport const hasLength = (val: any): boolean => val.length > 0;\nexport const isStringFull = (val: any): boolean => isString(val) && hasLength(val);\nexport const isArrayFull = (val: any): boolean => Array.isArray(val) && hasLength(val);\nexport const isArrayStrings = (val: any): boolean =>\n  isArrayFull(val) && (val as string[]).every((v) => isStringFull(v));\nexport const isObject = (val: any): boolean => typeof val === 'object' && !isNull(val);\nexport const isObjectFull = (val: any) => isObject(val) && hasLength(objKeys(val));\nexport const isNumber = (val: any): boolean =>\n  typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val);\nexport const isEqual = (val: any, eq: any): boolean => val === eq;\nexport const isFalse = (val: any): boolean => val === false;\nexport const isTrue = (val: any): boolean => val === true;\nexport const isIn = (val: any, arr: any[] = []): boolean =>\n  arr.some((o) => isEqual(val, o));\nexport const isBoolean = (val: any): boolean => typeof val === 'boolean';\nexport const isNumeric = (val: any): boolean => /^[+-]?([0-9]*[.])?[0-9]+$/.test(val);\nexport const isDateString = (val: any): boolean =>\n  isStringFull(val) &&\n  /^\\d{4}-[01]\\d-[0-3]\\d(?:T[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:Z|[-+][0-2]\\d(?::?[0-5]\\d)?)?)?$/g.test(\n    val,\n  );\nexport const isDate = (val: any): val is Date => val instanceof Date;\nexport const isValue = (val: any): boolean =>\n  isStringFull(val) || isNumber(val) || isBoolean(val) || isDate(val);\nexport const hasValue = (val: any): boolean =>\n  isArrayFull(val) ? (val as any[]).every((o) => isValue(o)) : isValue(val);\nexport const isFunction = (val: any): boolean => typeof val === 'function';\n","export type QueryFields = string[];\n\nexport type QueryFilter = {\n  field: string;\n  operator: ComparisonOperator;\n  value?: any;\n};\n\nexport type QueryFilterArr = [string, ComparisonOperator, any?];\n\nexport type QueryJoin = {\n  field: string;\n  select?: QueryFields;\n};\n\nexport type QueryJoinArr = [string, QueryFields?];\n\nexport type QuerySort = {\n  field: string;\n  order: QuerySortOperator;\n};\n\nexport type QuerySortArr = [string, QuerySortOperator];\n\nexport type QuerySortOperator = 'ASC' | 'DESC';\n\ntype DeprecatedCondOperator =\n  | 'eq'\n  | 'ne'\n  | 'gt'\n  | 'lt'\n  | 'gte'\n  | 'lte'\n  | 'starts'\n  | 'ends'\n  | 'cont'\n  | 'excl'\n  | 'in'\n  | 'notin'\n  | 'isnull'\n  | 'notnull'\n  | 'between';\n\nexport enum CondOperator {\n  EQUALS = '$eq',\n  NOT_EQUALS = '$ne',\n  GREATER_THAN = '$gt',\n  LOWER_THAN = '$lt',\n  GREATER_THAN_EQUALS = '$gte',\n  LOWER_THAN_EQUALS = '$lte',\n  STARTS = '$starts',\n  ENDS = '$ends',\n  CONTAINS = '$cont',\n  EXCLUDES = '$excl',\n  IN = '$in',\n  NOT_IN = '$notin',\n  IS_NULL = '$isnull',\n  NOT_NULL = '$notnull',\n  BETWEEN = '$between',\n  EQUALS_LOW = '$eqL',\n  NOT_EQUALS_LOW = '$neL',\n  STARTS_LOW = '$startsL',\n  ENDS_LOW = '$endsL',\n  CONTAINS_LOW = '$contL',\n  EXCLUDES_LOW = '$exclL',\n  IN_LOW = '$inL',\n  NOT_IN_LOW = '$notinL',\n}\n\nexport type ComparisonOperator = DeprecatedCondOperator | keyof SFieldOperator;\n\n// new search\nexport type SPrimitivesVal = string | number | boolean;\n\nexport type SFiledValues = SPrimitivesVal | Array<SPrimitivesVal>;\n\nexport type SFieldOperator = {\n  $eq?: SFiledValues;\n  $ne?: SFiledValues;\n  $gt?: SFiledValues;\n  $lt?: SFiledValues;\n  $gte?: SFiledValues;\n  $lte?: SFiledValues;\n  $starts?: SFiledValues;\n  $ends?: SFiledValues;\n  $cont?: SFiledValues;\n  $excl?: SFiledValues;\n  $in?: SFiledValues;\n  $notin?: SFiledValues;\n  $between?: SFiledValues;\n  $isnull?: SFiledValues;\n  $notnull?: SFiledValues;\n  $eqL?: SFiledValues;\n  $neL?: SFiledValues;\n  $startsL?: SFiledValues;\n  $endsL?: SFiledValues;\n  $contL?: SFiledValues;\n  $exclL?: SFiledValues;\n  $inL?: SFiledValues;\n  $notinL?: SFiledValues;\n  $or?: SFieldOperator;\n  $and?: never;\n};\n\nexport type SField = SPrimitivesVal | SFieldOperator;\n\nexport type SFields = {\n  [key: string]: SField | Array<SFields | SConditionAND> | undefined;\n  $or?: Array<SFields | SConditionAND>;\n  $and?: never;\n};\n\nexport type SConditionAND = {\n  $and?: Array<SFields | SConditionAND>;\n  $or?: never;\n};\n\nexport type SConditionKey = '$and' | '$or';\n\nexport type SCondition = SFields | SConditionAND;\n","import {\n  isUndefined,\n  isArrayStrings,\n  isStringFull,\n  isObject,\n  isEqual,\n  isNumber,\n  isNil,\n  objKeys,\n} from '../util';\n\nimport { RequestQueryException } from './exceptions';\nimport { ParamsOptions, ParamOption } from './interfaces';\nimport {\n  QueryFields,\n  QueryFilter,\n  ComparisonOperator,\n  QueryJoin,\n  QuerySort,\n  CondOperator,\n} from './types';\n\nexport const deprecatedComparisonOperatorsList = [\n  'eq',\n  'ne',\n  'gt',\n  'lt',\n  'gte',\n  'lte',\n  'starts',\n  'ends',\n  'cont',\n  'excl',\n  'in',\n  'notin',\n  'isnull',\n  'notnull',\n  'between',\n];\nexport const comparisonOperatorsList = Object.assign(\n  deprecatedComparisonOperatorsList,\n  objKeys(CondOperator).map((n) => CondOperator[n])\n);\n\nexport const sortOrdersList = ['ASC', 'DESC'];\n\nconst comparisonOperatorsListStr = comparisonOperatorsList.join();\nconst sortOrdersListStr = sortOrdersList.join();\n\nexport function validateFields(fields: QueryFields): void {\n  if (!isArrayStrings(fields)) {\n    throw new RequestQueryException(\n      'Invalid fields. Array of strings expected'\n    );\n  }\n}\n\nexport function validateCondition(\n  val: QueryFilter,\n  cond: 'filter' | 'or' | 'search'\n): void {\n  if (!isObject(val) || !isStringFull(val.field)) {\n    throw new RequestQueryException(\n      `Invalid field type in ${cond} condition. String expected`\n    );\n  }\n  validateComparisonOperator(val.operator);\n}\n\nexport function validateComparisonOperator(operator: ComparisonOperator): void {\n  if (!comparisonOperatorsList.includes(operator)) {\n    throw new RequestQueryException(\n      `Invalid comparison operator. ${comparisonOperatorsListStr} expected`\n    );\n  }\n}\n\nexport function validateJoin(join: QueryJoin): void {\n  if (!isObject(join) || !isStringFull(join.field)) {\n    throw new RequestQueryException('Invalid join field. String expected');\n  }\n  if (!isUndefined(join.select) && !isArrayStrings(join.select)) {\n    throw new RequestQueryException(\n      'Invalid join select. Array of strings expected'\n    );\n  }\n}\n\nexport function validateSort(sort: QuerySort): void {\n  if (!isObject(sort) || !isStringFull(sort.field)) {\n    throw new RequestQueryException('Invalid sort field. String expected');\n  }\n  if (\n    !isEqual(sort.order, sortOrdersList[0]) &&\n    !isEqual(sort.order, sortOrdersList[1])\n  ) {\n    throw new RequestQueryException(\n      `Invalid sort order. ${sortOrdersListStr} expected`\n    );\n  }\n}\n\nexport function validateNumeric(\n  val: number,\n  num: 'limit' | 'offset' | 'page' | 'cache' | string\n): void {\n  if (!isNumber(val)) {\n    throw new RequestQueryException(`Invalid ${num}. Number expected`);\n  }\n}\n\nexport function validateParamOption(options: ParamsOptions, name: string) {\n  if (!isObject(options)) {\n    throw new RequestQueryException(\n      `Invalid param ${name}. Invalid crud options`\n    );\n  }\n  const option = options[name];\n  if (option && option.disabled) {\n    return;\n  }\n  if (!isObject(option) || isNil(option.field) || isNil(option.type)) {\n    throw new RequestQueryException(`Invalid param option in Crud`);\n  }\n}\n\nexport function validateUUID(str: string, name: string) {\n  const uuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  const uuidV4 = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  if (!uuidV4.test(str) && !uuid.test(str)) {\n    throw new RequestQueryException(\n      `Invalid param ${name}. UUID string expected`\n    );\n  }\n}\n","import {\n  hasValue,\n  isObject,\n  isString,\n  isArrayFull,\n  isNil,\n  isUndefined,\n} from '../util';\nimport { stringify } from 'qs';\n\nimport { RequestQueryBuilderOptions, CreateQueryParams } from './interfaces';\nimport {\n  validateCondition,\n  validateFields,\n  validateJoin,\n  validateNumeric,\n  validateSort,\n} from './request-query.validator';\nimport {\n  QueryFields,\n  QueryFilter,\n  QueryFilterArr,\n  QueryJoin,\n  QueryJoinArr,\n  QuerySort,\n  QuerySortArr,\n  SCondition,\n} from './types';\n\n// tslint:disable:variable-name ban-types\nexport class RequestQueryBuilder {\n  constructor() {\n    this.setParamNames();\n  }\n\n  private static _options: RequestQueryBuilderOptions = {\n    delim: '||',\n    delimStr: ',',\n    paramNamesMap: {\n      fields: ['fields', 'select'],\n      search: 's',\n      filter: 'filter',\n      or: 'or',\n      join: 'join',\n      sort: 'sort',\n      limit: ['limit', 'per_page'],\n      offset: 'offset',\n      page: 'page',\n      cache: 'cache',\n    },\n  };\n  private paramNames: {\n    [key in keyof RequestQueryBuilderOptions['paramNamesMap']]: string;\n  } = {};\n  public queryObject: { [key: string]: any } = {};\n  public queryString: string;\n\n  static setOptions(options: RequestQueryBuilderOptions) {\n    RequestQueryBuilder._options = {\n      ...RequestQueryBuilder._options,\n      ...options,\n      paramNamesMap: {\n        ...RequestQueryBuilder._options.paramNamesMap,\n        ...(options.paramNamesMap ? options.paramNamesMap : {}),\n      },\n    };\n  }\n\n  static getOptions(): RequestQueryBuilderOptions {\n    return RequestQueryBuilder._options;\n  }\n\n  static create(params?: CreateQueryParams): RequestQueryBuilder {\n    const qb = new RequestQueryBuilder();\n    return isObject(params) ? qb.createFromParams(params) : qb;\n  }\n\n  get options(): RequestQueryBuilderOptions {\n    return RequestQueryBuilder._options;\n  }\n\n  setParamNames() {\n    Object.keys(RequestQueryBuilder._options.paramNamesMap).forEach((key) => {\n      const name = RequestQueryBuilder._options.paramNamesMap[key];\n      this.paramNames[key] = isString(name) ? (name as string) : (name[0] as string);\n    });\n  }\n\n  query(encode = true): string {\n    if (this.queryObject[this.paramNames.search]) {\n      this.queryObject[this.paramNames.filter] = undefined;\n      this.queryObject[this.paramNames.or] = undefined;\n    }\n    this.queryString = stringify(this.queryObject, { encode });\n    return this.queryString;\n  }\n\n  select(fields: QueryFields): this {\n    if (isArrayFull(fields)) {\n      validateFields(fields);\n      this.queryObject[this.paramNames.fields] = fields.join(this.options.delimStr);\n    }\n    return this;\n  }\n\n  search(s: SCondition) {\n    if (!isNil(s) && isObject(s)) {\n      this.queryObject[this.paramNames.search] = JSON.stringify(s);\n    }\n    return this;\n  }\n\n  setFilter(f: QueryFilter | QueryFilterArr | Array<QueryFilter | QueryFilterArr>): this {\n    this.setCondition(f, 'filter');\n    return this;\n  }\n\n  setOr(f: QueryFilter | QueryFilterArr | Array<QueryFilter | QueryFilterArr>): this {\n    this.setCondition(f, 'or');\n    return this;\n  }\n\n  setJoin(j: QueryJoin | QueryJoinArr | Array<QueryJoin | QueryJoinArr>): this {\n    if (!isNil(j)) {\n      const param = this.checkQueryObjectParam('join', []);\n      this.queryObject[param] = [\n        ...this.queryObject[param],\n        ...(Array.isArray(j) && !isString(j[0])\n          ? (j as Array<QueryJoin | QueryJoinArr>).map((o) => this.addJoin(o))\n          : [this.addJoin(j as QueryJoin | QueryJoinArr)]),\n      ];\n    }\n    return this;\n  }\n\n  sortBy(s: QuerySort | QuerySortArr | Array<QuerySort | QuerySortArr>): this {\n    if (!isNil(s)) {\n      const param = this.checkQueryObjectParam('sort', []);\n      this.queryObject[param] = [\n        ...this.queryObject[param],\n        ...(Array.isArray(s) && !isString(s[0])\n          ? (s as Array<QuerySort | QuerySortArr>).map((o) => this.addSortBy(o))\n          : [this.addSortBy(s as QuerySort | QuerySortArr)]),\n      ];\n    }\n    return this;\n  }\n\n  setLimit(n: number): this {\n    this.setNumeric(n, 'limit');\n    return this;\n  }\n\n  setOffset(n: number): this {\n    this.setNumeric(n, 'offset');\n    return this;\n  }\n\n  setPage(n: number): this {\n    this.setNumeric(n, 'page');\n    return this;\n  }\n\n  resetCache(): this {\n    this.setNumeric(0, 'cache');\n    return this;\n  }\n\n  cond(\n    f: QueryFilter | QueryFilterArr,\n    cond: 'filter' | 'or' | 'search' = 'search',\n  ): string {\n    const filter = Array.isArray(f) ? { field: f[0], operator: f[1], value: f[2] } : f;\n    validateCondition(filter, cond);\n    const d = this.options.delim;\n\n    return (\n      filter.field +\n      d +\n      filter.operator +\n      (hasValue(filter.value) ? d + filter.value : '')\n    );\n  }\n\n  private addJoin(j: QueryJoin | QueryJoinArr): string {\n    const join = Array.isArray(j) ? { field: j[0], select: j[1] } : j;\n    validateJoin(join);\n    const d = this.options.delim;\n    const ds = this.options.delimStr;\n\n    return join.field + (isArrayFull(join.select) ? d + join.select.join(ds) : '');\n  }\n\n  private addSortBy(s: QuerySort | QuerySortArr): string {\n    const sort = Array.isArray(s) ? { field: s[0], order: s[1] } : s;\n    validateSort(sort);\n    const ds = this.options.delimStr;\n\n    return sort.field + ds + sort.order;\n  }\n\n  private createFromParams(params: CreateQueryParams): this {\n    this.select(params.fields);\n    this.search(params.search);\n    this.setFilter(params.filter);\n    this.setOr(params.or);\n    this.setJoin(params.join);\n    this.setLimit(params.limit);\n    this.setOffset(params.offset);\n    this.setPage(params.page);\n    this.sortBy(params.sort);\n    if (params.resetCache) {\n      this.resetCache();\n    }\n    return this;\n  }\n\n  private checkQueryObjectParam(\n    cond: keyof RequestQueryBuilderOptions['paramNamesMap'],\n    defaults: any,\n  ): string {\n    const param = this.paramNames[cond];\n    if (isNil(this.queryObject[param]) && !isUndefined(defaults)) {\n      this.queryObject[param] = defaults;\n    }\n    return param;\n  }\n\n  private setCondition(\n    f: QueryFilter | QueryFilterArr | Array<QueryFilter | QueryFilterArr>,\n    cond: 'filter' | 'or',\n  ): void {\n    if (!isNil(f)) {\n      const param = this.checkQueryObjectParam(cond, []);\n      this.queryObject[param] = [\n        ...this.queryObject[param],\n        ...(Array.isArray(f) && !isString(f[0])\n          ? (f as Array<QueryFilter | QueryFilterArr>).map((o) => this.cond(o, cond))\n          : [this.cond(f as QueryFilter | QueryFilterArr, cond)]),\n      ];\n    }\n  }\n\n  private setNumeric(n: number, cond: 'limit' | 'offset' | 'page' | 'cache'): void {\n    if (!isNil(n)) {\n      validateNumeric(n, cond);\n      this.queryObject[this.paramNames[cond]] = n;\n    }\n  }\n}","import {\n  hasLength,\n  hasValue,\n  isString,\n  isArrayFull,\n  isDate,\n  isDateString,\n  isObject,\n  isStringFull,\n  objKeys,\n  isNil,\n  ObjectLiteral,\n} from '../util';\n\nimport { RequestQueryException } from './exceptions';\nimport {\n  ParamsOptions,\n  ParsedRequestParams,\n  RequestQueryBuilderOptions,\n} from './interfaces';\nimport { RequestQueryBuilder } from './request-query.builder';\nimport {\n  validateCondition,\n  validateJoin,\n  validateNumeric,\n  validateParamOption,\n  validateSort,\n  validateUUID,\n} from './request-query.validator';\nimport {\n  ComparisonOperator,\n  QueryFields,\n  QueryFilter,\n  QueryJoin,\n  QuerySort,\n  SCondition,\n  SConditionAND,\n  SFields,\n} from './types';\n\n// tslint:disable:variable-name ban-types\nexport class RequestQueryParser implements ParsedRequestParams {\n  public fields: QueryFields = [];\n  public paramsFilter: QueryFilter[] = [];\n  public authPersist: ObjectLiteral = undefined;\n  public search: SCondition;\n  public filter: QueryFilter[] = [];\n  public or: QueryFilter[] = [];\n  public join: QueryJoin[] = [];\n  public sort: QuerySort[] = [];\n  public limit: number;\n  public offset: number;\n  public page: number;\n  public cache: number;\n\n  private _params: any;\n  private _query: any;\n  private _paramNames: string[];\n  private _paramsOptions: ParamsOptions;\n\n  private get _options(): RequestQueryBuilderOptions {\n    return RequestQueryBuilder.getOptions();\n  }\n\n  static create(): RequestQueryParser {\n    return new RequestQueryParser();\n  }\n\n  getParsed(): ParsedRequestParams {\n    return {\n      fields: this.fields,\n      paramsFilter: this.paramsFilter,\n      authPersist: this.authPersist,\n      search: this.search,\n      filter: this.filter,\n      or: this.or,\n      join: this.join,\n      sort: this.sort,\n      limit: this.limit,\n      offset: this.offset,\n      page: this.page,\n      cache: this.cache,\n    };\n  }\n\n  parseQuery(query: any): this {\n    if (isObject(query)) {\n      const paramNames = objKeys(query);\n\n      if (hasLength(paramNames)) {\n        this._query = query;\n        this._paramNames = paramNames;\n        let searchData = this._query[this.getParamNames('search')[0]];\n\n        this.search = this.parseSearchQueryParam(searchData) as any;\n        if (isNil(this.search)) {\n          this.filter = this.parseQueryParam(\n            'filter',\n            this.conditionParser.bind(this, 'filter'),\n          );\n          this.or = this.parseQueryParam('or', this.conditionParser.bind(this, 'or'));\n        }\n        this.fields =\n          this.parseQueryParam('fields', this.fieldsParser.bind(this))[0] || [];\n        this.join = this.parseQueryParam('join', this.joinParser.bind(this));\n        this.sort = this.parseQueryParam('sort', this.sortParser.bind(this));\n        this.limit = this.parseQueryParam(\n          'limit',\n          this.numericParser.bind(this, 'limit'),\n        )[0];\n        this.offset = this.parseQueryParam(\n          'offset',\n          this.numericParser.bind(this, 'offset'),\n        )[0];\n        this.page = this.parseQueryParam(\n          'page',\n          this.numericParser.bind(this, 'page'),\n        )[0];\n        this.cache = this.parseQueryParam(\n          'cache',\n          this.numericParser.bind(this, 'cache'),\n        )[0];\n      }\n    }\n\n    return this;\n  }\n\n  parseParams(params: any, options: ParamsOptions): this {\n    if (isObject(params)) {\n      const paramNames = objKeys(params);\n\n      if (hasLength(paramNames)) {\n        this._params = params;\n        this._paramsOptions = options;\n        this.paramsFilter = paramNames\n          .map((name) => this.paramParser(name))\n          .filter((filter) => filter);\n      }\n    }\n\n    return this;\n  }\n\n  setAuthPersist(persist: ObjectLiteral = {}) {\n    this.authPersist = persist || /* istanbul ignore next */ {};\n  }\n\n  convertFilterToSearch(filter: QueryFilter): SFields | SConditionAND {\n    const isEmptyValue = {\n      isnull: true,\n      notnull: true,\n    };\n\n    return filter\n      ? {\n          [filter.field]: {\n            [filter.operator]: isEmptyValue[filter.operator]\n              ? isEmptyValue[filter.operator]\n              : filter.value,\n          },\n        }\n      : /* istanbul ignore next */ {};\n  }\n\n  private getParamNames(\n    type: keyof RequestQueryBuilderOptions['paramNamesMap'],\n  ): string[] {\n    return this._paramNames.filter((p) => {\n      const name = this._options.paramNamesMap[type];\n      return isString(name) ? name === p : (name as string[]).some((m) => m === p);\n    });\n  }\n\n  private getParamValues(value: string | string[], parser: Function): string[] {\n    if (isStringFull(value)) {\n      return [parser.call(this, value)];\n    }\n\n    if (isArrayFull(value)) {\n      return (value as string[]).map((val) => parser(val));\n    }\n\n    return [];\n  }\n\n  private parseQueryParam(\n    type: keyof RequestQueryBuilderOptions['paramNamesMap'],\n    parser: Function,\n  ) {\n    const param = this.getParamNames(type);\n\n    if (isArrayFull(param)) {\n      return param.reduce(\n        (a, name) => Object.assign(a,this.getParamValues(this._query[name], parser)),\n        [],\n      );\n    }\n\n    return [];\n  }\n\n  private parseValue(val: any) {\n    try {\n      const parsed = JSON.parse(val);\n\n      if (!isDate(parsed) && isObject(parsed)) {\n        // throw new Error('Don\\'t support object now');\n        return val;\n      } else if (\n        typeof parsed === 'number' &&\n        parsed.toLocaleString('fullwide', { useGrouping: false }) !== val\n      ) {\n        // JS cannot handle big numbers. Leave it as a string to prevent data loss\n        return val;\n      }\n\n      return parsed;\n    } catch (ignored) {\n      if (isDateString(val)) {\n        return new Date(val);\n      }\n\n      return val;\n    }\n  }\n\n  private parseValues(vals: any) {\n    if (isArrayFull(vals)) {\n      return vals.map((v: any) => this.parseValue(v));\n    } else {\n      return this.parseValue(vals);\n    }\n  }\n\n  private fieldsParser(data: string): QueryFields {\n    return data.split(this._options.delimStr);\n  }\n\n  private parseSearchQueryParam(d: any): SCondition {\n    try {\n      if (isNil(d)) {\n        return undefined;\n      }\n\n      const data = JSON.parse(d);\n\n      if (!isObject(data)) {\n        throw new Error();\n      }\n\n      return data;\n    } catch (_) {\n      throw new RequestQueryException('Invalid search param. JSON expected');\n    }\n  }\n\n  private conditionParser(cond: 'filter' | 'or' | 'search', data: string): QueryFilter {\n    const isArrayValue = [\n      'in',\n      'notin',\n      'between',\n      '$in',\n      '$notin',\n      '$between',\n      '$inL',\n      '$notinL',\n    ];\n    const isEmptyValue = ['isnull', 'notnull', '$isnull', '$notnull'];\n    const param = data.split(this._options.delim);\n    const field = param[0];\n    const operator = param[1] as ComparisonOperator;\n    let value = param[2] || '';\n\n    if (isArrayValue.some((name) => name === operator)) {\n      value = value.split(this._options.delimStr) as any;\n    }\n\n    value = this.parseValues(value);\n\n    if (!isEmptyValue.some((name) => name === operator) && !hasValue(value)) {\n      throw new RequestQueryException(`Invalid ${cond} value`);\n    }\n\n    const condition: QueryFilter = { field, operator, value };\n    validateCondition(condition, cond);\n\n    return condition;\n  }\n\n  private joinParser(data: string): QueryJoin {\n    const param = data.split(this._options.delim);\n    const join: QueryJoin = {\n      field: param[0],\n      select: isStringFull(param[1]) ? param[1].split(this._options.delimStr) : undefined,\n    };\n    validateJoin(join);\n\n    return join;\n  }\n\n  private sortParser(data: string): QuerySort {\n    const param = data.split(this._options.delimStr);\n    const sort: QuerySort = {\n      field: param[0],\n      order: param[1] as any,\n    };\n    validateSort(sort);\n\n    return sort;\n  }\n\n  private numericParser(\n    num: 'limit' | 'offset' | 'page' | 'cache',\n    data: string,\n  ): number {\n    const val = this.parseValue(data);\n    validateNumeric(val, num);\n\n    return val;\n  }\n\n  private paramParser(name: string): QueryFilter {\n    validateParamOption(this._paramsOptions, name);\n    const option = this._paramsOptions[name];\n\n    if (option.disabled) {\n      return undefined;\n    }\n\n    let value = this._params[name];\n\n    switch (option.type) {\n      case 'number':\n        value = this.parseValue(value);\n        validateNumeric(value, `param ${name}`);\n        break;\n      case 'uuid':\n        validateUUID(value, name);\n        break;\n      default:\n        break;\n    }\n\n    return { field: option.field, operator: '$eq', value };\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CreateQueryParams, RequestQueryBuilder } from './crud-request';\r\n\r\nexport interface CrudBaseOptions {\r\n  entity: string;\r\n  apiUrl: string;\r\n}\r\n\r\nexport interface ResponsePagination<T> {\r\n  data: Array<T>;\r\n  count: number;\r\n  total: number;\r\n  page: number;\r\n  pageCount: number;\r\n}\r\n\r\nexport abstract class CrudBaseService<T> {\r\n  protected options: CrudBaseOptions;\r\n  constructor(options: CrudBaseOptions, protected http: HttpClient) {\r\n    this.options = options;\r\n  }\r\n\r\n  getPagination(\r\n    limit: number,\r\n    page: number,\r\n    builder?: RequestQueryBuilder | CreateQueryParams\r\n  ): Observable<ResponsePagination<T>> {\r\n    if (!builder) {\r\n      builder = RequestQueryBuilder.create();\r\n    } else if (!(builder instanceof RequestQueryBuilder)) {\r\n      builder = RequestQueryBuilder.create(builder);\r\n    }\r\n    builder.setLimit(limit);\r\n    builder.setPage(page);\r\n    return this.http.get<ResponsePagination<T>>(this.getBaseUrl(), {\r\n      params: this.getParamsFromQuery(builder),\r\n    });\r\n  }\r\n\r\n  getMany(builder?: RequestQueryBuilder | CreateQueryParams): Observable<T[]> {\r\n    return this.http.get<T[]>(this.getBaseUrl(), {\r\n      params: this.getParamsFromQuery(builder),\r\n    });\r\n  }\r\n\r\n  getOne(\r\n    value: number | string | boolean,\r\n    builder?: RequestQueryBuilder | CreateQueryParams\r\n  ): Observable<T> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.get<T>(url, {\r\n      params: this.getParamsFromQuery(builder),\r\n    });\r\n  }\r\n\r\n  create(body: T): Observable<T> {\r\n    return this.http.post<T>(this.getBaseUrl(), JSON.stringify(body), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n\r\n  createMany(body: T[]): Observable<T[]> {\r\n    return this.http.post<T[]>(\r\n      this.getBaseUrl() + '/bulk',\r\n      JSON.stringify({ bulk: body }),\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  put(value: number | string | boolean, body: T): Observable<T> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.put<T>(url, JSON.stringify(body), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n\r\n  patch(value: number | string | boolean, body: T): Observable<T> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.patch<T>(url, JSON.stringify(body), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(value: number | string | boolean): Observable<void> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.delete<void>(url);\r\n  }\r\n\r\n  protected getParamsFromQuery(\r\n    builder: RequestQueryBuilder | CreateQueryParams\r\n  ) {\r\n    if (!(builder instanceof RequestQueryBuilder)) {\r\n      builder = RequestQueryBuilder.create(builder);\r\n    }\r\n    return new HttpParams({ fromString: this.getQuery(builder) });\r\n  }\r\n\r\n  /**\r\n   * Get request link\r\n   */\r\n  protected getBaseUrl(): string {\r\n    return `${this.options.apiUrl}/${this.options.entity}`;\r\n  }\r\n\r\n  protected getOneUrl(value: number | string | boolean) {\r\n    return `${this.getBaseUrl()}/${value}`;\r\n  }\r\n\r\n  private getQuery(builder?: RequestQueryBuilder) {\r\n    if (builder) {\r\n      return builder.query();\r\n    }\r\n    return '';\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of nest-crud-typeorm-client\r\n */\r\n\r\nexport * from './lib/crud-base.service';\r\nexport * from './lib/crud-request';\r\nexport * from './lib/util';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}