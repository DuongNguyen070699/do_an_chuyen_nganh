{"ast":null,"code":"var _a;\n\nimport { KEYS } from '../constants/keys';\nimport defaultsDeep from 'lodash/defaultsDeep';\nimport get from 'lodash/get';\nimport omit from 'lodash/omit';\nimport isNumber from 'lodash/isNumber';\n\nvar ɵ0 = function ɵ0(tree, node, $event) {\n  return node && node.toggleActivated();\n},\n    ɵ1 = function ɵ1(tree, node, $event) {\n  return node && node.toggleActivated(true);\n},\n    ɵ2 = function ɵ2(tree, node, $event) {\n  return node && node.toggleSelected();\n},\n    ɵ3 = function ɵ3(tree, node, $event) {\n  return node.setIsActive(true);\n},\n    ɵ4 = function ɵ4(tree, node, $event) {\n  return node.setIsActive(false);\n},\n    ɵ5 = function ɵ5(tree, node, $event) {\n  return node.setIsSelected(true);\n},\n    ɵ6 = function ɵ6(tree, node, $event) {\n  return node.setIsSelected(false);\n},\n    ɵ7 = function ɵ7(tree, node, $event) {\n  return node.focus();\n},\n    ɵ8 = function ɵ8(tree, node, $event) {\n  return node.hasChildren && node.toggleExpanded();\n},\n    ɵ9 = function ɵ9(tree, node, $event) {\n  return node.expand();\n},\n    ɵ10 = function ɵ10(tree, node, $event) {\n  return node.collapse();\n},\n    ɵ11 = function ɵ11(tree, node, $event) {\n  return tree.focusDrillDown();\n},\n    ɵ12 = function ɵ12(tree, node, $event) {\n  return tree.focusDrillUp();\n},\n    ɵ13 = function ɵ13(tree, node, $event) {\n  return tree.focusNextNode();\n},\n    ɵ14 = function ɵ14(tree, node, $event) {\n  return tree.focusPreviousNode();\n},\n    ɵ15 = function ɵ15(tree, node, $event, _a) {\n  var from = _a.from,\n      to = _a.to; // default action assumes from = node, to = {parent, index}\n\n  if ($event.ctrlKey) {\n    tree.copyNode(from, to);\n  } else {\n    tree.moveNode(from, to);\n  }\n};\n\nexport var TREE_ACTIONS = {\n  TOGGLE_ACTIVE: ɵ0,\n  TOGGLE_ACTIVE_MULTI: ɵ1,\n  TOGGLE_SELECTED: ɵ2,\n  ACTIVATE: ɵ3,\n  DEACTIVATE: ɵ4,\n  SELECT: ɵ5,\n  DESELECT: ɵ6,\n  FOCUS: ɵ7,\n  TOGGLE_EXPANDED: ɵ8,\n  EXPAND: ɵ9,\n  COLLAPSE: ɵ10,\n  DRILL_DOWN: ɵ11,\n  DRILL_UP: ɵ12,\n  NEXT_NODE: ɵ13,\n  PREVIOUS_NODE: ɵ14,\n  MOVE_NODE: ɵ15\n};\nvar defaultActionMapping = {\n  mouse: {\n    click: TREE_ACTIONS.TOGGLE_ACTIVE,\n    dblClick: null,\n    contextMenu: null,\n    expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\n    checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\n    drop: TREE_ACTIONS.MOVE_NODE\n  },\n  keys: (_a = {}, _a[KEYS.RIGHT] = TREE_ACTIONS.DRILL_DOWN, _a[KEYS.LEFT] = TREE_ACTIONS.DRILL_UP, _a[KEYS.DOWN] = TREE_ACTIONS.NEXT_NODE, _a[KEYS.UP] = TREE_ACTIONS.PREVIOUS_NODE, _a[KEYS.SPACE] = TREE_ACTIONS.TOGGLE_ACTIVE, _a[KEYS.ENTER] = TREE_ACTIONS.TOGGLE_ACTIVE, _a)\n};\n\nvar TreeOptions =\n/** @class */\nfunction () {\n  function TreeOptions(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.options = options;\n    this.actionMapping = defaultsDeep({}, this.options.actionMapping, defaultActionMapping);\n\n    if (options.rtl) {\n      this.actionMapping.keys[KEYS.RIGHT] = get(options, ['actionMapping', 'keys', KEYS.RIGHT]) || TREE_ACTIONS.DRILL_UP;\n      this.actionMapping.keys[KEYS.LEFT] = get(options, ['actionMapping', 'keys', KEYS.LEFT]) || TREE_ACTIONS.DRILL_DOWN;\n    }\n  }\n\n  Object.defineProperty(TreeOptions.prototype, \"hasChildrenField\", {\n    get: function get() {\n      return this.options.hasChildrenField || 'hasChildren';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"childrenField\", {\n    get: function get() {\n      return this.options.childrenField || 'children';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"displayField\", {\n    get: function get() {\n      return this.options.displayField || 'name';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"idField\", {\n    get: function get() {\n      return this.options.idField || 'id';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"isExpandedField\", {\n    get: function get() {\n      return this.options.isExpandedField || 'isExpanded';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"getChildren\", {\n    get: function get() {\n      return this.options.getChildren;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"levelPadding\", {\n    get: function get() {\n      return this.options.levelPadding || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"useVirtualScroll\", {\n    get: function get() {\n      return this.options.useVirtualScroll;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"animateExpand\", {\n    get: function get() {\n      return this.options.animateExpand;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"animateSpeed\", {\n    get: function get() {\n      return this.options.animateSpeed || 1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"animateAcceleration\", {\n    get: function get() {\n      return this.options.animateAcceleration || 1.2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"scrollOnActivate\", {\n    get: function get() {\n      return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"rtl\", {\n    get: function get() {\n      return !!this.options.rtl;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"rootId\", {\n    get: function get() {\n      return this.options.rootId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"useCheckbox\", {\n    get: function get() {\n      return this.options.useCheckbox;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"useTriState\", {\n    get: function get() {\n      return this.options.useTriState === undefined ? true : this.options.useTriState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"scrollContainer\", {\n    get: function get() {\n      return this.options.scrollContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeOptions.prototype, \"allowDragoverStyling\", {\n    get: function get() {\n      return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeOptions.prototype.getNodeClone = function (node) {\n    if (this.options.getNodeClone) {\n      return this.options.getNodeClone(node);\n    }\n\n    return omit(Object.assign({}, node.data), ['id']);\n  };\n\n  TreeOptions.prototype.allowDrop = function (element, to, $event) {\n    if (this.options.allowDrop instanceof Function) {\n      return this.options.allowDrop(element, to, $event);\n    } else {\n      return this.options.allowDrop === undefined ? true : this.options.allowDrop;\n    }\n  };\n\n  TreeOptions.prototype.allowDrag = function (node) {\n    if (this.options.allowDrag instanceof Function) {\n      return this.options.allowDrag(node);\n    } else {\n      return this.options.allowDrag;\n    }\n  };\n\n  TreeOptions.prototype.nodeClass = function (node) {\n    return this.options.nodeClass ? this.options.nodeClass(node) : '';\n  };\n\n  TreeOptions.prototype.nodeHeight = function (node) {\n    if (node.data.virtual) {\n      return 0;\n    }\n\n    var nodeHeight = this.options.nodeHeight || 22;\n\n    if (typeof nodeHeight === 'function') {\n      nodeHeight = nodeHeight(node);\n    } // account for drop slots:\n\n\n    return nodeHeight + (node.index === 0 ? 2 : 1) * this.dropSlotHeight;\n  };\n\n  Object.defineProperty(TreeOptions.prototype, \"dropSlotHeight\", {\n    get: function get() {\n      return isNumber(this.options.dropSlotHeight) ? this.options.dropSlotHeight : 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return TreeOptions;\n}();\n\nexport { TreeOptions };\nexport { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14, ɵ15 };","map":{"version":3,"sources":["../../lib/models/tree-options.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { TreeNode } from './tree-node.model';\nimport { TreeModel } from './tree.model';\nimport { KEYS } from '../constants/keys';\nimport { ITreeOptions } from '../defs/api';\n\nimport defaultsDeep from 'lodash/defaultsDeep';\nimport get from 'lodash/get';\nimport omit from 'lodash/omit';\nimport isNumber from 'lodash/isNumber';\n\nexport interface IActionHandler {\n  (tree: TreeModel, node: TreeNode, $event: any, ...rest);\n}\n\nexport const TREE_ACTIONS = {\n  TOGGLE_ACTIVE: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(),\n  TOGGLE_ACTIVE_MULTI: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(true),\n  TOGGLE_SELECTED: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleSelected(),\n  ACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(true),\n  DEACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(false),\n  SELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(true),\n  DESELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(false),\n  FOCUS: (tree: TreeModel, node: TreeNode, $event: any) => node.focus(),\n  TOGGLE_EXPANDED: (tree: TreeModel, node: TreeNode, $event: any) => node.hasChildren && node.toggleExpanded(),\n  EXPAND: (tree: TreeModel, node: TreeNode, $event: any) => node.expand(),\n  COLLAPSE: (tree: TreeModel, node: TreeNode, $event: any) => node.collapse(),\n  DRILL_DOWN: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillDown(),\n  DRILL_UP: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillUp(),\n  NEXT_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusNextNode(),\n  PREVIOUS_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusPreviousNode(),\n  MOVE_NODE: (tree: TreeModel, node: TreeNode, $event: any, {from , to}: {from: any, to: any}) => {\n    // default action assumes from = node, to = {parent, index}\n    if ($event.ctrlKey) {\n      tree.copyNode(from, to);\n    } else {\n      tree.moveNode(from, to);\n    }\n  }\n};\n\nconst defaultActionMapping: IActionMapping = {\n  mouse: {\n    click: TREE_ACTIONS.TOGGLE_ACTIVE,\n    dblClick: null,\n    contextMenu: null,\n    expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\n    checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\n    drop: TREE_ACTIONS.MOVE_NODE\n  },\n  keys: {\n    [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\n    [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\n    [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\n    [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\n    [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\n    [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\n  }\n};\n\nexport interface IActionMapping {\n  mouse?: {\n    click?: IActionHandler,\n    dblClick?: IActionHandler,\n    contextMenu?: IActionHandler,\n    expanderClick?: IActionHandler,\n    checkboxClick?: IActionHandler,\n    dragStart?: IActionHandler,\n    drag?: IActionHandler,\n    dragEnd?: IActionHandler,\n    dragOver?: IActionHandler,\n    dragLeave?: IActionHandler,\n    dragEnter?: IActionHandler,\n    drop?: IActionHandler,\n    mouseOver?: IActionHandler,\n    mouseOut?: IActionHandler\n  };\n  keys?: {\n    [key: number]: IActionHandler\n  };\n}\n\nexport class TreeOptions {\n  get hasChildrenField(): string { return this.options.hasChildrenField || 'hasChildren'; }\n  get childrenField(): string { return this.options.childrenField || 'children'; }\n  get displayField(): string { return this.options.displayField || 'name'; }\n  get idField(): string { return this.options.idField || 'id'; }\n  get isExpandedField(): string { return this.options.isExpandedField || 'isExpanded'; }\n  get getChildren(): any { return this.options.getChildren; }\n  get levelPadding(): number { return this.options.levelPadding || 0; }\n  get useVirtualScroll(): boolean { return this.options.useVirtualScroll; }\n  get animateExpand(): boolean { return this.options.animateExpand; }\n  get animateSpeed(): number { return this.options.animateSpeed || 1; }\n  get animateAcceleration(): number { return this.options.animateAcceleration || 1.2; }\n  get scrollOnActivate(): boolean { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\n  get rtl(): boolean { return !!this.options.rtl; }\n  get rootId(): any {return this.options.rootId; }\n  get useCheckbox(): boolean { return this.options.useCheckbox; }\n  get useTriState(): boolean { return this.options.useTriState === undefined ? true : this.options.useTriState; }\n  get scrollContainer(): HTMLElement { return this.options.scrollContainer; }\n  get allowDragoverStyling(): boolean { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\n  actionMapping: IActionMapping;\n\n  constructor(private options: ITreeOptions = {}) {\n    this.actionMapping = defaultsDeep({}, this.options.actionMapping, defaultActionMapping);\n    if (options.rtl) {\n      this.actionMapping.keys[KEYS.RIGHT] = <IActionHandler>get(options, ['actionMapping', 'keys', KEYS.RIGHT]) || TREE_ACTIONS.DRILL_UP;\n      this.actionMapping.keys[KEYS.LEFT] = <IActionHandler>get(options, ['actionMapping', 'keys', KEYS.LEFT]) || TREE_ACTIONS.DRILL_DOWN;\n    }\n  }\n\n  getNodeClone(node: TreeNode): any {\n    if (this.options.getNodeClone) {\n      return this.options.getNodeClone(node);\n    }\n\n    return omit(Object.assign({}, node.data), ['id']);\n  }\n\n  allowDrop(element, to, $event?): boolean {\n    if (this.options.allowDrop instanceof Function) {\n      return this.options.allowDrop(element, to, $event);\n    }\n    else {\n      return this.options.allowDrop === undefined ? true : this.options.allowDrop;\n    }\n  }\n\n  allowDrag(node: TreeNode): boolean {\n    if (this.options.allowDrag instanceof Function) {\n      return this.options.allowDrag(node);\n    } else {\n      return this.options.allowDrag;\n    }\n  }\n\n  nodeClass(node: TreeNode): string {\n    return this.options.nodeClass ? this.options.nodeClass(node) : '';\n  }\n\n  nodeHeight(node: TreeNode): number {\n    if (node.data.virtual) {\n      return 0;\n    }\n\n    let nodeHeight = this.options.nodeHeight || 22;\n\n    if (typeof nodeHeight === 'function') {\n      nodeHeight = nodeHeight(node);\n    }\n\n    // account for drop slots:\n    return nodeHeight + (node.index === 0 ?  2 : 1) * this.dropSlotHeight;\n  }\n\n  get dropSlotHeight(): number {\n    return isNumber(this.options.dropSlotHeight) ? this.options.dropSlotHeight : 2;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}