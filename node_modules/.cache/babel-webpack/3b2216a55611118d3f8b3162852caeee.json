{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '../mobx-angular/tree-mobx-autorun.directive';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from './tree-node-wrapper.component';\nimport * as ɵngcc4 from './tree-node-children.component';\nimport * as ɵngcc5 from './tree-node-drop-slot.component';\n\nfunction TreeNodeComponent_ng_container_0_div_1_tree_node_drop_slot_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-node-drop-slot\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"dropIndex\", ctx_r2.node.index)(\"node\", ctx_r2.node.parent);\n  }\n}\n\nfunction TreeNodeComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, TreeNodeComponent_ng_container_0_div_1_tree_node_drop_slot_1_Template, 1, 2, \"tree-node-drop-slot\", 3);\n    ɵngcc0.ɵɵelement(2, \"tree-node-wrapper\", 4);\n    ɵngcc0.ɵɵelement(3, \"tree-node-children\", 5);\n    ɵngcc0.ɵɵelement(4, \"tree-node-drop-slot\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassMap(ctx_r1.node.getClass());\n    ɵngcc0.ɵɵclassProp(\"tree-node\", true)(\"tree-node-expanded\", ctx_r1.node.isExpanded && ctx_r1.node.hasChildren)(\"tree-node-collapsed\", ctx_r1.node.isCollapsed && ctx_r1.node.hasChildren)(\"tree-node-leaf\", ctx_r1.node.isLeaf)(\"tree-node-active\", ctx_r1.node.isActive)(\"tree-node-focused\", ctx_r1.node.isFocused);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.index === 0);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"node\", ctx_r1.node)(\"index\", ctx_r1.index)(\"templates\", ctx_r1.templates);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"node\", ctx_r1.node)(\"templates\", ctx_r1.templates);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dropIndex\", ctx_r1.node.index + 1)(\"node\", ctx_r1.node.parent);\n  }\n}\n\nvar _c0 = function _c0(a0, a1, a2, a3) {\n  return {\n    $implicit: a0,\n    node: a1,\n    index: a2,\n    templates: a3\n  };\n};\n\nfunction TreeNodeComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TreeNodeComponent_ng_container_0_div_1_Template, 5, 22, \"div\", 1);\n    ɵngcc0.ɵɵelementContainer(2, 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.templates.treeNodeFullTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.templates.treeNodeFullTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction4(3, _c0, ctx_r0.node, ctx_r0.node, ctx_r0.index, ctx_r0.templates));\n  }\n}\n\nvar _c1 = function _c1() {\n  return {\n    dontDetach: true\n  };\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { TreeNode } from '../models/tree-node.model';\n\nvar TreeNodeComponent =\n/** @class */\nfunction () {\n  function TreeNodeComponent() {}\n\n  __decorate([Input(), __metadata(\"design:type\", TreeNode)], TreeNodeComponent.prototype, \"node\", void 0);\n\n  __decorate([Input(), __metadata(\"design:type\", Number)], TreeNodeComponent.prototype, \"index\", void 0);\n\n  __decorate([Input(), __metadata(\"design:type\", Object)], TreeNodeComponent.prototype, \"templates\", void 0);\n\n  TreeNodeComponent.ɵfac = function TreeNodeComponent_Factory(t) {\n    return new (t || TreeNodeComponent)();\n  };\n\n  TreeNodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: TreeNodeComponent,\n    selectors: [[\"TreeNode\"], [\"tree-node\"]],\n    inputs: {\n      node: \"node\",\n      index: \"index\",\n      templates: \"templates\"\n    },\n    decls: 1,\n    vars: 2,\n    consts: [[4, \"treeMobxAutorun\"], [3, \"class\", \"tree-node\", \"tree-node-expanded\", \"tree-node-collapsed\", \"tree-node-leaf\", \"tree-node-active\", \"tree-node-focused\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"dropIndex\", \"node\", 4, \"ngIf\"], [3, \"node\", \"index\", \"templates\"], [3, \"node\", \"templates\"], [3, \"dropIndex\", \"node\"]],\n    template: function TreeNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TreeNodeComponent_ng_container_0_Template, 3, 8, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c1));\n      }\n    },\n    directives: [ɵngcc1.TreeMobxAutorunDirective, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc3.TreeNodeWrapperComponent, ɵngcc4.TreeNodeChildrenComponent, ɵngcc5.TreeNodeDropSlot],\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TreeNodeComponent, [{\n      type: Component,\n      args: [{\n        selector: 'TreeNode, tree-node',\n        encapsulation: ViewEncapsulation.None,\n        styles: [],\n        template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <div\\n        *ngIf=\\\"!templates.treeNodeFullTemplate\\\"\\n        [class]=\\\"node.getClass()\\\"\\n        [class.tree-node]=\\\"true\\\"\\n        [class.tree-node-expanded]=\\\"node.isExpanded && node.hasChildren\\\"\\n        [class.tree-node-collapsed]=\\\"node.isCollapsed && node.hasChildren\\\"\\n        [class.tree-node-leaf]=\\\"node.isLeaf\\\"\\n        [class.tree-node-active]=\\\"node.isActive\\\"\\n        [class.tree-node-focused]=\\\"node.isFocused\\\"\\n      >\\n        <tree-node-drop-slot\\n          *ngIf=\\\"index === 0\\\"\\n          [dropIndex]=\\\"node.index\\\"\\n          [node]=\\\"node.parent\\\"\\n        ></tree-node-drop-slot>\\n\\n        <tree-node-wrapper\\n          [node]=\\\"node\\\"\\n          [index]=\\\"index\\\"\\n          [templates]=\\\"templates\\\"\\n        ></tree-node-wrapper>\\n\\n        <tree-node-children\\n          [node]=\\\"node\\\"\\n          [templates]=\\\"templates\\\"\\n        ></tree-node-children>\\n        <tree-node-drop-slot\\n          [dropIndex]=\\\"node.index + 1\\\"\\n          [node]=\\\"node.parent\\\"\\n        ></tree-node-drop-slot>\\n      </div>\\n      <ng-container\\n        [ngTemplateOutlet]=\\\"templates.treeNodeFullTemplate\\\"\\n        [ngTemplateOutletContext]=\\\"{\\n          $implicit: node,\\n          node: node,\\n          index: index,\\n          templates: templates\\n        }\\\"\\n      >\\n      </ng-container>\\n    </ng-container>\\n  \"\n      }]\n    }], function () {\n      return [];\n    }, {\n      node: [{\n        type: Input\n      }],\n      index: [{\n        type: Input\n      }],\n      templates: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return TreeNodeComponent;\n}();\n\nexport { TreeNodeComponent };","map":{"version":3,"sources":["../../lib/components/tree-node.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACE,SADF,EAEE,KAFF,EAGE,iBAHF,QAKO,eALP;AAMA,SAAS,QAAT,QAAyB,2BAAzB;;AAoDA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA,CAIC;;AAHU,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAK,QAAL,CAAD,CAAA,EACX,iBAAA,CAAA,SADW,EACX,MADW,EACX,KAD0B,CAAf,CAAA;;AACA,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAA,MAAA,CAAD,CAAA,EAEV,iBAAA,CAAA,SAFU,EAEV,OAFU,EAEV,KAFwB,CAAd,CAAA;;AACA,EAAA,UAAA,CAAA,CAAR,KAAK,EAAG,EAAC,UAAA,CAAA,aAAA,EAAA,MAAA,CAAD,CAAA,EAEc,iBAAA,CAAA,SAFd,EAEc,WAFd,EAEc,KAFC,CAAf,CAAA;;AAHE,EAAA,iBAAA,CAAA,IAAA,GAAiB,SAlD7B,yBAkD6B,CAlDnB,CAkDmB,EAlDnB;AAAA,WACT,KAAQ,CAAA,IAAE,iBAAV,GADS;AACsB,GAiDpB;;AAhDX,EAAA,iBAAA,CAAA,IAAA,GAAe,MAAA,CAAA,iBAAA,CAAsB;AAAA,IAAA,IAAA,EACrC,iBADqC;AAC3B,IAAA,SACV,EAAA,CAAA,CAAQ,UAAR,CAAA,EAAU,CAAA,WAAA,CAAV,CAFqC;AAE3B,IAAA,MAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,KAAA,EAAA,OAAA;AAAA,MAAA,SAAA,EAAA;AAAA,KAF2B;AAE3B,IAAA,KAAA,EAAA,CAF2B;AAE3B,IAAA,IAAA,EAAA,CAF2B;AAE3B,IAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,EAAA,WAAA,EAAA,oBAAA,EAAA,qBAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,mBAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,kBAAA,EAAA,yBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,MAAA,EAAA,OAAA,EAAA,WAAA,CAAA,EAAA,CAAA,CAAA,EAAA,MAAA,EAAA,WAAA,CAAA,EAAA,CAAA,CAAA,EAAA,WAAA,EAAA,MAAA,CAAA,CAF2B;AAE3B,IAAA,QAAA,EAAA,SAAA,0BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,UAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;KAF2B;mLAAA;;AAAA,GAAtB,CAAf;;;;;;;;;;kBA8CC;;;;;;;;;;;;;;;AAOH,G;;AADA,SAAA,iBAAA;AAAC,CAJD,EAAA;;AAKA,SALa,iBAKb","sourcesContent":["import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  TemplateRef\n} from '@angular/core';\nimport { TreeNode } from '../models/tree-node.model';\n\n@Component({\n  selector: 'TreeNode, tree-node',\n  encapsulation: ViewEncapsulation.None,\n  styles: [],\n  template: `\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\n      <div\n        *ngIf=\"!templates.treeNodeFullTemplate\"\n        [class]=\"node.getClass()\"\n        [class.tree-node]=\"true\"\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\n        [class.tree-node-leaf]=\"node.isLeaf\"\n        [class.tree-node-active]=\"node.isActive\"\n        [class.tree-node-focused]=\"node.isFocused\"\n      >\n        <tree-node-drop-slot\n          *ngIf=\"index === 0\"\n          [dropIndex]=\"node.index\"\n          [node]=\"node.parent\"\n        ></tree-node-drop-slot>\n\n        <tree-node-wrapper\n          [node]=\"node\"\n          [index]=\"index\"\n          [templates]=\"templates\"\n        ></tree-node-wrapper>\n\n        <tree-node-children\n          [node]=\"node\"\n          [templates]=\"templates\"\n        ></tree-node-children>\n        <tree-node-drop-slot\n          [dropIndex]=\"node.index + 1\"\n          [node]=\"node.parent\"\n        ></tree-node-drop-slot>\n      </div>\n      <ng-container\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\n        [ngTemplateOutletContext]=\"{\n          $implicit: node,\n          node: node,\n          index: index,\n          templates: templates\n        }\"\n      >\n      </ng-container>\n    </ng-container>\n  `\n})\nexport class TreeNodeComponent {\n  @Input() node: TreeNode;\n  @Input() index: number;\n  @Input() templates: any;\n}\n"]},"metadata":{},"sourceType":"module"}