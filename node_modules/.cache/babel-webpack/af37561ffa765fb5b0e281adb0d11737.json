{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { observable, computed, reaction, action } from 'mobx';\nimport { TREE_EVENTS } from '../constants/events';\nimport first from 'lodash/first';\nimport last from 'lodash/last';\nimport some from 'lodash/some';\nimport every from 'lodash/every';\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode(data, parent, treeModel, index) {\n    var _this = this;\n\n    this.data = data;\n    this.parent = parent;\n    this.treeModel = treeModel;\n    this.position = 0;\n\n    this.allowDrop = function (element, $event) {\n      return _this.options.allowDrop(element, {\n        parent: _this,\n        index: 0\n      }, $event);\n    };\n\n    this.allowDragoverStyling = function () {\n      return _this.options.allowDragoverStyling;\n    };\n\n    if (this.id === undefined || this.id === null) {\n      this.id = uuid();\n    } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\n\n\n    this.index = index;\n\n    if (this.getField('children')) {\n      this._initChildren();\n    }\n\n    this.autoLoadChildren();\n  }\n\n  Object.defineProperty(TreeNode.prototype, \"isHidden\", {\n    get: function get() {\n      return this.treeModel.isHidden(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  Object.defineProperty(TreeNode.prototype, \"isExpanded\", {\n    get: function get() {\n      return this.treeModel.isExpanded(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  Object.defineProperty(TreeNode.prototype, \"isActive\", {\n    get: function get() {\n      return this.treeModel.isActive(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  Object.defineProperty(TreeNode.prototype, \"isFocused\", {\n    get: function get() {\n      return this.treeModel.isNodeFocused(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  Object.defineProperty(TreeNode.prototype, \"isSelected\", {\n    get: function get() {\n      if (this.isSelectable()) {\n        return this.treeModel.isSelected(this);\n      } else {\n        return some(this.children, function (node) {\n          return node.isSelected;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  Object.defineProperty(TreeNode.prototype, \"isAllSelected\", {\n    get: function get() {\n      if (this.isSelectable()) {\n        return this.treeModel.isSelected(this);\n      } else {\n        return every(this.children, function (node) {\n          return node.isAllSelected;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  Object.defineProperty(TreeNode.prototype, \"isPartiallySelected\", {\n    get: function get() {\n      return this.isSelected && !this.isAllSelected;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNode.prototype, \"level\", {\n    get: function get() {\n      return this.parent ? this.parent.level + 1 : 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNode.prototype, \"path\", {\n    get: function get() {\n      return this.parent ? this.parent.path.concat([this.id]) : [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNode.prototype, \"elementRef\", {\n    get: function get() {\n      throw \"Element Ref is no longer supported since introducing virtual scroll\\n\\n      You may use a template to obtain a reference to the element\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNode.prototype, \"originalNode\", {\n    get: function get() {\n      return this._originalNode;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ;\n  Object.defineProperty(TreeNode.prototype, \"hasChildren\", {\n    // helper get functions:\n    get: function get() {\n      return !!(this.getField('hasChildren') || this.children && this.children.length > 0);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNode.prototype, \"isCollapsed\", {\n    get: function get() {\n      return !this.isExpanded;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNode.prototype, \"isLeaf\", {\n    get: function get() {\n      return !this.hasChildren;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNode.prototype, \"isRoot\", {\n    get: function get() {\n      return this.parent.data.virtual;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNode.prototype, \"realParent\", {\n    get: function get() {\n      return this.isRoot ? null : this.parent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNode.prototype, \"options\", {\n    // proxy functions:\n    get: function get() {\n      return this.treeModel.options;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeNode.prototype.fireEvent = function (event) {\n    this.treeModel.fireEvent(event);\n  };\n\n  Object.defineProperty(TreeNode.prototype, \"displayField\", {\n    // field accessors:\n    get: function get() {\n      return this.getField('display');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeNode.prototype, \"id\", {\n    get: function get() {\n      return this.getField('id');\n    },\n    set: function set(value) {\n      this.setField('id', value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeNode.prototype.getField = function (key) {\n    return this.data[this.options[key + \"Field\"]];\n  };\n\n  TreeNode.prototype.setField = function (key, value) {\n    this.data[this.options[key + \"Field\"]] = value;\n  }; // traversing:\n\n\n  TreeNode.prototype._findAdjacentSibling = function (steps, skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    var siblings = this._getParentsChildren(skipHidden);\n\n    var index = siblings.indexOf(this);\n    return siblings.length > index + steps ? siblings[index + steps] : null;\n  };\n\n  TreeNode.prototype.findNextSibling = function (skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    return this._findAdjacentSibling(+1, skipHidden);\n  };\n\n  TreeNode.prototype.findPreviousSibling = function (skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    return this._findAdjacentSibling(-1, skipHidden);\n  };\n\n  TreeNode.prototype.getVisibleChildren = function () {\n    return this.visibleChildren;\n  };\n\n  Object.defineProperty(TreeNode.prototype, \"visibleChildren\", {\n    get: function get() {\n      return (this.children || []).filter(function (node) {\n        return !node.isHidden;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeNode.prototype.getFirstChild = function (skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    var children = skipHidden ? this.visibleChildren : this.children;\n    return first(children || []);\n  };\n\n  TreeNode.prototype.getLastChild = function (skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    var children = skipHidden ? this.visibleChildren : this.children;\n    return last(children || []);\n  };\n\n  TreeNode.prototype.findNextNode = function (goInside, skipHidden) {\n    if (goInside === void 0) {\n      goInside = true;\n    }\n\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    return goInside && this.isExpanded && this.getFirstChild(skipHidden) || this.findNextSibling(skipHidden) || this.parent && this.parent.findNextNode(false, skipHidden);\n  };\n\n  TreeNode.prototype.findPreviousNode = function (skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    var previousSibling = this.findPreviousSibling(skipHidden);\n\n    if (!previousSibling) {\n      return this.realParent;\n    }\n\n    return previousSibling._getLastOpenDescendant(skipHidden);\n  };\n\n  TreeNode.prototype._getLastOpenDescendant = function (skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    var lastChild = this.getLastChild(skipHidden);\n    return this.isCollapsed || !lastChild ? this : lastChild._getLastOpenDescendant(skipHidden);\n  };\n\n  TreeNode.prototype._getParentsChildren = function (skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    var children = this.parent && (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\n    return children || [];\n  };\n\n  TreeNode.prototype.getIndexInParent = function (skipHidden) {\n    if (skipHidden === void 0) {\n      skipHidden = false;\n    }\n\n    return this._getParentsChildren(skipHidden).indexOf(this);\n  };\n\n  TreeNode.prototype.isDescendantOf = function (node) {\n    if (this === node) return true;else return this.parent && this.parent.isDescendantOf(node);\n  };\n\n  TreeNode.prototype.getNodePadding = function () {\n    return this.options.levelPadding * (this.level - 1) + 'px';\n  };\n\n  TreeNode.prototype.getClass = function () {\n    return [this.options.nodeClass(this), \"tree-node-level-\" + this.level].join(' ');\n  };\n\n  TreeNode.prototype.onDrop = function ($event) {\n    this.mouseAction('drop', $event.event, {\n      from: $event.element,\n      to: {\n        parent: this,\n        index: 0,\n        dropOnNode: true\n      }\n    });\n  };\n\n  TreeNode.prototype.allowDrag = function () {\n    return this.options.allowDrag(this);\n  }; // helper methods:\n\n\n  TreeNode.prototype.loadNodeChildren = function () {\n    var _this = this;\n\n    if (!this.options.getChildren) {\n      return Promise.resolve(); // Not getChildren method - for using redux\n    }\n\n    return Promise.resolve(this.options.getChildren(this)).then(function (children) {\n      if (children) {\n        _this.setField('children', children);\n\n        _this._initChildren();\n\n        if (_this.options.useTriState && _this.treeModel.isSelected(_this)) {\n          _this.setIsSelected(true);\n        }\n\n        _this.children.forEach(function (child) {\n          if (child.getField('isExpanded') && child.hasChildren) {\n            child.expand();\n          }\n        });\n      }\n    }).then(function () {\n      _this.fireEvent({\n        eventName: TREE_EVENTS.loadNodeChildren,\n        node: _this\n      });\n    });\n  };\n\n  TreeNode.prototype.expand = function () {\n    if (!this.isExpanded) {\n      this.toggleExpanded();\n    }\n\n    return this;\n  };\n\n  TreeNode.prototype.collapse = function () {\n    if (this.isExpanded) {\n      this.toggleExpanded();\n    }\n\n    return this;\n  };\n\n  TreeNode.prototype.doForAll = function (fn) {\n    var _this = this;\n\n    Promise.resolve(fn(this)).then(function () {\n      if (_this.children) {\n        _this.children.forEach(function (child) {\n          return child.doForAll(fn);\n        });\n      }\n    });\n  };\n\n  TreeNode.prototype.expandAll = function () {\n    this.doForAll(function (node) {\n      return node.expand();\n    });\n  };\n\n  TreeNode.prototype.collapseAll = function () {\n    this.doForAll(function (node) {\n      return node.collapse();\n    });\n  };\n\n  TreeNode.prototype.ensureVisible = function () {\n    if (this.realParent) {\n      this.realParent.expand();\n      this.realParent.ensureVisible();\n    }\n\n    return this;\n  };\n\n  TreeNode.prototype.toggleExpanded = function () {\n    this.setIsExpanded(!this.isExpanded);\n    return this;\n  };\n\n  TreeNode.prototype.setIsExpanded = function (value) {\n    if (this.hasChildren) {\n      this.treeModel.setExpandedNode(this, value);\n    }\n\n    return this;\n  };\n\n  ;\n\n  TreeNode.prototype.autoLoadChildren = function () {\n    var _this = this;\n\n    this.handler = reaction(function () {\n      return _this.isExpanded;\n    }, function (isExpanded) {\n      if (!_this.children && _this.hasChildren && isExpanded) {\n        _this.loadNodeChildren();\n      }\n    }, {\n      fireImmediately: true\n    });\n  };\n\n  TreeNode.prototype.dispose = function () {\n    if (this.children) {\n      this.children.forEach(function (child) {\n        return child.dispose();\n      });\n    }\n\n    if (this.handler) {\n      this.handler();\n    }\n\n    this.parent = null;\n    this.children = null;\n  };\n\n  TreeNode.prototype.setIsActive = function (value, multi) {\n    if (multi === void 0) {\n      multi = false;\n    }\n\n    this.treeModel.setActiveNode(this, value, multi);\n\n    if (value) {\n      this.focus(this.options.scrollOnActivate);\n    }\n\n    return this;\n  };\n\n  TreeNode.prototype.isSelectable = function () {\n    return this.isLeaf || !this.children || !this.options.useTriState;\n  };\n\n  TreeNode.prototype.setIsSelected = function (value) {\n    if (this.isSelectable()) {\n      this.treeModel.setSelectedNode(this, value);\n    } else {\n      this.visibleChildren.forEach(function (child) {\n        return child.setIsSelected(value);\n      });\n    }\n\n    return this;\n  };\n\n  TreeNode.prototype.toggleSelected = function () {\n    this.setIsSelected(!this.isSelected);\n    return this;\n  };\n\n  TreeNode.prototype.toggleActivated = function (multi) {\n    if (multi === void 0) {\n      multi = false;\n    }\n\n    this.setIsActive(!this.isActive, multi);\n    return this;\n  };\n\n  TreeNode.prototype.setActiveAndVisible = function (multi) {\n    if (multi === void 0) {\n      multi = false;\n    }\n\n    this.setIsActive(true, multi).ensureVisible();\n    setTimeout(this.scrollIntoView.bind(this));\n    return this;\n  };\n\n  TreeNode.prototype.scrollIntoView = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    this.treeModel.virtualScroll.scrollIntoView(this, force);\n  };\n\n  TreeNode.prototype.focus = function (scroll) {\n    if (scroll === void 0) {\n      scroll = true;\n    }\n\n    var previousNode = this.treeModel.getFocusedNode();\n    this.treeModel.setFocusedNode(this);\n\n    if (scroll) {\n      this.scrollIntoView();\n    }\n\n    if (previousNode) {\n      this.fireEvent({\n        eventName: TREE_EVENTS.blur,\n        node: previousNode\n      });\n    }\n\n    this.fireEvent({\n      eventName: TREE_EVENTS.focus,\n      node: this\n    });\n    return this;\n  };\n\n  TreeNode.prototype.blur = function () {\n    var previousNode = this.treeModel.getFocusedNode();\n    this.treeModel.setFocusedNode(null);\n\n    if (previousNode) {\n      this.fireEvent({\n        eventName: TREE_EVENTS.blur,\n        node: this\n      });\n    }\n\n    return this;\n  };\n\n  TreeNode.prototype.setIsHidden = function (value) {\n    this.treeModel.setIsHidden(this, value);\n  };\n\n  TreeNode.prototype.hide = function () {\n    this.setIsHidden(true);\n  };\n\n  TreeNode.prototype.show = function () {\n    this.setIsHidden(false);\n  };\n\n  TreeNode.prototype.mouseAction = function (actionName, $event, data) {\n    if (data === void 0) {\n      data = null;\n    }\n\n    this.treeModel.setFocus(true);\n    var actionMapping = this.options.actionMapping.mouse;\n    var action = actionMapping[actionName];\n\n    if (action) {\n      action(this.treeModel, this, $event, data);\n    }\n  };\n\n  TreeNode.prototype.getSelfHeight = function () {\n    return this.options.nodeHeight(this);\n  };\n\n  TreeNode.prototype._initChildren = function () {\n    var _this = this;\n\n    this.children = this.getField('children').map(function (c, index) {\n      return new TreeNode(c, _this, _this.treeModel, index);\n    });\n  };\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isHidden\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isExpanded\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isActive\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isFocused\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isSelected\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isAllSelected\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isPartiallySelected\", null);\n\n  __decorate([observable, __metadata(\"design:type\", Array)], TreeNode.prototype, \"children\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", Number)], TreeNode.prototype, \"index\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", Object)], TreeNode.prototype, \"position\", void 0);\n\n  __decorate([observable, __metadata(\"design:type\", Number)], TreeNode.prototype, \"height\", void 0);\n\n  __decorate([computed, __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"level\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"path\", null);\n\n  __decorate([computed, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"visibleChildren\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeNode.prototype, \"setIsSelected\", null);\n\n  __decorate([action, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], TreeNode.prototype, \"_initChildren\", null);\n\n  return TreeNode;\n}();\n\nexport { TreeNode };\n\nfunction uuid() {\n  return Math.floor(Math.random() * 10000000000000);\n}","map":{"version":3,"sources":["../../lib/models/tree-node.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { observable, computed, reaction, autorun, action, IReactionDisposer } from 'mobx';\nimport { TreeModel } from './tree.model';\nimport { TreeOptions } from './tree-options.model';\nimport { ITreeNode } from '../defs/api';\nimport { TREE_EVENTS } from '../constants/events';\n\nimport first from 'lodash/first';\nimport last from 'lodash/last';\nimport some from 'lodash/some';\nimport every from 'lodash/every';\n\nexport class TreeNode implements ITreeNode {\n  private handler: IReactionDisposer;\n  @computed get isHidden() { return this.treeModel.isHidden(this); };\n  @computed get isExpanded() { return this.treeModel.isExpanded(this); };\n  @computed get isActive() { return this.treeModel.isActive(this); };\n  @computed get isFocused() { return this.treeModel.isNodeFocused(this); };\n  @computed get isSelected() {\n    if (this.isSelectable()) {\n        return this.treeModel.isSelected(this);\n    } else {\n      return some(this.children, (node: TreeNode) => node.isSelected);\n    }\n  };\n  @computed get isAllSelected() {\n    if (this.isSelectable()) {\n      return this.treeModel.isSelected(this);\n    } else {\n      return every(this.children, (node: TreeNode) => node.isAllSelected);\n    }\n  };\n  @computed get isPartiallySelected() {\n    return this.isSelected && !this.isAllSelected;\n  }\n\n  @observable children: TreeNode[];\n  @observable index: number;\n  @observable position = 0;\n  @observable height: number;\n  @computed get level(): number {\n    return this.parent ? this.parent.level + 1 : 0;\n  }\n  @computed get path(): string[] {\n    return this.parent ? [...this.parent.path, this.id] : [];\n  }\n\n  get elementRef(): any {\n    throw `Element Ref is no longer supported since introducing virtual scroll\\n\n      You may use a template to obtain a reference to the element`;\n  }\n\n  private _originalNode: any;\n  get originalNode() { return this._originalNode; };\n\n  constructor(public data: any, public parent: TreeNode, public treeModel: TreeModel, index: number) {\n    if (this.id === undefined || this.id === null) {\n      this.id = uuid();\n    } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\n    this.index = index;\n\n    if (this.getField('children')) {\n      this._initChildren();\n    }\n    this.autoLoadChildren();\n  }\n\n  // helper get functions:\n  get hasChildren(): boolean {\n    return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\n  }\n  get isCollapsed(): boolean { return !this.isExpanded; }\n  get isLeaf(): boolean { return !this.hasChildren; }\n  get isRoot(): boolean { return this.parent.data.virtual; }\n  get realParent(): TreeNode { return this.isRoot ? null : this.parent; }\n\n  // proxy functions:\n  get options(): TreeOptions { return this.treeModel.options; }\n  fireEvent(event) { this.treeModel.fireEvent(event); }\n\n  // field accessors:\n  get displayField() {\n    return this.getField('display');\n  }\n\n  get id() {\n    return this.getField('id');\n  }\n\n  set id(value) {\n    this.setField('id', value);\n  }\n\n  getField(key) {\n    return this.data[this.options[`${key}Field`]];\n  }\n\n  setField(key, value) {\n    this.data[this.options[`${key}Field`]] = value;\n  }\n\n  // traversing:\n  _findAdjacentSibling(steps, skipHidden = false) {\n    const siblings = this._getParentsChildren(skipHidden);\n    const index = siblings.indexOf(this);\n\n    return siblings.length > index + steps ? siblings[index + steps] : null;\n  }\n\n  findNextSibling(skipHidden = false) {\n    return this._findAdjacentSibling(+1, skipHidden);\n  }\n\n  findPreviousSibling(skipHidden = false) {\n    return this._findAdjacentSibling(-1, skipHidden);\n  }\n\n  getVisibleChildren() {\n    return this.visibleChildren;\n  }\n\n  @computed get visibleChildren() {\n    return (this.children || []).filter((node) => !node.isHidden);\n  }\n\n  getFirstChild(skipHidden = false) {\n    let children = skipHidden ? this.visibleChildren : this.children;\n\n    return first(children || []);\n  }\n\n  getLastChild(skipHidden = false) {\n    let children = skipHidden ? this.visibleChildren : this.children;\n\n    return last(children || []);\n  }\n\n  findNextNode(goInside = true, skipHidden = false) {\n    return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\n           this.findNextSibling(skipHidden) ||\n           this.parent && this.parent.findNextNode(false, skipHidden);\n  }\n\n  findPreviousNode(skipHidden = false) {\n    let previousSibling = this.findPreviousSibling(skipHidden);\n    if (!previousSibling) {\n      return this.realParent;\n    }\n    return previousSibling._getLastOpenDescendant(skipHidden);\n  }\n\n  _getLastOpenDescendant(skipHidden = false) {\n    const lastChild = this.getLastChild(skipHidden);\n    return (this.isCollapsed || !lastChild)\n      ? this\n      : lastChild._getLastOpenDescendant(skipHidden);\n  }\n\n  private _getParentsChildren(skipHidden = false): any[] {\n    const children = this.parent &&\n      (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\n\n    return children || [];\n  }\n\n  private getIndexInParent(skipHidden = false) {\n    return this._getParentsChildren(skipHidden).indexOf(this);\n  }\n\n  isDescendantOf(node: TreeNode) {\n    if (this === node) return true;\n    else return this.parent && this.parent.isDescendantOf(node);\n  }\n\n  getNodePadding(): string {\n    return this.options.levelPadding * (this.level - 1) + 'px';\n  }\n\n  getClass(): string {\n    return [this.options.nodeClass(this), `tree-node-level-${ this.level }`].join(' ');\n  }\n\n  onDrop($event) {\n    this.mouseAction('drop', $event.event, {\n      from: $event.element,\n      to: { parent: this, index: 0, dropOnNode: true }\n    });\n  }\n\n  allowDrop = (element, $event?) => {\n    return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\n  }\n\n  allowDragoverStyling = () => {\n    return this.options.allowDragoverStyling;\n  }\n\n  allowDrag() {\n    return this.options.allowDrag(this);\n  }\n\n\n  // helper methods:\n  loadNodeChildren() {\n    if (!this.options.getChildren) {\n      return Promise.resolve(); // Not getChildren method - for using redux\n    }\n    return Promise.resolve(this.options.getChildren(this))\n      .then((children) => {\n        if (children) {\n          this.setField('children', children);\n          this._initChildren();\n          if (this.options.useTriState && this.treeModel.isSelected(this)) {\n            this.setIsSelected(true);\n          }\n          this.children.forEach((child) => {\n            if (child.getField('isExpanded') && child.hasChildren) {\n              child.expand();\n            }\n          });\n      }}).then(() => {\n        this.fireEvent({\n          eventName: TREE_EVENTS.loadNodeChildren,\n          node: this\n        });\n      });\n  }\n\n  expand() {\n    if (!this.isExpanded) {\n      this.toggleExpanded();\n    }\n\n    return this;\n  }\n\n  collapse() {\n    if (this.isExpanded) {\n      this.toggleExpanded();\n    }\n\n    return this;\n  }\n\n  doForAll(fn: (node: ITreeNode) => any) {\n    Promise.resolve(fn(this)).then(() => {\n      if (this.children) {\n        this.children.forEach((child) => child.doForAll(fn));\n      }\n    });\n  }\n\n  expandAll() {\n    this.doForAll((node) => node.expand());\n  }\n\n  collapseAll() {\n    this.doForAll((node) => node.collapse());\n  }\n\n  ensureVisible() {\n    if (this.realParent) {\n      this.realParent.expand();\n      this.realParent.ensureVisible();\n    }\n\n    return this;\n  }\n\n  toggleExpanded() {\n    this.setIsExpanded(!this.isExpanded);\n\n    return this;\n  }\n\n  setIsExpanded(value) {\n    if (this.hasChildren) {\n      this.treeModel.setExpandedNode(this, value);\n    }\n\n    return this;\n  };\n\n  autoLoadChildren() {\n    this.handler =\n      reaction(\n        () => this.isExpanded,\n        (isExpanded) => {\n          if (!this.children && this.hasChildren && isExpanded) {\n            this.loadNodeChildren();\n          }\n        },\n        { fireImmediately: true }\n      );\n  }\n\n  dispose() {\n    if (this.children) {\n      this.children.forEach((child) => child.dispose());\n    }\n    if (this.handler) {\n      this.handler();\n    }\n    this.parent = null;\n    this.children = null;\n  }\n\n  setIsActive(value, multi = false) {\n    this.treeModel.setActiveNode(this, value, multi);\n    if (value) {\n      this.focus(this.options.scrollOnActivate);\n    }\n\n    return this;\n  }\n\n  isSelectable() {\n    return this.isLeaf || !this.children || !this.options.useTriState;\n  }\n\n  @action setIsSelected(value) {\n    if (this.isSelectable()) {\n      this.treeModel.setSelectedNode(this, value);\n    } else {\n      this.visibleChildren.forEach((child) => child.setIsSelected(value));\n    }\n\n    return this;\n  }\n\n  toggleSelected() {\n    this.setIsSelected(!this.isSelected);\n\n    return this;\n  }\n\n  toggleActivated(multi = false) {\n    this.setIsActive(!this.isActive, multi);\n\n    return this;\n  }\n\n  setActiveAndVisible(multi = false) {\n    this.setIsActive(true, multi)\n      .ensureVisible();\n\n    setTimeout(this.scrollIntoView.bind(this));\n\n    return this;\n  }\n\n  scrollIntoView(force = false) {\n    this.treeModel.virtualScroll.scrollIntoView(this, force);\n  }\n\n  focus(scroll = true) {\n    let previousNode = this.treeModel.getFocusedNode();\n    this.treeModel.setFocusedNode(this);\n    if (scroll) {\n      this.scrollIntoView();\n    }\n    if (previousNode) {\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\n    }\n    this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\n\n    return this;\n  }\n\n  blur() {\n    let previousNode = this.treeModel.getFocusedNode();\n    this.treeModel.setFocusedNode(null);\n    if (previousNode) {\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\n    }\n\n    return this;\n  }\n\n  setIsHidden(value) {\n    this.treeModel.setIsHidden(this, value);\n  }\n\n  hide() {\n    this.setIsHidden(true);\n  }\n\n  show() {\n    this.setIsHidden(false);\n  }\n\n  mouseAction(actionName: string, $event, data: any = null) {\n    this.treeModel.setFocus(true);\n\n    const actionMapping = this.options.actionMapping.mouse;\n    const action = actionMapping[actionName];\n\n    if (action) {\n      action(this.treeModel, this, $event, data);\n    }\n  }\n\n  getSelfHeight() {\n    return this.options.nodeHeight(this);\n  }\n\n  @action _initChildren() {\n    this.children = this.getField('children')\n      .map((c, index) => new TreeNode(c, this, this.treeModel, index));\n  }\n}\n\nfunction uuid() {\n  return Math.floor(Math.random() * 10000000000000);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}