{"version":3,"file":"tree.model.d.ts","sources":["tree.model.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { TreeNode } from './tree-node.model';\nimport { TreeOptions } from './tree-options.model';\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\nexport declare class TreeModel implements ITreeModel, OnDestroy {\n    static focusedTree: any;\n    options: TreeOptions;\n    nodes: any[];\n    eventNames: string[];\n    virtualScroll: TreeVirtualScroll;\n    roots: TreeNode[];\n    expandedNodeIds: IDTypeDictionary;\n    selectedLeafNodeIds: IDTypeDictionary;\n    activeNodeIds: IDTypeDictionary;\n    hiddenNodeIds: IDTypeDictionary;\n    focusedNodeId: IDType;\n    virtualRoot: TreeNode;\n    private firstUpdate;\n    private events;\n    private subscriptions;\n    fireEvent(event: any): void;\n    subscribe(eventName: any, fn: any): void;\n    getFocusedNode(): TreeNode;\n    getActiveNode(): TreeNode;\n    getActiveNodes(): TreeNode[];\n    getVisibleRoots(): TreeNode[];\n    getFirstRoot(skipHidden?: boolean): TreeNode;\n    getLastRoot(skipHidden?: boolean): TreeNode;\n    readonly isFocused: boolean;\n    isNodeFocused(node: any): boolean;\n    isEmptyTree(): boolean;\n    readonly focusedNode: any;\n    readonly expandedNodes: any[];\n    readonly activeNodes: any[];\n    readonly hiddenNodes: any[];\n    readonly selectedLeafNodes: any[];\n    getNodeByPath(path: any[], startNode?: any): TreeNode;\n    getNodeById(id: any): any;\n    getNodeBy(predicate: any, startNode?: any): any;\n    isExpanded(node: any): boolean;\n    isHidden(node: any): boolean;\n    isActive(node: any): boolean;\n    isSelected(node: any): boolean;\n    ngOnDestroy(): void;\n    dispose(): void;\n    unsubscribeAll(): void;\n    setData({ nodes, options, events }: {\n        nodes: any;\n        options: any;\n        events: any;\n    }): void;\n    update(): void;\n    setFocusedNode(node: any): void;\n    setFocus(value: any): void;\n    doForAll(fn: any): void;\n    focusNextNode(): void;\n    focusPreviousNode(): void;\n    focusDrillDown(): void;\n    focusDrillUp(): void;\n    setActiveNode(node: any, value: any, multi?: boolean): void;\n    setSelectedNode(node: any, value: any): void;\n    setExpandedNode(node: any, value: any): void;\n    expandAll(): void;\n    collapseAll(): void;\n    setIsHidden(node: any, value: any): void;\n    setHiddenNodeIds(nodeIds: any): void;\n    performKeyAction(node: any, $event: any): boolean;\n    filterNodes(filter: any, autoShow?: boolean): void;\n    clearFilter(): void;\n    moveNode(node: any, to: any): void;\n    copyNode(node: any, to: any): void;\n    getState(): {\n        expandedNodeIds: IDTypeDictionary;\n        selectedLeafNodeIds: IDTypeDictionary;\n        activeNodeIds: IDTypeDictionary;\n        hiddenNodeIds: IDTypeDictionary;\n        focusedNodeId: IDType;\n    };\n    setState(state: any): void;\n    subscribeToState(fn: any): void;\n    canMoveNode(node: any, to: any, fromIndex?: any): boolean;\n    calculateExpandedNodes(): void;\n    private _filterNode;\n    private _calculateExpandedNodes;\n    private _setActiveNodeSingle;\n    private _setActiveNodeMulti;\n}\n"]}