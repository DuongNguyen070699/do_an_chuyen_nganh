import { HttpParams } from '@angular/common/http';
import { RequestQueryBuilder } from './crud-request';
var CrudBaseService = /** @class */ (function () {
    function CrudBaseService(options, http) {
        this.http = http;
        this.options = options;
    }
    CrudBaseService.prototype.getPagination = function (limit, page, builder) {
        if (!builder) {
            builder = RequestQueryBuilder.create();
        }
        else if (!(builder instanceof RequestQueryBuilder)) {
            builder = RequestQueryBuilder.create(builder);
        }
        builder.setLimit(limit);
        builder.setPage(page);
        return this.http.get(this.getBaseUrl(), {
            params: this.getParamsFromQuery(builder),
        });
    };
    CrudBaseService.prototype.getMany = function (builder) {
        return this.http.get(this.getBaseUrl(), {
            params: this.getParamsFromQuery(builder),
        });
    };
    CrudBaseService.prototype.getOne = function (value, builder) {
        var url = this.getOneUrl(value);
        return this.http.get(url, {
            params: this.getParamsFromQuery(builder),
        });
    };
    CrudBaseService.prototype.create = function (body) {
        return this.http.post(this.getBaseUrl(), JSON.stringify(body), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };
    CrudBaseService.prototype.createMany = function (body) {
        return this.http.post(this.getBaseUrl() + '/bulk', JSON.stringify({ bulk: body }), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };
    CrudBaseService.prototype.put = function (value, body) {
        var url = this.getOneUrl(value);
        return this.http.put(url, JSON.stringify(body), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };
    CrudBaseService.prototype.patch = function (value, body) {
        var url = this.getOneUrl(value);
        return this.http.patch(url, JSON.stringify(body), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };
    CrudBaseService.prototype.delete = function (value) {
        var url = this.getOneUrl(value);
        return this.http.delete(url);
    };
    CrudBaseService.prototype.getParamsFromQuery = function (builder) {
        if (!(builder instanceof RequestQueryBuilder)) {
            builder = RequestQueryBuilder.create(builder);
        }
        return new HttpParams({ fromString: this.getQuery(builder) });
    };
    /**
     * Get request link
     */
    CrudBaseService.prototype.getBaseUrl = function () {
        return this.options.apiUrl + "/" + this.options.entity;
    };
    CrudBaseService.prototype.getOneUrl = function (value) {
        return this.getBaseUrl() + "/" + value;
    };
    CrudBaseService.prototype.getQuery = function (builder) {
        if (builder) {
            return builder.query();
        }
        return '';
    };
    return CrudBaseService;
}());
export { CrudBaseService };
//# sourceMappingURL=data:application/json;base64,