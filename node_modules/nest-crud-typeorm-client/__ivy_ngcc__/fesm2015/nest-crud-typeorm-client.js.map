{"version":3,"file":"nest-crud-typeorm-client.js","sources":["ng:/nest-crud-typeorm-client/lib/crud-request/exceptions/request-query.exception.ts","ng:/nest-crud-typeorm-client/lib/util/obj.util.ts","ng:/nest-crud-typeorm-client/lib/util/checks.util.ts","ng:/nest-crud-typeorm-client/lib/crud-request/types/request-query.types.ts","ng:/nest-crud-typeorm-client/lib/crud-request/request-query.validator.ts","ng:/nest-crud-typeorm-client/lib/crud-request/request-query.builder.ts","ng:/nest-crud-typeorm-client/lib/crud-request/request-query.parser.ts","ng:/nest-crud-typeorm-client/lib/crud-base.service.ts","ng:/nest-crud-typeorm-client/public-api.ts","ng:/nest-crud-typeorm-client/nest-crud-typeorm-client.ts"],"names":[],"mappings":"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","sourcesContent":["export class RequestQueryException extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","export const objKeys = (val: any): string[] => Object.keys(val);\nexport const getOwnPropNames = (val: any): string[] => Object.getOwnPropertyNames(val);\n","import { objKeys } from './obj.util';\n\nexport const isUndefined = (val: any): boolean => typeof val === 'undefined';\nexport const isNull = (val: any): boolean => val === null;\nexport const isNil = (val: any): boolean => isUndefined(val) || isNull(val);\nexport const isString = (val: any): boolean => typeof val === 'string';\nexport const hasLength = (val: any): boolean => val.length > 0;\nexport const isStringFull = (val: any): boolean => isString(val) && hasLength(val);\nexport const isArrayFull = (val: any): boolean => Array.isArray(val) && hasLength(val);\nexport const isArrayStrings = (val: any): boolean =>\n  isArrayFull(val) && (val as string[]).every((v) => isStringFull(v));\nexport const isObject = (val: any): boolean => typeof val === 'object' && !isNull(val);\nexport const isObjectFull = (val: any) => isObject(val) && hasLength(objKeys(val));\nexport const isNumber = (val: any): boolean =>\n  typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val);\nexport const isEqual = (val: any, eq: any): boolean => val === eq;\nexport const isFalse = (val: any): boolean => val === false;\nexport const isTrue = (val: any): boolean => val === true;\nexport const isIn = (val: any, arr: any[] = []): boolean =>\n  arr.some((o) => isEqual(val, o));\nexport const isBoolean = (val: any): boolean => typeof val === 'boolean';\nexport const isNumeric = (val: any): boolean => /^[+-]?([0-9]*[.])?[0-9]+$/.test(val);\nexport const isDateString = (val: any): boolean =>\n  isStringFull(val) &&\n  /^\\d{4}-[01]\\d-[0-3]\\d(?:T[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:Z|[-+][0-2]\\d(?::?[0-5]\\d)?)?)?$/g.test(\n    val,\n  );\nexport const isDate = (val: any): val is Date => val instanceof Date;\nexport const isValue = (val: any): boolean =>\n  isStringFull(val) || isNumber(val) || isBoolean(val) || isDate(val);\nexport const hasValue = (val: any): boolean =>\n  isArrayFull(val) ? (val as any[]).every((o) => isValue(o)) : isValue(val);\nexport const isFunction = (val: any): boolean => typeof val === 'function';\n","export type QueryFields = string[];\n\nexport type QueryFilter = {\n  field: string;\n  operator: ComparisonOperator;\n  value?: any;\n};\n\nexport type QueryFilterArr = [string, ComparisonOperator, any?];\n\nexport type QueryJoin = {\n  field: string;\n  select?: QueryFields;\n};\n\nexport type QueryJoinArr = [string, QueryFields?];\n\nexport type QuerySort = {\n  field: string;\n  order: QuerySortOperator;\n};\n\nexport type QuerySortArr = [string, QuerySortOperator];\n\nexport type QuerySortOperator = 'ASC' | 'DESC';\n\ntype DeprecatedCondOperator =\n  | 'eq'\n  | 'ne'\n  | 'gt'\n  | 'lt'\n  | 'gte'\n  | 'lte'\n  | 'starts'\n  | 'ends'\n  | 'cont'\n  | 'excl'\n  | 'in'\n  | 'notin'\n  | 'isnull'\n  | 'notnull'\n  | 'between';\n\nexport enum CondOperator {\n  EQUALS = '$eq',\n  NOT_EQUALS = '$ne',\n  GREATER_THAN = '$gt',\n  LOWER_THAN = '$lt',\n  GREATER_THAN_EQUALS = '$gte',\n  LOWER_THAN_EQUALS = '$lte',\n  STARTS = '$starts',\n  ENDS = '$ends',\n  CONTAINS = '$cont',\n  EXCLUDES = '$excl',\n  IN = '$in',\n  NOT_IN = '$notin',\n  IS_NULL = '$isnull',\n  NOT_NULL = '$notnull',\n  BETWEEN = '$between',\n  EQUALS_LOW = '$eqL',\n  NOT_EQUALS_LOW = '$neL',\n  STARTS_LOW = '$startsL',\n  ENDS_LOW = '$endsL',\n  CONTAINS_LOW = '$contL',\n  EXCLUDES_LOW = '$exclL',\n  IN_LOW = '$inL',\n  NOT_IN_LOW = '$notinL',\n}\n\nexport type ComparisonOperator = DeprecatedCondOperator | keyof SFieldOperator;\n\n// new search\nexport type SPrimitivesVal = string | number | boolean;\n\nexport type SFiledValues = SPrimitivesVal | Array<SPrimitivesVal>;\n\nexport type SFieldOperator = {\n  $eq?: SFiledValues;\n  $ne?: SFiledValues;\n  $gt?: SFiledValues;\n  $lt?: SFiledValues;\n  $gte?: SFiledValues;\n  $lte?: SFiledValues;\n  $starts?: SFiledValues;\n  $ends?: SFiledValues;\n  $cont?: SFiledValues;\n  $excl?: SFiledValues;\n  $in?: SFiledValues;\n  $notin?: SFiledValues;\n  $between?: SFiledValues;\n  $isnull?: SFiledValues;\n  $notnull?: SFiledValues;\n  $eqL?: SFiledValues;\n  $neL?: SFiledValues;\n  $startsL?: SFiledValues;\n  $endsL?: SFiledValues;\n  $contL?: SFiledValues;\n  $exclL?: SFiledValues;\n  $inL?: SFiledValues;\n  $notinL?: SFiledValues;\n  $or?: SFieldOperator;\n  $and?: never;\n};\n\nexport type SField = SPrimitivesVal | SFieldOperator;\n\nexport type SFields = {\n  [key: string]: SField | Array<SFields | SConditionAND> | undefined;\n  $or?: Array<SFields | SConditionAND>;\n  $and?: never;\n};\n\nexport type SConditionAND = {\n  $and?: Array<SFields | SConditionAND>;\n  $or?: never;\n};\n\nexport type SConditionKey = '$and' | '$or';\n\nexport type SCondition = SFields | SConditionAND;\n","import {\n  isUndefined,\n  isArrayStrings,\n  isStringFull,\n  isObject,\n  isEqual,\n  isNumber,\n  isNil,\n  objKeys,\n} from '../util';\n\nimport { RequestQueryException } from './exceptions';\nimport { ParamsOptions, ParamOption } from './interfaces';\nimport {\n  QueryFields,\n  QueryFilter,\n  ComparisonOperator,\n  QueryJoin,\n  QuerySort,\n  CondOperator,\n} from './types';\n\nexport const deprecatedComparisonOperatorsList = [\n  'eq',\n  'ne',\n  'gt',\n  'lt',\n  'gte',\n  'lte',\n  'starts',\n  'ends',\n  'cont',\n  'excl',\n  'in',\n  'notin',\n  'isnull',\n  'notnull',\n  'between',\n];\nexport const comparisonOperatorsList = Object.assign(\n  deprecatedComparisonOperatorsList,\n  objKeys(CondOperator).map((n) => CondOperator[n])\n);\n\nexport const sortOrdersList = ['ASC', 'DESC'];\n\nconst comparisonOperatorsListStr = comparisonOperatorsList.join();\nconst sortOrdersListStr = sortOrdersList.join();\n\nexport function validateFields(fields: QueryFields): void {\n  if (!isArrayStrings(fields)) {\n    throw new RequestQueryException(\n      'Invalid fields. Array of strings expected'\n    );\n  }\n}\n\nexport function validateCondition(\n  val: QueryFilter,\n  cond: 'filter' | 'or' | 'search'\n): void {\n  if (!isObject(val) || !isStringFull(val.field)) {\n    throw new RequestQueryException(\n      `Invalid field type in ${cond} condition. String expected`\n    );\n  }\n  validateComparisonOperator(val.operator);\n}\n\nexport function validateComparisonOperator(operator: ComparisonOperator): void {\n  if (!comparisonOperatorsList.includes(operator)) {\n    throw new RequestQueryException(\n      `Invalid comparison operator. ${comparisonOperatorsListStr} expected`\n    );\n  }\n}\n\nexport function validateJoin(join: QueryJoin): void {\n  if (!isObject(join) || !isStringFull(join.field)) {\n    throw new RequestQueryException('Invalid join field. String expected');\n  }\n  if (!isUndefined(join.select) && !isArrayStrings(join.select)) {\n    throw new RequestQueryException(\n      'Invalid join select. Array of strings expected'\n    );\n  }\n}\n\nexport function validateSort(sort: QuerySort): void {\n  if (!isObject(sort) || !isStringFull(sort.field)) {\n    throw new RequestQueryException('Invalid sort field. String expected');\n  }\n  if (\n    !isEqual(sort.order, sortOrdersList[0]) &&\n    !isEqual(sort.order, sortOrdersList[1])\n  ) {\n    throw new RequestQueryException(\n      `Invalid sort order. ${sortOrdersListStr} expected`\n    );\n  }\n}\n\nexport function validateNumeric(\n  val: number,\n  num: 'limit' | 'offset' | 'page' | 'cache' | string\n): void {\n  if (!isNumber(val)) {\n    throw new RequestQueryException(`Invalid ${num}. Number expected`);\n  }\n}\n\nexport function validateParamOption(options: ParamsOptions, name: string) {\n  if (!isObject(options)) {\n    throw new RequestQueryException(\n      `Invalid param ${name}. Invalid crud options`\n    );\n  }\n  const option = options[name];\n  if (option && option.disabled) {\n    return;\n  }\n  if (!isObject(option) || isNil(option.field) || isNil(option.type)) {\n    throw new RequestQueryException(`Invalid param option in Crud`);\n  }\n}\n\nexport function validateUUID(str: string, name: string) {\n  const uuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  const uuidV4 = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  if (!uuidV4.test(str) && !uuid.test(str)) {\n    throw new RequestQueryException(\n      `Invalid param ${name}. UUID string expected`\n    );\n  }\n}\n","import {\n  hasValue,\n  isObject,\n  isString,\n  isArrayFull,\n  isNil,\n  isUndefined,\n} from '../util';\nimport { stringify } from 'qs';\n\nimport { RequestQueryBuilderOptions, CreateQueryParams } from './interfaces';\nimport {\n  validateCondition,\n  validateFields,\n  validateJoin,\n  validateNumeric,\n  validateSort,\n} from './request-query.validator';\nimport {\n  QueryFields,\n  QueryFilter,\n  QueryFilterArr,\n  QueryJoin,\n  QueryJoinArr,\n  QuerySort,\n  QuerySortArr,\n  SCondition,\n} from './types';\n\n// tslint:disable:variable-name ban-types\nexport class RequestQueryBuilder {\n  constructor() {\n    this.setParamNames();\n  }\n\n  private static _options: RequestQueryBuilderOptions = {\n    delim: '||',\n    delimStr: ',',\n    paramNamesMap: {\n      fields: ['fields', 'select'],\n      search: 's',\n      filter: 'filter',\n      or: 'or',\n      join: 'join',\n      sort: 'sort',\n      limit: ['limit', 'per_page'],\n      offset: 'offset',\n      page: 'page',\n      cache: 'cache',\n    },\n  };\n  private paramNames: {\n    [key in keyof RequestQueryBuilderOptions['paramNamesMap']]: string;\n  } = {};\n  public queryObject: { [key: string]: any } = {};\n  public queryString: string;\n\n  static setOptions(options: RequestQueryBuilderOptions) {\n    RequestQueryBuilder._options = {\n      ...RequestQueryBuilder._options,\n      ...options,\n      paramNamesMap: {\n        ...RequestQueryBuilder._options.paramNamesMap,\n        ...(options.paramNamesMap ? options.paramNamesMap : {}),\n      },\n    };\n  }\n\n  static getOptions(): RequestQueryBuilderOptions {\n    return RequestQueryBuilder._options;\n  }\n\n  static create(params?: CreateQueryParams): RequestQueryBuilder {\n    const qb = new RequestQueryBuilder();\n    return isObject(params) ? qb.createFromParams(params) : qb;\n  }\n\n  get options(): RequestQueryBuilderOptions {\n    return RequestQueryBuilder._options;\n  }\n\n  setParamNames() {\n    Object.keys(RequestQueryBuilder._options.paramNamesMap).forEach((key) => {\n      const name = RequestQueryBuilder._options.paramNamesMap[key];\n      this.paramNames[key] = isString(name) ? (name as string) : (name[0] as string);\n    });\n  }\n\n  query(encode = true): string {\n    if (this.queryObject[this.paramNames.search]) {\n      this.queryObject[this.paramNames.filter] = undefined;\n      this.queryObject[this.paramNames.or] = undefined;\n    }\n    this.queryString = stringify(this.queryObject, { encode });\n    return this.queryString;\n  }\n\n  select(fields: QueryFields): this {\n    if (isArrayFull(fields)) {\n      validateFields(fields);\n      this.queryObject[this.paramNames.fields] = fields.join(this.options.delimStr);\n    }\n    return this;\n  }\n\n  search(s: SCondition) {\n    if (!isNil(s) && isObject(s)) {\n      this.queryObject[this.paramNames.search] = JSON.stringify(s);\n    }\n    return this;\n  }\n\n  setFilter(f: QueryFilter | QueryFilterArr | Array<QueryFilter | QueryFilterArr>): this {\n    this.setCondition(f, 'filter');\n    return this;\n  }\n\n  setOr(f: QueryFilter | QueryFilterArr | Array<QueryFilter | QueryFilterArr>): this {\n    this.setCondition(f, 'or');\n    return this;\n  }\n\n  setJoin(j: QueryJoin | QueryJoinArr | Array<QueryJoin | QueryJoinArr>): this {\n    if (!isNil(j)) {\n      const param = this.checkQueryObjectParam('join', []);\n      this.queryObject[param] = [\n        ...this.queryObject[param],\n        ...(Array.isArray(j) && !isString(j[0])\n          ? (j as Array<QueryJoin | QueryJoinArr>).map((o) => this.addJoin(o))\n          : [this.addJoin(j as QueryJoin | QueryJoinArr)]),\n      ];\n    }\n    return this;\n  }\n\n  sortBy(s: QuerySort | QuerySortArr | Array<QuerySort | QuerySortArr>): this {\n    if (!isNil(s)) {\n      const param = this.checkQueryObjectParam('sort', []);\n      this.queryObject[param] = [\n        ...this.queryObject[param],\n        ...(Array.isArray(s) && !isString(s[0])\n          ? (s as Array<QuerySort | QuerySortArr>).map((o) => this.addSortBy(o))\n          : [this.addSortBy(s as QuerySort | QuerySortArr)]),\n      ];\n    }\n    return this;\n  }\n\n  setLimit(n: number): this {\n    this.setNumeric(n, 'limit');\n    return this;\n  }\n\n  setOffset(n: number): this {\n    this.setNumeric(n, 'offset');\n    return this;\n  }\n\n  setPage(n: number): this {\n    this.setNumeric(n, 'page');\n    return this;\n  }\n\n  resetCache(): this {\n    this.setNumeric(0, 'cache');\n    return this;\n  }\n\n  cond(\n    f: QueryFilter | QueryFilterArr,\n    cond: 'filter' | 'or' | 'search' = 'search',\n  ): string {\n    const filter = Array.isArray(f) ? { field: f[0], operator: f[1], value: f[2] } : f;\n    validateCondition(filter, cond);\n    const d = this.options.delim;\n\n    return (\n      filter.field +\n      d +\n      filter.operator +\n      (hasValue(filter.value) ? d + filter.value : '')\n    );\n  }\n\n  private addJoin(j: QueryJoin | QueryJoinArr): string {\n    const join = Array.isArray(j) ? { field: j[0], select: j[1] } : j;\n    validateJoin(join);\n    const d = this.options.delim;\n    const ds = this.options.delimStr;\n\n    return join.field + (isArrayFull(join.select) ? d + join.select.join(ds) : '');\n  }\n\n  private addSortBy(s: QuerySort | QuerySortArr): string {\n    const sort = Array.isArray(s) ? { field: s[0], order: s[1] } : s;\n    validateSort(sort);\n    const ds = this.options.delimStr;\n\n    return sort.field + ds + sort.order;\n  }\n\n  private createFromParams(params: CreateQueryParams): this {\n    this.select(params.fields);\n    this.search(params.search);\n    this.setFilter(params.filter);\n    this.setOr(params.or);\n    this.setJoin(params.join);\n    this.setLimit(params.limit);\n    this.setOffset(params.offset);\n    this.setPage(params.page);\n    this.sortBy(params.sort);\n    if (params.resetCache) {\n      this.resetCache();\n    }\n    return this;\n  }\n\n  private checkQueryObjectParam(\n    cond: keyof RequestQueryBuilderOptions['paramNamesMap'],\n    defaults: any,\n  ): string {\n    const param = this.paramNames[cond];\n    if (isNil(this.queryObject[param]) && !isUndefined(defaults)) {\n      this.queryObject[param] = defaults;\n    }\n    return param;\n  }\n\n  private setCondition(\n    f: QueryFilter | QueryFilterArr | Array<QueryFilter | QueryFilterArr>,\n    cond: 'filter' | 'or',\n  ): void {\n    if (!isNil(f)) {\n      const param = this.checkQueryObjectParam(cond, []);\n      this.queryObject[param] = [\n        ...this.queryObject[param],\n        ...(Array.isArray(f) && !isString(f[0])\n          ? (f as Array<QueryFilter | QueryFilterArr>).map((o) => this.cond(o, cond))\n          : [this.cond(f as QueryFilter | QueryFilterArr, cond)]),\n      ];\n    }\n  }\n\n  private setNumeric(n: number, cond: 'limit' | 'offset' | 'page' | 'cache'): void {\n    if (!isNil(n)) {\n      validateNumeric(n, cond);\n      this.queryObject[this.paramNames[cond]] = n;\n    }\n  }\n}","import {\n  hasLength,\n  hasValue,\n  isString,\n  isArrayFull,\n  isDate,\n  isDateString,\n  isObject,\n  isStringFull,\n  objKeys,\n  isNil,\n  ObjectLiteral,\n} from '../util';\n\nimport { RequestQueryException } from './exceptions';\nimport {\n  ParamsOptions,\n  ParsedRequestParams,\n  RequestQueryBuilderOptions,\n} from './interfaces';\nimport { RequestQueryBuilder } from './request-query.builder';\nimport {\n  validateCondition,\n  validateJoin,\n  validateNumeric,\n  validateParamOption,\n  validateSort,\n  validateUUID,\n} from './request-query.validator';\nimport {\n  ComparisonOperator,\n  QueryFields,\n  QueryFilter,\n  QueryJoin,\n  QuerySort,\n  SCondition,\n  SConditionAND,\n  SFields,\n} from './types';\n\n// tslint:disable:variable-name ban-types\nexport class RequestQueryParser implements ParsedRequestParams {\n  public fields: QueryFields = [];\n  public paramsFilter: QueryFilter[] = [];\n  public authPersist: ObjectLiteral = undefined;\n  public search: SCondition;\n  public filter: QueryFilter[] = [];\n  public or: QueryFilter[] = [];\n  public join: QueryJoin[] = [];\n  public sort: QuerySort[] = [];\n  public limit: number;\n  public offset: number;\n  public page: number;\n  public cache: number;\n\n  private _params: any;\n  private _query: any;\n  private _paramNames: string[];\n  private _paramsOptions: ParamsOptions;\n\n  private get _options(): RequestQueryBuilderOptions {\n    return RequestQueryBuilder.getOptions();\n  }\n\n  static create(): RequestQueryParser {\n    return new RequestQueryParser();\n  }\n\n  getParsed(): ParsedRequestParams {\n    return {\n      fields: this.fields,\n      paramsFilter: this.paramsFilter,\n      authPersist: this.authPersist,\n      search: this.search,\n      filter: this.filter,\n      or: this.or,\n      join: this.join,\n      sort: this.sort,\n      limit: this.limit,\n      offset: this.offset,\n      page: this.page,\n      cache: this.cache,\n    };\n  }\n\n  parseQuery(query: any): this {\n    if (isObject(query)) {\n      const paramNames = objKeys(query);\n\n      if (hasLength(paramNames)) {\n        this._query = query;\n        this._paramNames = paramNames;\n        let searchData = this._query[this.getParamNames('search')[0]];\n\n        this.search = this.parseSearchQueryParam(searchData) as any;\n        if (isNil(this.search)) {\n          this.filter = this.parseQueryParam(\n            'filter',\n            this.conditionParser.bind(this, 'filter'),\n          );\n          this.or = this.parseQueryParam('or', this.conditionParser.bind(this, 'or'));\n        }\n        this.fields =\n          this.parseQueryParam('fields', this.fieldsParser.bind(this))[0] || [];\n        this.join = this.parseQueryParam('join', this.joinParser.bind(this));\n        this.sort = this.parseQueryParam('sort', this.sortParser.bind(this));\n        this.limit = this.parseQueryParam(\n          'limit',\n          this.numericParser.bind(this, 'limit'),\n        )[0];\n        this.offset = this.parseQueryParam(\n          'offset',\n          this.numericParser.bind(this, 'offset'),\n        )[0];\n        this.page = this.parseQueryParam(\n          'page',\n          this.numericParser.bind(this, 'page'),\n        )[0];\n        this.cache = this.parseQueryParam(\n          'cache',\n          this.numericParser.bind(this, 'cache'),\n        )[0];\n      }\n    }\n\n    return this;\n  }\n\n  parseParams(params: any, options: ParamsOptions): this {\n    if (isObject(params)) {\n      const paramNames = objKeys(params);\n\n      if (hasLength(paramNames)) {\n        this._params = params;\n        this._paramsOptions = options;\n        this.paramsFilter = paramNames\n          .map((name) => this.paramParser(name))\n          .filter((filter) => filter);\n      }\n    }\n\n    return this;\n  }\n\n  setAuthPersist(persist: ObjectLiteral = {}) {\n    this.authPersist = persist || /* istanbul ignore next */ {};\n  }\n\n  convertFilterToSearch(filter: QueryFilter): SFields | SConditionAND {\n    const isEmptyValue = {\n      isnull: true,\n      notnull: true,\n    };\n\n    return filter\n      ? {\n          [filter.field]: {\n            [filter.operator]: isEmptyValue[filter.operator]\n              ? isEmptyValue[filter.operator]\n              : filter.value,\n          },\n        }\n      : /* istanbul ignore next */ {};\n  }\n\n  private getParamNames(\n    type: keyof RequestQueryBuilderOptions['paramNamesMap'],\n  ): string[] {\n    return this._paramNames.filter((p) => {\n      const name = this._options.paramNamesMap[type];\n      return isString(name) ? name === p : (name as string[]).some((m) => m === p);\n    });\n  }\n\n  private getParamValues(value: string | string[], parser: Function): string[] {\n    if (isStringFull(value)) {\n      return [parser.call(this, value)];\n    }\n\n    if (isArrayFull(value)) {\n      return (value as string[]).map((val) => parser(val));\n    }\n\n    return [];\n  }\n\n  private parseQueryParam(\n    type: keyof RequestQueryBuilderOptions['paramNamesMap'],\n    parser: Function,\n  ) {\n    const param = this.getParamNames(type);\n\n    if (isArrayFull(param)) {\n      return param.reduce(\n        (a, name) => Object.assign(a,this.getParamValues(this._query[name], parser)),\n        [],\n      );\n    }\n\n    return [];\n  }\n\n  private parseValue(val: any) {\n    try {\n      const parsed = JSON.parse(val);\n\n      if (!isDate(parsed) && isObject(parsed)) {\n        // throw new Error('Don\\'t support object now');\n        return val;\n      } else if (\n        typeof parsed === 'number' &&\n        parsed.toLocaleString('fullwide', { useGrouping: false }) !== val\n      ) {\n        // JS cannot handle big numbers. Leave it as a string to prevent data loss\n        return val;\n      }\n\n      return parsed;\n    } catch (ignored) {\n      if (isDateString(val)) {\n        return new Date(val);\n      }\n\n      return val;\n    }\n  }\n\n  private parseValues(vals: any) {\n    if (isArrayFull(vals)) {\n      return vals.map((v: any) => this.parseValue(v));\n    } else {\n      return this.parseValue(vals);\n    }\n  }\n\n  private fieldsParser(data: string): QueryFields {\n    return data.split(this._options.delimStr);\n  }\n\n  private parseSearchQueryParam(d: any): SCondition {\n    try {\n      if (isNil(d)) {\n        return undefined;\n      }\n\n      const data = JSON.parse(d);\n\n      if (!isObject(data)) {\n        throw new Error();\n      }\n\n      return data;\n    } catch (_) {\n      throw new RequestQueryException('Invalid search param. JSON expected');\n    }\n  }\n\n  private conditionParser(cond: 'filter' | 'or' | 'search', data: string): QueryFilter {\n    const isArrayValue = [\n      'in',\n      'notin',\n      'between',\n      '$in',\n      '$notin',\n      '$between',\n      '$inL',\n      '$notinL',\n    ];\n    const isEmptyValue = ['isnull', 'notnull', '$isnull', '$notnull'];\n    const param = data.split(this._options.delim);\n    const field = param[0];\n    const operator = param[1] as ComparisonOperator;\n    let value = param[2] || '';\n\n    if (isArrayValue.some((name) => name === operator)) {\n      value = value.split(this._options.delimStr) as any;\n    }\n\n    value = this.parseValues(value);\n\n    if (!isEmptyValue.some((name) => name === operator) && !hasValue(value)) {\n      throw new RequestQueryException(`Invalid ${cond} value`);\n    }\n\n    const condition: QueryFilter = { field, operator, value };\n    validateCondition(condition, cond);\n\n    return condition;\n  }\n\n  private joinParser(data: string): QueryJoin {\n    const param = data.split(this._options.delim);\n    const join: QueryJoin = {\n      field: param[0],\n      select: isStringFull(param[1]) ? param[1].split(this._options.delimStr) : undefined,\n    };\n    validateJoin(join);\n\n    return join;\n  }\n\n  private sortParser(data: string): QuerySort {\n    const param = data.split(this._options.delimStr);\n    const sort: QuerySort = {\n      field: param[0],\n      order: param[1] as any,\n    };\n    validateSort(sort);\n\n    return sort;\n  }\n\n  private numericParser(\n    num: 'limit' | 'offset' | 'page' | 'cache',\n    data: string,\n  ): number {\n    const val = this.parseValue(data);\n    validateNumeric(val, num);\n\n    return val;\n  }\n\n  private paramParser(name: string): QueryFilter {\n    validateParamOption(this._paramsOptions, name);\n    const option = this._paramsOptions[name];\n\n    if (option.disabled) {\n      return undefined;\n    }\n\n    let value = this._params[name];\n\n    switch (option.type) {\n      case 'number':\n        value = this.parseValue(value);\n        validateNumeric(value, `param ${name}`);\n        break;\n      case 'uuid':\n        validateUUID(value, name);\n        break;\n      default:\n        break;\n    }\n\n    return { field: option.field, operator: '$eq', value };\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CreateQueryParams, RequestQueryBuilder } from './crud-request';\r\n\r\nexport interface CrudBaseOptions {\r\n  entity: string;\r\n  apiUrl: string;\r\n}\r\n\r\nexport interface ResponsePagination<T> {\r\n  data: Array<T>;\r\n  count: number;\r\n  total: number;\r\n  page: number;\r\n  pageCount: number;\r\n}\r\n\r\nexport abstract class CrudBaseService<T> {\r\n  protected options: CrudBaseOptions;\r\n  constructor(options: CrudBaseOptions, protected http: HttpClient) {\r\n    this.options = options;\r\n  }\r\n\r\n  getPagination(\r\n    limit: number,\r\n    page: number,\r\n    builder?: RequestQueryBuilder | CreateQueryParams\r\n  ): Observable<ResponsePagination<T>> {\r\n    if (!builder) {\r\n      builder = RequestQueryBuilder.create();\r\n    } else if (!(builder instanceof RequestQueryBuilder)) {\r\n      builder = RequestQueryBuilder.create(builder);\r\n    }\r\n    builder.setLimit(limit);\r\n    builder.setPage(page);\r\n    return this.http.get<ResponsePagination<T>>(this.getBaseUrl(), {\r\n      params: this.getParamsFromQuery(builder),\r\n    });\r\n  }\r\n\r\n  getMany(builder?: RequestQueryBuilder | CreateQueryParams): Observable<T[]> {\r\n    return this.http.get<T[]>(this.getBaseUrl(), {\r\n      params: this.getParamsFromQuery(builder),\r\n    });\r\n  }\r\n\r\n  getOne(\r\n    value: number | string | boolean,\r\n    builder?: RequestQueryBuilder | CreateQueryParams\r\n  ): Observable<T> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.get<T>(url, {\r\n      params: this.getParamsFromQuery(builder),\r\n    });\r\n  }\r\n\r\n  create(body: T): Observable<T> {\r\n    return this.http.post<T>(this.getBaseUrl(), JSON.stringify(body), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n\r\n  createMany(body: T[]): Observable<T[]> {\r\n    return this.http.post<T[]>(\r\n      this.getBaseUrl() + '/bulk',\r\n      JSON.stringify({ bulk: body }),\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  put(value: number | string | boolean, body: T): Observable<T> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.put<T>(url, JSON.stringify(body), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n\r\n  patch(value: number | string | boolean, body: T): Observable<T> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.patch<T>(url, JSON.stringify(body), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(value: number | string | boolean): Observable<void> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.delete<void>(url);\r\n  }\r\n\r\n  protected getParamsFromQuery(\r\n    builder: RequestQueryBuilder | CreateQueryParams\r\n  ) {\r\n    if (!(builder instanceof RequestQueryBuilder)) {\r\n      builder = RequestQueryBuilder.create(builder);\r\n    }\r\n    return new HttpParams({ fromString: this.getQuery(builder) });\r\n  }\r\n\r\n  /**\r\n   * Get request link\r\n   */\r\n  protected getBaseUrl(): string {\r\n    return `${this.options.apiUrl}/${this.options.entity}`;\r\n  }\r\n\r\n  protected getOneUrl(value: number | string | boolean) {\r\n    return `${this.getBaseUrl()}/${value}`;\r\n  }\r\n\r\n  private getQuery(builder?: RequestQueryBuilder) {\r\n    if (builder) {\r\n      return builder.query();\r\n    }\r\n    return '';\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of nest-crud-typeorm-client\r\n */\r\n\r\nexport * from './lib/crud-base.service';\r\nexport * from './lib/crud-request';\r\nexport * from './lib/util';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}