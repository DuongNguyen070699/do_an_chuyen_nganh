{"version":3,"file":"nest-crud-typeorm-client.js","sources":["ng://nest-crud-typeorm-client/lib/crud-request/exceptions/request-query.exception.ts","ng://nest-crud-typeorm-client/lib/util/obj.util.ts","ng://nest-crud-typeorm-client/lib/util/checks.util.ts","ng://nest-crud-typeorm-client/lib/crud-request/types/request-query.types.ts","ng://nest-crud-typeorm-client/lib/crud-request/request-query.validator.ts","ng://nest-crud-typeorm-client/lib/crud-request/request-query.builder.ts","ng://nest-crud-typeorm-client/lib/crud-request/request-query.parser.ts","ng://nest-crud-typeorm-client/lib/crud-base.service.ts","ng://nest-crud-typeorm-client/public-api.ts","ng://nest-crud-typeorm-client/nest-crud-typeorm-client.ts"],"sourcesContent":["export class RequestQueryException extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","export const objKeys = (val: any): string[] => Object.keys(val);\nexport const getOwnPropNames = (val: any): string[] => Object.getOwnPropertyNames(val);\n","import { objKeys } from './obj.util';\n\nexport const isUndefined = (val: any): boolean => typeof val === 'undefined';\nexport const isNull = (val: any): boolean => val === null;\nexport const isNil = (val: any): boolean => isUndefined(val) || isNull(val);\nexport const isString = (val: any): boolean => typeof val === 'string';\nexport const hasLength = (val: any): boolean => val.length > 0;\nexport const isStringFull = (val: any): boolean => isString(val) && hasLength(val);\nexport const isArrayFull = (val: any): boolean => Array.isArray(val) && hasLength(val);\nexport const isArrayStrings = (val: any): boolean =>\n  isArrayFull(val) && (val as string[]).every((v) => isStringFull(v));\nexport const isObject = (val: any): boolean => typeof val === 'object' && !isNull(val);\nexport const isObjectFull = (val: any) => isObject(val) && hasLength(objKeys(val));\nexport const isNumber = (val: any): boolean =>\n  typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val);\nexport const isEqual = (val: any, eq: any): boolean => val === eq;\nexport const isFalse = (val: any): boolean => val === false;\nexport const isTrue = (val: any): boolean => val === true;\nexport const isIn = (val: any, arr: any[] = []): boolean =>\n  arr.some((o) => isEqual(val, o));\nexport const isBoolean = (val: any): boolean => typeof val === 'boolean';\nexport const isNumeric = (val: any): boolean => /^[+-]?([0-9]*[.])?[0-9]+$/.test(val);\nexport const isDateString = (val: any): boolean =>\n  isStringFull(val) &&\n  /^\\d{4}-[01]\\d-[0-3]\\d(?:T[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:Z|[-+][0-2]\\d(?::?[0-5]\\d)?)?)?$/g.test(\n    val,\n  );\nexport const isDate = (val: any): val is Date => val instanceof Date;\nexport const isValue = (val: any): boolean =>\n  isStringFull(val) || isNumber(val) || isBoolean(val) || isDate(val);\nexport const hasValue = (val: any): boolean =>\n  isArrayFull(val) ? (val as any[]).every((o) => isValue(o)) : isValue(val);\nexport const isFunction = (val: any): boolean => typeof val === 'function';\n","export type QueryFields = string[];\n\nexport type QueryFilter = {\n  field: string;\n  operator: ComparisonOperator;\n  value?: any;\n};\n\nexport type QueryFilterArr = [string, ComparisonOperator, any?];\n\nexport type QueryJoin = {\n  field: string;\n  select?: QueryFields;\n};\n\nexport type QueryJoinArr = [string, QueryFields?];\n\nexport type QuerySort = {\n  field: string;\n  order: QuerySortOperator;\n};\n\nexport type QuerySortArr = [string, QuerySortOperator];\n\nexport type QuerySortOperator = 'ASC' | 'DESC';\n\ntype DeprecatedCondOperator =\n  | 'eq'\n  | 'ne'\n  | 'gt'\n  | 'lt'\n  | 'gte'\n  | 'lte'\n  | 'starts'\n  | 'ends'\n  | 'cont'\n  | 'excl'\n  | 'in'\n  | 'notin'\n  | 'isnull'\n  | 'notnull'\n  | 'between';\n\nexport enum CondOperator {\n  EQUALS = '$eq',\n  NOT_EQUALS = '$ne',\n  GREATER_THAN = '$gt',\n  LOWER_THAN = '$lt',\n  GREATER_THAN_EQUALS = '$gte',\n  LOWER_THAN_EQUALS = '$lte',\n  STARTS = '$starts',\n  ENDS = '$ends',\n  CONTAINS = '$cont',\n  EXCLUDES = '$excl',\n  IN = '$in',\n  NOT_IN = '$notin',\n  IS_NULL = '$isnull',\n  NOT_NULL = '$notnull',\n  BETWEEN = '$between',\n  EQUALS_LOW = '$eqL',\n  NOT_EQUALS_LOW = '$neL',\n  STARTS_LOW = '$startsL',\n  ENDS_LOW = '$endsL',\n  CONTAINS_LOW = '$contL',\n  EXCLUDES_LOW = '$exclL',\n  IN_LOW = '$inL',\n  NOT_IN_LOW = '$notinL',\n}\n\nexport type ComparisonOperator = DeprecatedCondOperator | keyof SFieldOperator;\n\n// new search\nexport type SPrimitivesVal = string | number | boolean;\n\nexport type SFiledValues = SPrimitivesVal | Array<SPrimitivesVal>;\n\nexport type SFieldOperator = {\n  $eq?: SFiledValues;\n  $ne?: SFiledValues;\n  $gt?: SFiledValues;\n  $lt?: SFiledValues;\n  $gte?: SFiledValues;\n  $lte?: SFiledValues;\n  $starts?: SFiledValues;\n  $ends?: SFiledValues;\n  $cont?: SFiledValues;\n  $excl?: SFiledValues;\n  $in?: SFiledValues;\n  $notin?: SFiledValues;\n  $between?: SFiledValues;\n  $isnull?: SFiledValues;\n  $notnull?: SFiledValues;\n  $eqL?: SFiledValues;\n  $neL?: SFiledValues;\n  $startsL?: SFiledValues;\n  $endsL?: SFiledValues;\n  $contL?: SFiledValues;\n  $exclL?: SFiledValues;\n  $inL?: SFiledValues;\n  $notinL?: SFiledValues;\n  $or?: SFieldOperator;\n  $and?: never;\n};\n\nexport type SField = SPrimitivesVal | SFieldOperator;\n\nexport type SFields = {\n  [key: string]: SField | Array<SFields | SConditionAND> | undefined;\n  $or?: Array<SFields | SConditionAND>;\n  $and?: never;\n};\n\nexport type SConditionAND = {\n  $and?: Array<SFields | SConditionAND>;\n  $or?: never;\n};\n\nexport type SConditionKey = '$and' | '$or';\n\nexport type SCondition = SFields | SConditionAND;\n","import {\n  isUndefined,\n  isArrayStrings,\n  isStringFull,\n  isObject,\n  isEqual,\n  isNumber,\n  isNil,\n  objKeys,\n} from '../util';\n\nimport { RequestQueryException } from './exceptions';\nimport { ParamsOptions, ParamOption } from './interfaces';\nimport {\n  QueryFields,\n  QueryFilter,\n  ComparisonOperator,\n  QueryJoin,\n  QuerySort,\n  CondOperator,\n} from './types';\n\nexport const deprecatedComparisonOperatorsList = [\n  'eq',\n  'ne',\n  'gt',\n  'lt',\n  'gte',\n  'lte',\n  'starts',\n  'ends',\n  'cont',\n  'excl',\n  'in',\n  'notin',\n  'isnull',\n  'notnull',\n  'between',\n];\nexport const comparisonOperatorsList = Object.assign(\n  deprecatedComparisonOperatorsList,\n  objKeys(CondOperator).map((n) => CondOperator[n])\n);\n\nexport const sortOrdersList = ['ASC', 'DESC'];\n\nconst comparisonOperatorsListStr = comparisonOperatorsList.join();\nconst sortOrdersListStr = sortOrdersList.join();\n\nexport function validateFields(fields: QueryFields): void {\n  if (!isArrayStrings(fields)) {\n    throw new RequestQueryException(\n      'Invalid fields. Array of strings expected'\n    );\n  }\n}\n\nexport function validateCondition(\n  val: QueryFilter,\n  cond: 'filter' | 'or' | 'search'\n): void {\n  if (!isObject(val) || !isStringFull(val.field)) {\n    throw new RequestQueryException(\n      `Invalid field type in ${cond} condition. String expected`\n    );\n  }\n  validateComparisonOperator(val.operator);\n}\n\nexport function validateComparisonOperator(operator: ComparisonOperator): void {\n  if (!comparisonOperatorsList.includes(operator)) {\n    throw new RequestQueryException(\n      `Invalid comparison operator. ${comparisonOperatorsListStr} expected`\n    );\n  }\n}\n\nexport function validateJoin(join: QueryJoin): void {\n  if (!isObject(join) || !isStringFull(join.field)) {\n    throw new RequestQueryException('Invalid join field. String expected');\n  }\n  if (!isUndefined(join.select) && !isArrayStrings(join.select)) {\n    throw new RequestQueryException(\n      'Invalid join select. Array of strings expected'\n    );\n  }\n}\n\nexport function validateSort(sort: QuerySort): void {\n  if (!isObject(sort) || !isStringFull(sort.field)) {\n    throw new RequestQueryException('Invalid sort field. String expected');\n  }\n  if (\n    !isEqual(sort.order, sortOrdersList[0]) &&\n    !isEqual(sort.order, sortOrdersList[1])\n  ) {\n    throw new RequestQueryException(\n      `Invalid sort order. ${sortOrdersListStr} expected`\n    );\n  }\n}\n\nexport function validateNumeric(\n  val: number,\n  num: 'limit' | 'offset' | 'page' | 'cache' | string\n): void {\n  if (!isNumber(val)) {\n    throw new RequestQueryException(`Invalid ${num}. Number expected`);\n  }\n}\n\nexport function validateParamOption(options: ParamsOptions, name: string) {\n  if (!isObject(options)) {\n    throw new RequestQueryException(\n      `Invalid param ${name}. Invalid crud options`\n    );\n  }\n  const option = options[name];\n  if (option && option.disabled) {\n    return;\n  }\n  if (!isObject(option) || isNil(option.field) || isNil(option.type)) {\n    throw new RequestQueryException(`Invalid param option in Crud`);\n  }\n}\n\nexport function validateUUID(str: string, name: string) {\n  const uuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  const uuidV4 = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  if (!uuidV4.test(str) && !uuid.test(str)) {\n    throw new RequestQueryException(\n      `Invalid param ${name}. UUID string expected`\n    );\n  }\n}\n","import {\n  hasValue,\n  isObject,\n  isString,\n  isArrayFull,\n  isNil,\n  isUndefined,\n} from '../util';\nimport { stringify } from 'qs';\n\nimport { RequestQueryBuilderOptions, CreateQueryParams } from './interfaces';\nimport {\n  validateCondition,\n  validateFields,\n  validateJoin,\n  validateNumeric,\n  validateSort,\n} from './request-query.validator';\nimport {\n  QueryFields,\n  QueryFilter,\n  QueryFilterArr,\n  QueryJoin,\n  QueryJoinArr,\n  QuerySort,\n  QuerySortArr,\n  SCondition,\n} from './types';\n\n// tslint:disable:variable-name ban-types\nexport class RequestQueryBuilder {\n  constructor() {\n    this.setParamNames();\n  }\n\n  private static _options: RequestQueryBuilderOptions = {\n    delim: '||',\n    delimStr: ',',\n    paramNamesMap: {\n      fields: ['fields', 'select'],\n      search: 's',\n      filter: 'filter',\n      or: 'or',\n      join: 'join',\n      sort: 'sort',\n      limit: ['limit', 'per_page'],\n      offset: 'offset',\n      page: 'page',\n      cache: 'cache',\n    },\n  };\n  private paramNames: {\n    [key in keyof RequestQueryBuilderOptions['paramNamesMap']]: string;\n  } = {};\n  public queryObject: { [key: string]: any } = {};\n  public queryString: string;\n\n  static setOptions(options: RequestQueryBuilderOptions) {\n    RequestQueryBuilder._options = {\n      ...RequestQueryBuilder._options,\n      ...options,\n      paramNamesMap: {\n        ...RequestQueryBuilder._options.paramNamesMap,\n        ...(options.paramNamesMap ? options.paramNamesMap : {}),\n      },\n    };\n  }\n\n  static getOptions(): RequestQueryBuilderOptions {\n    return RequestQueryBuilder._options;\n  }\n\n  static create(params?: CreateQueryParams): RequestQueryBuilder {\n    const qb = new RequestQueryBuilder();\n    return isObject(params) ? qb.createFromParams(params) : qb;\n  }\n\n  get options(): RequestQueryBuilderOptions {\n    return RequestQueryBuilder._options;\n  }\n\n  setParamNames() {\n    Object.keys(RequestQueryBuilder._options.paramNamesMap).forEach((key) => {\n      const name = RequestQueryBuilder._options.paramNamesMap[key];\n      this.paramNames[key] = isString(name) ? (name as string) : (name[0] as string);\n    });\n  }\n\n  query(encode = true): string {\n    if (this.queryObject[this.paramNames.search]) {\n      this.queryObject[this.paramNames.filter] = undefined;\n      this.queryObject[this.paramNames.or] = undefined;\n    }\n    this.queryString = stringify(this.queryObject, { encode });\n    return this.queryString;\n  }\n\n  select(fields: QueryFields): this {\n    if (isArrayFull(fields)) {\n      validateFields(fields);\n      this.queryObject[this.paramNames.fields] = fields.join(this.options.delimStr);\n    }\n    return this;\n  }\n\n  search(s: SCondition) {\n    if (!isNil(s) && isObject(s)) {\n      this.queryObject[this.paramNames.search] = JSON.stringify(s);\n    }\n    return this;\n  }\n\n  setFilter(f: QueryFilter | QueryFilterArr | Array<QueryFilter | QueryFilterArr>): this {\n    this.setCondition(f, 'filter');\n    return this;\n  }\n\n  setOr(f: QueryFilter | QueryFilterArr | Array<QueryFilter | QueryFilterArr>): this {\n    this.setCondition(f, 'or');\n    return this;\n  }\n\n  setJoin(j: QueryJoin | QueryJoinArr | Array<QueryJoin | QueryJoinArr>): this {\n    if (!isNil(j)) {\n      const param = this.checkQueryObjectParam('join', []);\n      this.queryObject[param] = [\n        ...this.queryObject[param],\n        ...(Array.isArray(j) && !isString(j[0])\n          ? (j as Array<QueryJoin | QueryJoinArr>).map((o) => this.addJoin(o))\n          : [this.addJoin(j as QueryJoin | QueryJoinArr)]),\n      ];\n    }\n    return this;\n  }\n\n  sortBy(s: QuerySort | QuerySortArr | Array<QuerySort | QuerySortArr>): this {\n    if (!isNil(s)) {\n      const param = this.checkQueryObjectParam('sort', []);\n      this.queryObject[param] = [\n        ...this.queryObject[param],\n        ...(Array.isArray(s) && !isString(s[0])\n          ? (s as Array<QuerySort | QuerySortArr>).map((o) => this.addSortBy(o))\n          : [this.addSortBy(s as QuerySort | QuerySortArr)]),\n      ];\n    }\n    return this;\n  }\n\n  setLimit(n: number): this {\n    this.setNumeric(n, 'limit');\n    return this;\n  }\n\n  setOffset(n: number): this {\n    this.setNumeric(n, 'offset');\n    return this;\n  }\n\n  setPage(n: number): this {\n    this.setNumeric(n, 'page');\n    return this;\n  }\n\n  resetCache(): this {\n    this.setNumeric(0, 'cache');\n    return this;\n  }\n\n  cond(\n    f: QueryFilter | QueryFilterArr,\n    cond: 'filter' | 'or' | 'search' = 'search',\n  ): string {\n    const filter = Array.isArray(f) ? { field: f[0], operator: f[1], value: f[2] } : f;\n    validateCondition(filter, cond);\n    const d = this.options.delim;\n\n    return (\n      filter.field +\n      d +\n      filter.operator +\n      (hasValue(filter.value) ? d + filter.value : '')\n    );\n  }\n\n  private addJoin(j: QueryJoin | QueryJoinArr): string {\n    const join = Array.isArray(j) ? { field: j[0], select: j[1] } : j;\n    validateJoin(join);\n    const d = this.options.delim;\n    const ds = this.options.delimStr;\n\n    return join.field + (isArrayFull(join.select) ? d + join.select.join(ds) : '');\n  }\n\n  private addSortBy(s: QuerySort | QuerySortArr): string {\n    const sort = Array.isArray(s) ? { field: s[0], order: s[1] } : s;\n    validateSort(sort);\n    const ds = this.options.delimStr;\n\n    return sort.field + ds + sort.order;\n  }\n\n  private createFromParams(params: CreateQueryParams): this {\n    this.select(params.fields);\n    this.search(params.search);\n    this.setFilter(params.filter);\n    this.setOr(params.or);\n    this.setJoin(params.join);\n    this.setLimit(params.limit);\n    this.setOffset(params.offset);\n    this.setPage(params.page);\n    this.sortBy(params.sort);\n    if (params.resetCache) {\n      this.resetCache();\n    }\n    return this;\n  }\n\n  private checkQueryObjectParam(\n    cond: keyof RequestQueryBuilderOptions['paramNamesMap'],\n    defaults: any,\n  ): string {\n    const param = this.paramNames[cond];\n    if (isNil(this.queryObject[param]) && !isUndefined(defaults)) {\n      this.queryObject[param] = defaults;\n    }\n    return param;\n  }\n\n  private setCondition(\n    f: QueryFilter | QueryFilterArr | Array<QueryFilter | QueryFilterArr>,\n    cond: 'filter' | 'or',\n  ): void {\n    if (!isNil(f)) {\n      const param = this.checkQueryObjectParam(cond, []);\n      this.queryObject[param] = [\n        ...this.queryObject[param],\n        ...(Array.isArray(f) && !isString(f[0])\n          ? (f as Array<QueryFilter | QueryFilterArr>).map((o) => this.cond(o, cond))\n          : [this.cond(f as QueryFilter | QueryFilterArr, cond)]),\n      ];\n    }\n  }\n\n  private setNumeric(n: number, cond: 'limit' | 'offset' | 'page' | 'cache'): void {\n    if (!isNil(n)) {\n      validateNumeric(n, cond);\n      this.queryObject[this.paramNames[cond]] = n;\n    }\n  }\n}","import {\n  hasLength,\n  hasValue,\n  isString,\n  isArrayFull,\n  isDate,\n  isDateString,\n  isObject,\n  isStringFull,\n  objKeys,\n  isNil,\n  ObjectLiteral,\n} from '../util';\n\nimport { RequestQueryException } from './exceptions';\nimport {\n  ParamsOptions,\n  ParsedRequestParams,\n  RequestQueryBuilderOptions,\n} from './interfaces';\nimport { RequestQueryBuilder } from './request-query.builder';\nimport {\n  validateCondition,\n  validateJoin,\n  validateNumeric,\n  validateParamOption,\n  validateSort,\n  validateUUID,\n} from './request-query.validator';\nimport {\n  ComparisonOperator,\n  QueryFields,\n  QueryFilter,\n  QueryJoin,\n  QuerySort,\n  SCondition,\n  SConditionAND,\n  SFields,\n} from './types';\n\n// tslint:disable:variable-name ban-types\nexport class RequestQueryParser implements ParsedRequestParams {\n  public fields: QueryFields = [];\n  public paramsFilter: QueryFilter[] = [];\n  public authPersist: ObjectLiteral = undefined;\n  public search: SCondition;\n  public filter: QueryFilter[] = [];\n  public or: QueryFilter[] = [];\n  public join: QueryJoin[] = [];\n  public sort: QuerySort[] = [];\n  public limit: number;\n  public offset: number;\n  public page: number;\n  public cache: number;\n\n  private _params: any;\n  private _query: any;\n  private _paramNames: string[];\n  private _paramsOptions: ParamsOptions;\n\n  private get _options(): RequestQueryBuilderOptions {\n    return RequestQueryBuilder.getOptions();\n  }\n\n  static create(): RequestQueryParser {\n    return new RequestQueryParser();\n  }\n\n  getParsed(): ParsedRequestParams {\n    return {\n      fields: this.fields,\n      paramsFilter: this.paramsFilter,\n      authPersist: this.authPersist,\n      search: this.search,\n      filter: this.filter,\n      or: this.or,\n      join: this.join,\n      sort: this.sort,\n      limit: this.limit,\n      offset: this.offset,\n      page: this.page,\n      cache: this.cache,\n    };\n  }\n\n  parseQuery(query: any): this {\n    if (isObject(query)) {\n      const paramNames = objKeys(query);\n\n      if (hasLength(paramNames)) {\n        this._query = query;\n        this._paramNames = paramNames;\n        let searchData = this._query[this.getParamNames('search')[0]];\n\n        this.search = this.parseSearchQueryParam(searchData) as any;\n        if (isNil(this.search)) {\n          this.filter = this.parseQueryParam(\n            'filter',\n            this.conditionParser.bind(this, 'filter'),\n          );\n          this.or = this.parseQueryParam('or', this.conditionParser.bind(this, 'or'));\n        }\n        this.fields =\n          this.parseQueryParam('fields', this.fieldsParser.bind(this))[0] || [];\n        this.join = this.parseQueryParam('join', this.joinParser.bind(this));\n        this.sort = this.parseQueryParam('sort', this.sortParser.bind(this));\n        this.limit = this.parseQueryParam(\n          'limit',\n          this.numericParser.bind(this, 'limit'),\n        )[0];\n        this.offset = this.parseQueryParam(\n          'offset',\n          this.numericParser.bind(this, 'offset'),\n        )[0];\n        this.page = this.parseQueryParam(\n          'page',\n          this.numericParser.bind(this, 'page'),\n        )[0];\n        this.cache = this.parseQueryParam(\n          'cache',\n          this.numericParser.bind(this, 'cache'),\n        )[0];\n      }\n    }\n\n    return this;\n  }\n\n  parseParams(params: any, options: ParamsOptions): this {\n    if (isObject(params)) {\n      const paramNames = objKeys(params);\n\n      if (hasLength(paramNames)) {\n        this._params = params;\n        this._paramsOptions = options;\n        this.paramsFilter = paramNames\n          .map((name) => this.paramParser(name))\n          .filter((filter) => filter);\n      }\n    }\n\n    return this;\n  }\n\n  setAuthPersist(persist: ObjectLiteral = {}) {\n    this.authPersist = persist || /* istanbul ignore next */ {};\n  }\n\n  convertFilterToSearch(filter: QueryFilter): SFields | SConditionAND {\n    const isEmptyValue = {\n      isnull: true,\n      notnull: true,\n    };\n\n    return filter\n      ? {\n          [filter.field]: {\n            [filter.operator]: isEmptyValue[filter.operator]\n              ? isEmptyValue[filter.operator]\n              : filter.value,\n          },\n        }\n      : /* istanbul ignore next */ {};\n  }\n\n  private getParamNames(\n    type: keyof RequestQueryBuilderOptions['paramNamesMap'],\n  ): string[] {\n    return this._paramNames.filter((p) => {\n      const name = this._options.paramNamesMap[type];\n      return isString(name) ? name === p : (name as string[]).some((m) => m === p);\n    });\n  }\n\n  private getParamValues(value: string | string[], parser: Function): string[] {\n    if (isStringFull(value)) {\n      return [parser.call(this, value)];\n    }\n\n    if (isArrayFull(value)) {\n      return (value as string[]).map((val) => parser(val));\n    }\n\n    return [];\n  }\n\n  private parseQueryParam(\n    type: keyof RequestQueryBuilderOptions['paramNamesMap'],\n    parser: Function,\n  ) {\n    const param = this.getParamNames(type);\n\n    if (isArrayFull(param)) {\n      return param.reduce(\n        (a, name) => Object.assign(a,this.getParamValues(this._query[name], parser)),\n        [],\n      );\n    }\n\n    return [];\n  }\n\n  private parseValue(val: any) {\n    try {\n      const parsed = JSON.parse(val);\n\n      if (!isDate(parsed) && isObject(parsed)) {\n        // throw new Error('Don\\'t support object now');\n        return val;\n      } else if (\n        typeof parsed === 'number' &&\n        parsed.toLocaleString('fullwide', { useGrouping: false }) !== val\n      ) {\n        // JS cannot handle big numbers. Leave it as a string to prevent data loss\n        return val;\n      }\n\n      return parsed;\n    } catch (ignored) {\n      if (isDateString(val)) {\n        return new Date(val);\n      }\n\n      return val;\n    }\n  }\n\n  private parseValues(vals: any) {\n    if (isArrayFull(vals)) {\n      return vals.map((v: any) => this.parseValue(v));\n    } else {\n      return this.parseValue(vals);\n    }\n  }\n\n  private fieldsParser(data: string): QueryFields {\n    return data.split(this._options.delimStr);\n  }\n\n  private parseSearchQueryParam(d: any): SCondition {\n    try {\n      if (isNil(d)) {\n        return undefined;\n      }\n\n      const data = JSON.parse(d);\n\n      if (!isObject(data)) {\n        throw new Error();\n      }\n\n      return data;\n    } catch (_) {\n      throw new RequestQueryException('Invalid search param. JSON expected');\n    }\n  }\n\n  private conditionParser(cond: 'filter' | 'or' | 'search', data: string): QueryFilter {\n    const isArrayValue = [\n      'in',\n      'notin',\n      'between',\n      '$in',\n      '$notin',\n      '$between',\n      '$inL',\n      '$notinL',\n    ];\n    const isEmptyValue = ['isnull', 'notnull', '$isnull', '$notnull'];\n    const param = data.split(this._options.delim);\n    const field = param[0];\n    const operator = param[1] as ComparisonOperator;\n    let value = param[2] || '';\n\n    if (isArrayValue.some((name) => name === operator)) {\n      value = value.split(this._options.delimStr) as any;\n    }\n\n    value = this.parseValues(value);\n\n    if (!isEmptyValue.some((name) => name === operator) && !hasValue(value)) {\n      throw new RequestQueryException(`Invalid ${cond} value`);\n    }\n\n    const condition: QueryFilter = { field, operator, value };\n    validateCondition(condition, cond);\n\n    return condition;\n  }\n\n  private joinParser(data: string): QueryJoin {\n    const param = data.split(this._options.delim);\n    const join: QueryJoin = {\n      field: param[0],\n      select: isStringFull(param[1]) ? param[1].split(this._options.delimStr) : undefined,\n    };\n    validateJoin(join);\n\n    return join;\n  }\n\n  private sortParser(data: string): QuerySort {\n    const param = data.split(this._options.delimStr);\n    const sort: QuerySort = {\n      field: param[0],\n      order: param[1] as any,\n    };\n    validateSort(sort);\n\n    return sort;\n  }\n\n  private numericParser(\n    num: 'limit' | 'offset' | 'page' | 'cache',\n    data: string,\n  ): number {\n    const val = this.parseValue(data);\n    validateNumeric(val, num);\n\n    return val;\n  }\n\n  private paramParser(name: string): QueryFilter {\n    validateParamOption(this._paramsOptions, name);\n    const option = this._paramsOptions[name];\n\n    if (option.disabled) {\n      return undefined;\n    }\n\n    let value = this._params[name];\n\n    switch (option.type) {\n      case 'number':\n        value = this.parseValue(value);\n        validateNumeric(value, `param ${name}`);\n        break;\n      case 'uuid':\n        validateUUID(value, name);\n        break;\n      default:\n        break;\n    }\n\n    return { field: option.field, operator: '$eq', value };\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CreateQueryParams, RequestQueryBuilder } from './crud-request';\r\n\r\nexport interface CrudBaseOptions {\r\n  entity: string;\r\n  apiUrl: string;\r\n}\r\n\r\nexport interface ResponsePagination<T> {\r\n  data: Array<T>;\r\n  count: number;\r\n  total: number;\r\n  page: number;\r\n  pageCount: number;\r\n}\r\n\r\nexport abstract class CrudBaseService<T> {\r\n  protected options: CrudBaseOptions;\r\n  constructor(options: CrudBaseOptions, protected http: HttpClient) {\r\n    this.options = options;\r\n  }\r\n\r\n  getPagination(\r\n    limit: number,\r\n    page: number,\r\n    builder?: RequestQueryBuilder | CreateQueryParams\r\n  ): Observable<ResponsePagination<T>> {\r\n    if (!builder) {\r\n      builder = RequestQueryBuilder.create();\r\n    } else if (!(builder instanceof RequestQueryBuilder)) {\r\n      builder = RequestQueryBuilder.create(builder);\r\n    }\r\n    builder.setLimit(limit);\r\n    builder.setPage(page);\r\n    return this.http.get<ResponsePagination<T>>(this.getBaseUrl(), {\r\n      params: this.getParamsFromQuery(builder),\r\n    });\r\n  }\r\n\r\n  getMany(builder?: RequestQueryBuilder | CreateQueryParams): Observable<T[]> {\r\n    return this.http.get<T[]>(this.getBaseUrl(), {\r\n      params: this.getParamsFromQuery(builder),\r\n    });\r\n  }\r\n\r\n  getOne(\r\n    value: number | string | boolean,\r\n    builder?: RequestQueryBuilder | CreateQueryParams\r\n  ): Observable<T> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.get<T>(url, {\r\n      params: this.getParamsFromQuery(builder),\r\n    });\r\n  }\r\n\r\n  create(body: T): Observable<T> {\r\n    return this.http.post<T>(this.getBaseUrl(), JSON.stringify(body), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n\r\n  createMany(body: T[]): Observable<T[]> {\r\n    return this.http.post<T[]>(\r\n      this.getBaseUrl() + '/bulk',\r\n      JSON.stringify({ bulk: body }),\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  put(value: number | string | boolean, body: T): Observable<T> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.put<T>(url, JSON.stringify(body), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n\r\n  patch(value: number | string | boolean, body: T): Observable<T> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.patch<T>(url, JSON.stringify(body), {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(value: number | string | boolean): Observable<void> {\r\n    const url = this.getOneUrl(value);\r\n    return this.http.delete<void>(url);\r\n  }\r\n\r\n  protected getParamsFromQuery(\r\n    builder: RequestQueryBuilder | CreateQueryParams\r\n  ) {\r\n    if (!(builder instanceof RequestQueryBuilder)) {\r\n      builder = RequestQueryBuilder.create(builder);\r\n    }\r\n    return new HttpParams({ fromString: this.getQuery(builder) });\r\n  }\r\n\r\n  /**\r\n   * Get request link\r\n   */\r\n  protected getBaseUrl(): string {\r\n    return `${this.options.apiUrl}/${this.options.entity}`;\r\n  }\r\n\r\n  protected getOneUrl(value: number | string | boolean) {\r\n    return `${this.getBaseUrl()}/${value}`;\r\n  }\r\n\r\n  private getQuery(builder?: RequestQueryBuilder) {\r\n    if (builder) {\r\n      return builder.query();\r\n    }\r\n    return '';\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of nest-crud-typeorm-client\r\n */\r\n\r\nexport * from './lib/crud-base.service';\r\nexport * from './lib/crud-request';\r\nexport * from './lib/util';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}