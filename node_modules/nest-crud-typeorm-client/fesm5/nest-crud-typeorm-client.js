import { HttpParams } from '@angular/common/http';
import { __extends, __assign, __spread } from 'tslib';
import { stringify } from 'qs';

var RequestQueryException = /** @class */ (function (_super) {
    __extends(RequestQueryException, _super);
    function RequestQueryException(msg) {
        return _super.call(this, msg) || this;
    }
    return RequestQueryException;
}(Error));

var objKeys = function (val) { return Object.keys(val); };
var getOwnPropNames = function (val) { return Object.getOwnPropertyNames(val); };

var isUndefined = function (val) { return typeof val === 'undefined'; };
var isNull = function (val) { return val === null; };
var isNil = function (val) { return isUndefined(val) || isNull(val); };
var isString = function (val) { return typeof val === 'string'; };
var hasLength = function (val) { return val.length > 0; };
var isStringFull = function (val) { return isString(val) && hasLength(val); };
var isArrayFull = function (val) { return Array.isArray(val) && hasLength(val); };
var isArrayStrings = function (val) {
    return isArrayFull(val) && val.every(function (v) { return isStringFull(v); });
};
var isObject = function (val) { return typeof val === 'object' && !isNull(val); };
var isObjectFull = function (val) { return isObject(val) && hasLength(objKeys(val)); };
var isNumber = function (val) {
    return typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val);
};
var isEqual = function (val, eq) { return val === eq; };
var isFalse = function (val) { return val === false; };
var isTrue = function (val) { return val === true; };
var isIn = function (val, arr) {
    if (arr === void 0) { arr = []; }
    return arr.some(function (o) { return isEqual(val, o); });
};
var isBoolean = function (val) { return typeof val === 'boolean'; };
var isNumeric = function (val) { return /^[+-]?([0-9]*[.])?[0-9]+$/.test(val); };
var isDateString = function (val) {
    return isStringFull(val) &&
        /^\d{4}-[01]\d-[0-3]\d(?:T[0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:Z|[-+][0-2]\d(?::?[0-5]\d)?)?)?$/g.test(val);
};
var isDate = function (val) { return val instanceof Date; };
var isValue = function (val) {
    return isStringFull(val) || isNumber(val) || isBoolean(val) || isDate(val);
};
var hasValue = function (val) {
    return isArrayFull(val) ? val.every(function (o) { return isValue(o); }) : isValue(val);
};
var isFunction = function (val) { return typeof val === 'function'; };

var CondOperator;
(function (CondOperator) {
    CondOperator["EQUALS"] = "$eq";
    CondOperator["NOT_EQUALS"] = "$ne";
    CondOperator["GREATER_THAN"] = "$gt";
    CondOperator["LOWER_THAN"] = "$lt";
    CondOperator["GREATER_THAN_EQUALS"] = "$gte";
    CondOperator["LOWER_THAN_EQUALS"] = "$lte";
    CondOperator["STARTS"] = "$starts";
    CondOperator["ENDS"] = "$ends";
    CondOperator["CONTAINS"] = "$cont";
    CondOperator["EXCLUDES"] = "$excl";
    CondOperator["IN"] = "$in";
    CondOperator["NOT_IN"] = "$notin";
    CondOperator["IS_NULL"] = "$isnull";
    CondOperator["NOT_NULL"] = "$notnull";
    CondOperator["BETWEEN"] = "$between";
    CondOperator["EQUALS_LOW"] = "$eqL";
    CondOperator["NOT_EQUALS_LOW"] = "$neL";
    CondOperator["STARTS_LOW"] = "$startsL";
    CondOperator["ENDS_LOW"] = "$endsL";
    CondOperator["CONTAINS_LOW"] = "$contL";
    CondOperator["EXCLUDES_LOW"] = "$exclL";
    CondOperator["IN_LOW"] = "$inL";
    CondOperator["NOT_IN_LOW"] = "$notinL";
})(CondOperator || (CondOperator = {}));

var deprecatedComparisonOperatorsList = [
    'eq',
    'ne',
    'gt',
    'lt',
    'gte',
    'lte',
    'starts',
    'ends',
    'cont',
    'excl',
    'in',
    'notin',
    'isnull',
    'notnull',
    'between',
];
var ɵ0 = function (n) { return CondOperator[n]; };
var comparisonOperatorsList = Object.assign(deprecatedComparisonOperatorsList, objKeys(CondOperator).map(ɵ0));
var sortOrdersList = ['ASC', 'DESC'];
var comparisonOperatorsListStr = comparisonOperatorsList.join();
var sortOrdersListStr = sortOrdersList.join();
function validateFields(fields) {
    if (!isArrayStrings(fields)) {
        throw new RequestQueryException('Invalid fields. Array of strings expected');
    }
}
function validateCondition(val, cond) {
    if (!isObject(val) || !isStringFull(val.field)) {
        throw new RequestQueryException("Invalid field type in " + cond + " condition. String expected");
    }
    validateComparisonOperator(val.operator);
}
function validateComparisonOperator(operator) {
    if (!comparisonOperatorsList.includes(operator)) {
        throw new RequestQueryException("Invalid comparison operator. " + comparisonOperatorsListStr + " expected");
    }
}
function validateJoin(join) {
    if (!isObject(join) || !isStringFull(join.field)) {
        throw new RequestQueryException('Invalid join field. String expected');
    }
    if (!isUndefined(join.select) && !isArrayStrings(join.select)) {
        throw new RequestQueryException('Invalid join select. Array of strings expected');
    }
}
function validateSort(sort) {
    if (!isObject(sort) || !isStringFull(sort.field)) {
        throw new RequestQueryException('Invalid sort field. String expected');
    }
    if (!isEqual(sort.order, sortOrdersList[0]) &&
        !isEqual(sort.order, sortOrdersList[1])) {
        throw new RequestQueryException("Invalid sort order. " + sortOrdersListStr + " expected");
    }
}
function validateNumeric(val, num) {
    if (!isNumber(val)) {
        throw new RequestQueryException("Invalid " + num + ". Number expected");
    }
}
function validateParamOption(options, name) {
    if (!isObject(options)) {
        throw new RequestQueryException("Invalid param " + name + ". Invalid crud options");
    }
    var option = options[name];
    if (option && option.disabled) {
        return;
    }
    if (!isObject(option) || isNil(option.field) || isNil(option.type)) {
        throw new RequestQueryException("Invalid param option in Crud");
    }
}
function validateUUID(str, name) {
    var uuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    var uuidV4 = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (!uuidV4.test(str) && !uuid.test(str)) {
        throw new RequestQueryException("Invalid param " + name + ". UUID string expected");
    }
}

// tslint:disable:variable-name ban-types
var RequestQueryBuilder = /** @class */ (function () {
    function RequestQueryBuilder() {
        this.paramNames = {};
        this.queryObject = {};
        this.setParamNames();
    }
    RequestQueryBuilder.setOptions = function (options) {
        RequestQueryBuilder._options = __assign(__assign(__assign({}, RequestQueryBuilder._options), options), { paramNamesMap: __assign(__assign({}, RequestQueryBuilder._options.paramNamesMap), (options.paramNamesMap ? options.paramNamesMap : {})) });
    };
    RequestQueryBuilder.getOptions = function () {
        return RequestQueryBuilder._options;
    };
    RequestQueryBuilder.create = function (params) {
        var qb = new RequestQueryBuilder();
        return isObject(params) ? qb.createFromParams(params) : qb;
    };
    Object.defineProperty(RequestQueryBuilder.prototype, "options", {
        get: function () {
            return RequestQueryBuilder._options;
        },
        enumerable: true,
        configurable: true
    });
    RequestQueryBuilder.prototype.setParamNames = function () {
        var _this = this;
        Object.keys(RequestQueryBuilder._options.paramNamesMap).forEach(function (key) {
            var name = RequestQueryBuilder._options.paramNamesMap[key];
            _this.paramNames[key] = isString(name) ? name : name[0];
        });
    };
    RequestQueryBuilder.prototype.query = function (encode) {
        if (encode === void 0) { encode = true; }
        if (this.queryObject[this.paramNames.search]) {
            this.queryObject[this.paramNames.filter] = undefined;
            this.queryObject[this.paramNames.or] = undefined;
        }
        this.queryString = stringify(this.queryObject, { encode: encode });
        return this.queryString;
    };
    RequestQueryBuilder.prototype.select = function (fields) {
        if (isArrayFull(fields)) {
            validateFields(fields);
            this.queryObject[this.paramNames.fields] = fields.join(this.options.delimStr);
        }
        return this;
    };
    RequestQueryBuilder.prototype.search = function (s) {
        if (!isNil(s) && isObject(s)) {
            this.queryObject[this.paramNames.search] = JSON.stringify(s);
        }
        return this;
    };
    RequestQueryBuilder.prototype.setFilter = function (f) {
        this.setCondition(f, 'filter');
        return this;
    };
    RequestQueryBuilder.prototype.setOr = function (f) {
        this.setCondition(f, 'or');
        return this;
    };
    RequestQueryBuilder.prototype.setJoin = function (j) {
        var _this = this;
        if (!isNil(j)) {
            var param = this.checkQueryObjectParam('join', []);
            this.queryObject[param] = __spread(this.queryObject[param], (Array.isArray(j) && !isString(j[0])
                ? j.map(function (o) { return _this.addJoin(o); })
                : [this.addJoin(j)]));
        }
        return this;
    };
    RequestQueryBuilder.prototype.sortBy = function (s) {
        var _this = this;
        if (!isNil(s)) {
            var param = this.checkQueryObjectParam('sort', []);
            this.queryObject[param] = __spread(this.queryObject[param], (Array.isArray(s) && !isString(s[0])
                ? s.map(function (o) { return _this.addSortBy(o); })
                : [this.addSortBy(s)]));
        }
        return this;
    };
    RequestQueryBuilder.prototype.setLimit = function (n) {
        this.setNumeric(n, 'limit');
        return this;
    };
    RequestQueryBuilder.prototype.setOffset = function (n) {
        this.setNumeric(n, 'offset');
        return this;
    };
    RequestQueryBuilder.prototype.setPage = function (n) {
        this.setNumeric(n, 'page');
        return this;
    };
    RequestQueryBuilder.prototype.resetCache = function () {
        this.setNumeric(0, 'cache');
        return this;
    };
    RequestQueryBuilder.prototype.cond = function (f, cond) {
        if (cond === void 0) { cond = 'search'; }
        var filter = Array.isArray(f) ? { field: f[0], operator: f[1], value: f[2] } : f;
        validateCondition(filter, cond);
        var d = this.options.delim;
        return (filter.field +
            d +
            filter.operator +
            (hasValue(filter.value) ? d + filter.value : ''));
    };
    RequestQueryBuilder.prototype.addJoin = function (j) {
        var join = Array.isArray(j) ? { field: j[0], select: j[1] } : j;
        validateJoin(join);
        var d = this.options.delim;
        var ds = this.options.delimStr;
        return join.field + (isArrayFull(join.select) ? d + join.select.join(ds) : '');
    };
    RequestQueryBuilder.prototype.addSortBy = function (s) {
        var sort = Array.isArray(s) ? { field: s[0], order: s[1] } : s;
        validateSort(sort);
        var ds = this.options.delimStr;
        return sort.field + ds + sort.order;
    };
    RequestQueryBuilder.prototype.createFromParams = function (params) {
        this.select(params.fields);
        this.search(params.search);
        this.setFilter(params.filter);
        this.setOr(params.or);
        this.setJoin(params.join);
        this.setLimit(params.limit);
        this.setOffset(params.offset);
        this.setPage(params.page);
        this.sortBy(params.sort);
        if (params.resetCache) {
            this.resetCache();
        }
        return this;
    };
    RequestQueryBuilder.prototype.checkQueryObjectParam = function (cond, defaults) {
        var param = this.paramNames[cond];
        if (isNil(this.queryObject[param]) && !isUndefined(defaults)) {
            this.queryObject[param] = defaults;
        }
        return param;
    };
    RequestQueryBuilder.prototype.setCondition = function (f, cond) {
        var _this = this;
        if (!isNil(f)) {
            var param = this.checkQueryObjectParam(cond, []);
            this.queryObject[param] = __spread(this.queryObject[param], (Array.isArray(f) && !isString(f[0])
                ? f.map(function (o) { return _this.cond(o, cond); })
                : [this.cond(f, cond)]));
        }
    };
    RequestQueryBuilder.prototype.setNumeric = function (n, cond) {
        if (!isNil(n)) {
            validateNumeric(n, cond);
            this.queryObject[this.paramNames[cond]] = n;
        }
    };
    RequestQueryBuilder._options = {
        delim: '||',
        delimStr: ',',
        paramNamesMap: {
            fields: ['fields', 'select'],
            search: 's',
            filter: 'filter',
            or: 'or',
            join: 'join',
            sort: 'sort',
            limit: ['limit', 'per_page'],
            offset: 'offset',
            page: 'page',
            cache: 'cache',
        },
    };
    return RequestQueryBuilder;
}());

// tslint:disable:variable-name ban-types
var RequestQueryParser = /** @class */ (function () {
    function RequestQueryParser() {
        this.fields = [];
        this.paramsFilter = [];
        this.authPersist = undefined;
        this.filter = [];
        this.or = [];
        this.join = [];
        this.sort = [];
    }
    Object.defineProperty(RequestQueryParser.prototype, "_options", {
        get: function () {
            return RequestQueryBuilder.getOptions();
        },
        enumerable: true,
        configurable: true
    });
    RequestQueryParser.create = function () {
        return new RequestQueryParser();
    };
    RequestQueryParser.prototype.getParsed = function () {
        return {
            fields: this.fields,
            paramsFilter: this.paramsFilter,
            authPersist: this.authPersist,
            search: this.search,
            filter: this.filter,
            or: this.or,
            join: this.join,
            sort: this.sort,
            limit: this.limit,
            offset: this.offset,
            page: this.page,
            cache: this.cache,
        };
    };
    RequestQueryParser.prototype.parseQuery = function (query) {
        if (isObject(query)) {
            var paramNames = objKeys(query);
            if (hasLength(paramNames)) {
                this._query = query;
                this._paramNames = paramNames;
                var searchData = this._query[this.getParamNames('search')[0]];
                this.search = this.parseSearchQueryParam(searchData);
                if (isNil(this.search)) {
                    this.filter = this.parseQueryParam('filter', this.conditionParser.bind(this, 'filter'));
                    this.or = this.parseQueryParam('or', this.conditionParser.bind(this, 'or'));
                }
                this.fields =
                    this.parseQueryParam('fields', this.fieldsParser.bind(this))[0] || [];
                this.join = this.parseQueryParam('join', this.joinParser.bind(this));
                this.sort = this.parseQueryParam('sort', this.sortParser.bind(this));
                this.limit = this.parseQueryParam('limit', this.numericParser.bind(this, 'limit'))[0];
                this.offset = this.parseQueryParam('offset', this.numericParser.bind(this, 'offset'))[0];
                this.page = this.parseQueryParam('page', this.numericParser.bind(this, 'page'))[0];
                this.cache = this.parseQueryParam('cache', this.numericParser.bind(this, 'cache'))[0];
            }
        }
        return this;
    };
    RequestQueryParser.prototype.parseParams = function (params, options) {
        var _this = this;
        if (isObject(params)) {
            var paramNames = objKeys(params);
            if (hasLength(paramNames)) {
                this._params = params;
                this._paramsOptions = options;
                this.paramsFilter = paramNames
                    .map(function (name) { return _this.paramParser(name); })
                    .filter(function (filter) { return filter; });
            }
        }
        return this;
    };
    RequestQueryParser.prototype.setAuthPersist = function (persist) {
        if (persist === void 0) { persist = {}; }
        this.authPersist = persist || /* istanbul ignore next */ {};
    };
    RequestQueryParser.prototype.convertFilterToSearch = function (filter) {
        var _a, _b;
        var isEmptyValue = {
            isnull: true,
            notnull: true,
        };
        return filter
            ? (_a = {},
                _a[filter.field] = (_b = {},
                    _b[filter.operator] = isEmptyValue[filter.operator]
                        ? isEmptyValue[filter.operator]
                        : filter.value,
                    _b),
                _a) : /* istanbul ignore next */ {};
    };
    RequestQueryParser.prototype.getParamNames = function (type) {
        var _this = this;
        return this._paramNames.filter(function (p) {
            var name = _this._options.paramNamesMap[type];
            return isString(name) ? name === p : name.some(function (m) { return m === p; });
        });
    };
    RequestQueryParser.prototype.getParamValues = function (value, parser) {
        if (isStringFull(value)) {
            return [parser.call(this, value)];
        }
        if (isArrayFull(value)) {
            return value.map(function (val) { return parser(val); });
        }
        return [];
    };
    RequestQueryParser.prototype.parseQueryParam = function (type, parser) {
        var _this = this;
        var param = this.getParamNames(type);
        if (isArrayFull(param)) {
            return param.reduce(function (a, name) { return Object.assign(a, _this.getParamValues(_this._query[name], parser)); }, []);
        }
        return [];
    };
    RequestQueryParser.prototype.parseValue = function (val) {
        try {
            var parsed = JSON.parse(val);
            if (!isDate(parsed) && isObject(parsed)) {
                // throw new Error('Don\'t support object now');
                return val;
            }
            else if (typeof parsed === 'number' &&
                parsed.toLocaleString('fullwide', { useGrouping: false }) !== val) {
                // JS cannot handle big numbers. Leave it as a string to prevent data loss
                return val;
            }
            return parsed;
        }
        catch (ignored) {
            if (isDateString(val)) {
                return new Date(val);
            }
            return val;
        }
    };
    RequestQueryParser.prototype.parseValues = function (vals) {
        var _this = this;
        if (isArrayFull(vals)) {
            return vals.map(function (v) { return _this.parseValue(v); });
        }
        else {
            return this.parseValue(vals);
        }
    };
    RequestQueryParser.prototype.fieldsParser = function (data) {
        return data.split(this._options.delimStr);
    };
    RequestQueryParser.prototype.parseSearchQueryParam = function (d) {
        try {
            if (isNil(d)) {
                return undefined;
            }
            var data = JSON.parse(d);
            if (!isObject(data)) {
                throw new Error();
            }
            return data;
        }
        catch (_) {
            throw new RequestQueryException('Invalid search param. JSON expected');
        }
    };
    RequestQueryParser.prototype.conditionParser = function (cond, data) {
        var isArrayValue = [
            'in',
            'notin',
            'between',
            '$in',
            '$notin',
            '$between',
            '$inL',
            '$notinL',
        ];
        var isEmptyValue = ['isnull', 'notnull', '$isnull', '$notnull'];
        var param = data.split(this._options.delim);
        var field = param[0];
        var operator = param[1];
        var value = param[2] || '';
        if (isArrayValue.some(function (name) { return name === operator; })) {
            value = value.split(this._options.delimStr);
        }
        value = this.parseValues(value);
        if (!isEmptyValue.some(function (name) { return name === operator; }) && !hasValue(value)) {
            throw new RequestQueryException("Invalid " + cond + " value");
        }
        var condition = { field: field, operator: operator, value: value };
        validateCondition(condition, cond);
        return condition;
    };
    RequestQueryParser.prototype.joinParser = function (data) {
        var param = data.split(this._options.delim);
        var join = {
            field: param[0],
            select: isStringFull(param[1]) ? param[1].split(this._options.delimStr) : undefined,
        };
        validateJoin(join);
        return join;
    };
    RequestQueryParser.prototype.sortParser = function (data) {
        var param = data.split(this._options.delimStr);
        var sort = {
            field: param[0],
            order: param[1],
        };
        validateSort(sort);
        return sort;
    };
    RequestQueryParser.prototype.numericParser = function (num, data) {
        var val = this.parseValue(data);
        validateNumeric(val, num);
        return val;
    };
    RequestQueryParser.prototype.paramParser = function (name) {
        validateParamOption(this._paramsOptions, name);
        var option = this._paramsOptions[name];
        if (option.disabled) {
            return undefined;
        }
        var value = this._params[name];
        switch (option.type) {
            case 'number':
                value = this.parseValue(value);
                validateNumeric(value, "param " + name);
                break;
            case 'uuid':
                validateUUID(value, name);
                break;
            default:
                break;
        }
        return { field: option.field, operator: '$eq', value: value };
    };
    return RequestQueryParser;
}());

var CrudBaseService = /** @class */ (function () {
    function CrudBaseService(options, http) {
        this.http = http;
        this.options = options;
    }
    CrudBaseService.prototype.getPagination = function (limit, page, builder) {
        if (!builder) {
            builder = RequestQueryBuilder.create();
        }
        else if (!(builder instanceof RequestQueryBuilder)) {
            builder = RequestQueryBuilder.create(builder);
        }
        builder.setLimit(limit);
        builder.setPage(page);
        return this.http.get(this.getBaseUrl(), {
            params: this.getParamsFromQuery(builder),
        });
    };
    CrudBaseService.prototype.getMany = function (builder) {
        return this.http.get(this.getBaseUrl(), {
            params: this.getParamsFromQuery(builder),
        });
    };
    CrudBaseService.prototype.getOne = function (value, builder) {
        var url = this.getOneUrl(value);
        return this.http.get(url, {
            params: this.getParamsFromQuery(builder),
        });
    };
    CrudBaseService.prototype.create = function (body) {
        return this.http.post(this.getBaseUrl(), JSON.stringify(body), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };
    CrudBaseService.prototype.createMany = function (body) {
        return this.http.post(this.getBaseUrl() + '/bulk', JSON.stringify({ bulk: body }), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };
    CrudBaseService.prototype.put = function (value, body) {
        var url = this.getOneUrl(value);
        return this.http.put(url, JSON.stringify(body), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };
    CrudBaseService.prototype.patch = function (value, body) {
        var url = this.getOneUrl(value);
        return this.http.patch(url, JSON.stringify(body), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };
    CrudBaseService.prototype.delete = function (value) {
        var url = this.getOneUrl(value);
        return this.http.delete(url);
    };
    CrudBaseService.prototype.getParamsFromQuery = function (builder) {
        if (!(builder instanceof RequestQueryBuilder)) {
            builder = RequestQueryBuilder.create(builder);
        }
        return new HttpParams({ fromString: this.getQuery(builder) });
    };
    /**
     * Get request link
     */
    CrudBaseService.prototype.getBaseUrl = function () {
        return this.options.apiUrl + "/" + this.options.entity;
    };
    CrudBaseService.prototype.getOneUrl = function (value) {
        return this.getBaseUrl() + "/" + value;
    };
    CrudBaseService.prototype.getQuery = function (builder) {
        if (builder) {
            return builder.query();
        }
        return '';
    };
    return CrudBaseService;
}());

/*
 * Public API Surface of nest-crud-typeorm-client
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CondOperator, CrudBaseService, RequestQueryBuilder, RequestQueryException, RequestQueryParser, getOwnPropNames, hasLength, hasValue, isArrayFull, isArrayStrings, isBoolean, isDate, isDateString, isEqual, isFalse, isFunction, isIn, isNil, isNull, isNumber, isNumeric, isObject, isObjectFull, isString, isStringFull, isTrue, isUndefined, isValue, objKeys };
//# sourceMappingURL=nest-crud-typeorm-client.js.map
