import { objKeys } from './obj.util';
export const isUndefined = (val) => typeof val === 'undefined';
export const isNull = (val) => val === null;
export const isNil = (val) => isUndefined(val) || isNull(val);
export const isString = (val) => typeof val === 'string';
export const hasLength = (val) => val.length > 0;
export const isStringFull = (val) => isString(val) && hasLength(val);
export const isArrayFull = (val) => Array.isArray(val) && hasLength(val);
export const isArrayStrings = (val) => isArrayFull(val) && val.every((v) => isStringFull(v));
export const isObject = (val) => typeof val === 'object' && !isNull(val);
export const isObjectFull = (val) => isObject(val) && hasLength(objKeys(val));
export const isNumber = (val) => typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val);
export const isEqual = (val, eq) => val === eq;
export const isFalse = (val) => val === false;
export const isTrue = (val) => val === true;
export const isIn = (val, arr = []) => arr.some((o) => isEqual(val, o));
export const isBoolean = (val) => typeof val === 'boolean';
export const isNumeric = (val) => /^[+-]?([0-9]*[.])?[0-9]+$/.test(val);
export const isDateString = (val) => isStringFull(val) &&
    /^\d{4}-[01]\d-[0-3]\d(?:T[0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:Z|[-+][0-2]\d(?::?[0-5]\d)?)?)?$/g.test(val);
export const isDate = (val) => val instanceof Date;
export const isValue = (val) => isStringFull(val) || isNumber(val) || isBoolean(val) || isDate(val);
export const hasValue = (val) => isArrayFull(val) ? val.every((o) => isValue(o)) : isValue(val);
export const isFunction = (val) => typeof val === 'function';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tzLnV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXN0LWNydWQtdHlwZW9ybS1jbGllbnQvIiwic291cmNlcyI6WyJsaWIvdXRpbC9jaGVja3MudXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQVEsRUFBVyxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUssV0FBVyxDQUFDO0FBQzdFLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQVEsRUFBVyxFQUFFLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQztBQUMxRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFRLEVBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUUsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBUSxFQUFXLEVBQUUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUM7QUFDdkUsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBUSxFQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUMvRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFRLEVBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBUSxFQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2RixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFRLEVBQVcsRUFBRSxDQUNsRCxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUssR0FBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RFLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQVEsRUFBVyxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNuRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFRLEVBQVcsRUFBRSxDQUM1QyxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEUsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQU8sRUFBVyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQztBQUNsRSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFRLEVBQVcsRUFBRSxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUM7QUFDNUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBUSxFQUFXLEVBQUUsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDO0FBQzFELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQVEsRUFBRSxNQUFhLEVBQUUsRUFBVyxFQUFFLENBQ3pELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFRLEVBQVcsRUFBRSxDQUFDLE9BQU8sR0FBRyxLQUFLLFNBQVMsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFRLEVBQVcsRUFBRSxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0RixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFRLEVBQVcsRUFBRSxDQUNoRCxZQUFZLENBQUMsR0FBRyxDQUFDO0lBQ2pCLGdHQUFnRyxDQUFDLElBQUksQ0FDbkcsR0FBRyxDQUNKLENBQUM7QUFDSixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFRLEVBQWUsRUFBRSxDQUFDLEdBQUcsWUFBWSxJQUFJLENBQUM7QUFDckUsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBUSxFQUFXLEVBQUUsQ0FDM0MsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3RFLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQVEsRUFBVyxFQUFFLENBQzVDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUUsR0FBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1RSxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFRLEVBQVcsRUFBRSxDQUFDLE9BQU8sR0FBRyxLQUFLLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9iaktleXMgfSBmcm9tICcuL29iai51dGlsJztcblxuZXhwb3J0IGNvbnN0IGlzVW5kZWZpbmVkID0gKHZhbDogYW55KTogYm9vbGVhbiA9PiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbmV4cG9ydCBjb25zdCBpc051bGwgPSAodmFsOiBhbnkpOiBib29sZWFuID0+IHZhbCA9PT0gbnVsbDtcbmV4cG9ydCBjb25zdCBpc05pbCA9ICh2YWw6IGFueSk6IGJvb2xlYW4gPT4gaXNVbmRlZmluZWQodmFsKSB8fCBpc051bGwodmFsKTtcbmV4cG9ydCBjb25zdCBpc1N0cmluZyA9ICh2YWw6IGFueSk6IGJvb2xlYW4gPT4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG5leHBvcnQgY29uc3QgaGFzTGVuZ3RoID0gKHZhbDogYW55KTogYm9vbGVhbiA9PiB2YWwubGVuZ3RoID4gMDtcbmV4cG9ydCBjb25zdCBpc1N0cmluZ0Z1bGwgPSAodmFsOiBhbnkpOiBib29sZWFuID0+IGlzU3RyaW5nKHZhbCkgJiYgaGFzTGVuZ3RoKHZhbCk7XG5leHBvcnQgY29uc3QgaXNBcnJheUZ1bGwgPSAodmFsOiBhbnkpOiBib29sZWFuID0+IEFycmF5LmlzQXJyYXkodmFsKSAmJiBoYXNMZW5ndGgodmFsKTtcbmV4cG9ydCBjb25zdCBpc0FycmF5U3RyaW5ncyA9ICh2YWw6IGFueSk6IGJvb2xlYW4gPT5cbiAgaXNBcnJheUZ1bGwodmFsKSAmJiAodmFsIGFzIHN0cmluZ1tdKS5ldmVyeSgodikgPT4gaXNTdHJpbmdGdWxsKHYpKTtcbmV4cG9ydCBjb25zdCBpc09iamVjdCA9ICh2YWw6IGFueSk6IGJvb2xlYW4gPT4gdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgIWlzTnVsbCh2YWwpO1xuZXhwb3J0IGNvbnN0IGlzT2JqZWN0RnVsbCA9ICh2YWw6IGFueSkgPT4gaXNPYmplY3QodmFsKSAmJiBoYXNMZW5ndGgob2JqS2V5cyh2YWwpKTtcbmV4cG9ydCBjb25zdCBpc051bWJlciA9ICh2YWw6IGFueSk6IGJvb2xlYW4gPT5cbiAgdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc05hTih2YWwpICYmIE51bWJlci5pc0Zpbml0ZSh2YWwpO1xuZXhwb3J0IGNvbnN0IGlzRXF1YWwgPSAodmFsOiBhbnksIGVxOiBhbnkpOiBib29sZWFuID0+IHZhbCA9PT0gZXE7XG5leHBvcnQgY29uc3QgaXNGYWxzZSA9ICh2YWw6IGFueSk6IGJvb2xlYW4gPT4gdmFsID09PSBmYWxzZTtcbmV4cG9ydCBjb25zdCBpc1RydWUgPSAodmFsOiBhbnkpOiBib29sZWFuID0+IHZhbCA9PT0gdHJ1ZTtcbmV4cG9ydCBjb25zdCBpc0luID0gKHZhbDogYW55LCBhcnI6IGFueVtdID0gW10pOiBib29sZWFuID0+XG4gIGFyci5zb21lKChvKSA9PiBpc0VxdWFsKHZhbCwgbykpO1xuZXhwb3J0IGNvbnN0IGlzQm9vbGVhbiA9ICh2YWw6IGFueSk6IGJvb2xlYW4gPT4gdHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nO1xuZXhwb3J0IGNvbnN0IGlzTnVtZXJpYyA9ICh2YWw6IGFueSk6IGJvb2xlYW4gPT4gL15bKy1dPyhbMC05XSpbLl0pP1swLTldKyQvLnRlc3QodmFsKTtcbmV4cG9ydCBjb25zdCBpc0RhdGVTdHJpbmcgPSAodmFsOiBhbnkpOiBib29sZWFuID0+XG4gIGlzU3RyaW5nRnVsbCh2YWwpICYmXG4gIC9eXFxkezR9LVswMV1cXGQtWzAtM11cXGQoPzpUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGQoPzpcXC5cXGQrKT8oPzpafFstK11bMC0yXVxcZCg/Ojo/WzAtNV1cXGQpPyk/KT8kL2cudGVzdChcbiAgICB2YWwsXG4gICk7XG5leHBvcnQgY29uc3QgaXNEYXRlID0gKHZhbDogYW55KTogdmFsIGlzIERhdGUgPT4gdmFsIGluc3RhbmNlb2YgRGF0ZTtcbmV4cG9ydCBjb25zdCBpc1ZhbHVlID0gKHZhbDogYW55KTogYm9vbGVhbiA9PlxuICBpc1N0cmluZ0Z1bGwodmFsKSB8fCBpc051bWJlcih2YWwpIHx8IGlzQm9vbGVhbih2YWwpIHx8IGlzRGF0ZSh2YWwpO1xuZXhwb3J0IGNvbnN0IGhhc1ZhbHVlID0gKHZhbDogYW55KTogYm9vbGVhbiA9PlxuICBpc0FycmF5RnVsbCh2YWwpID8gKHZhbCBhcyBhbnlbXSkuZXZlcnkoKG8pID0+IGlzVmFsdWUobykpIDogaXNWYWx1ZSh2YWwpO1xuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAodmFsOiBhbnkpOiBib29sZWFuID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XG4iXX0=