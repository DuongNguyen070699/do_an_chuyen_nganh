import { HttpParams } from '@angular/common/http';
import { RequestQueryBuilder } from './crud-request';
export class CrudBaseService {
    constructor(options, http) {
        this.http = http;
        this.options = options;
    }
    getPagination(limit, page, builder) {
        if (!builder) {
            builder = RequestQueryBuilder.create();
        }
        else if (!(builder instanceof RequestQueryBuilder)) {
            builder = RequestQueryBuilder.create(builder);
        }
        builder.setLimit(limit);
        builder.setPage(page);
        return this.http.get(this.getBaseUrl(), {
            params: this.getParamsFromQuery(builder),
        });
    }
    getMany(builder) {
        return this.http.get(this.getBaseUrl(), {
            params: this.getParamsFromQuery(builder),
        });
    }
    getOne(value, builder) {
        const url = this.getOneUrl(value);
        return this.http.get(url, {
            params: this.getParamsFromQuery(builder),
        });
    }
    create(body) {
        return this.http.post(this.getBaseUrl(), JSON.stringify(body), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
    createMany(body) {
        return this.http.post(this.getBaseUrl() + '/bulk', JSON.stringify({ bulk: body }), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
    put(value, body) {
        const url = this.getOneUrl(value);
        return this.http.put(url, JSON.stringify(body), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
    patch(value, body) {
        const url = this.getOneUrl(value);
        return this.http.patch(url, JSON.stringify(body), {
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
    delete(value) {
        const url = this.getOneUrl(value);
        return this.http.delete(url);
    }
    getParamsFromQuery(builder) {
        if (!(builder instanceof RequestQueryBuilder)) {
            builder = RequestQueryBuilder.create(builder);
        }
        return new HttpParams({ fromString: this.getQuery(builder) });
    }
    /**
     * Get request link
     */
    getBaseUrl() {
        return `${this.options.apiUrl}/${this.options.entity}`;
    }
    getOneUrl(value) {
        return `${this.getBaseUrl()}/${value}`;
    }
    getQuery(builder) {
        if (builder) {
            return builder.query();
        }
        return '';
    }
}
//# sourceMappingURL=data:application/json;base64,